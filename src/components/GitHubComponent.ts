import { TextFile } from 'projen';
import { GithubWorkflow, PullRequestTemplate } from 'projen/lib/github';
import { Job, JobPermission, Triggers } from 'projen/lib/github/workflows-model';
import { TypeScriptProject } from 'projen/lib/typescript';
import { IProjectComponent } from '../types';

/**
 * Configures the GitHub templates, settings and npm scripts for the project.
 */
export class GitHubComponent implements IProjectComponent {
  private project: TypeScriptProject;

  /**
   * Initializes the GitHub component.
   * @param project The project to configure GitHub for.
   */
  constructor(project: TypeScriptProject) {
    this.project = project;
  }

  /**
   * Getter retrieving the file path for GitHub bug issue template.
   */
  private get bugIssueFilePath(): string {
    return '.github/ISSUE_TEMPLATE/bug.yml';
  }

  /**
   * Getter retrieving the file path for GitHub feature issue template.
   */
  private get featureIssueFilePath(): string {
    return '.github/ISSUE_TEMPLATE/feature.yml';
  }

  /**
   * Getter retrieving the file path for GitHub question issue template.
   */
  private get questionIssueFilePath(): string {
    return '.github/ISSUE_TEMPLATE/question.yml';
  }

  /**
   * Getter retrieving pull request template for the GitHub configuration.
   */
  private get pullRequestTemplate(): string[] {
    return [
      '## Reviewers Checklist',
      '',
      'for complete review list refer to ABS Loop - Review Aspects',
      '',
      '### Organizational Section',
      '',
      '- [ ] PR is assigned to the according feature/bug',
      '- [ ] Feature/bug is descriptive',
      '- [ ] Feature/bug is assigned to according labels',
      '- [ ] Feature/bug is assigned to a developer',
      '',
      '### Structure',
      '',
      '- [ ] Readability: Code is easy to understand, with meaningful names for variables, functions, and classes',
      '- [ ] Comments: Meaningful and helpful comments. Code is documented without being over-commented',
      '- [ ] DRY, KISS and YAGNI: Code implements only necessary features; no over-engineering',
      '- [ ] No sensitive data (e.g., passwords, API keys) in the code',
      '- [ ] No major updates for used packages',
      '',
      '### Testing',
      '',
      '- [ ] Code is locally tested by developer (if applicable)',
      '- [ ] Automated tests pass successfully',
      '<!-- Generated by projen. To modify, edit .projenrc.ts and run "npx projen".-->',
    ];
  }

  /**
   * Getter retrieving bug issue template for the GitHub configuration.
   */
  private get bugIssueTemplate(): string[] {
    return [
      'name: üêû Bug',
      'description: File a bug/issue',
      'title: "[BUG] <title>"',
      'labels: ["type: bug"]',
      'body:',
      '  - type: textarea',
      '    attributes:',
      '      label: Current behavior',
      "      description: A description of what you're experiencing.",
      '    validations:',
      '      required: true',
      '',
      '  - type: textarea',
      '    attributes:',
      '      label: Expected behavior',
      '      description: A description of what you expected to happen.',
      '    validations:',
      '      required: true',
      '# Generated by projen. To modify, edit .projenrc.ts and run "npx projen".',
    ];
  }

  /**
   * Getter retrieving feature issue template for the GitHub configuration.
   */
  private get featureIssueTemplate(): string[] {
    return [
      'name: üí° Feature',
      'description: Story related feature',
      'title: "[FEATURE] <title>"',
      'labels: ["type: feature"]',
      'body:',
      '  - type: textarea',
      '    attributes:',
      '      label: Description',
      '      description: A description of the feature.',
      '    validations:',
      '      required: true',
      '',
      '  - type: textarea',
      '    attributes:',
      '      label: Task List',
      '      description: Describe the steps to fulfill the feature.',
      '      value: |',
      '        - [ ] My First Task',
      '    validations:',
      '      required: true',
      '# Generated by projen. To modify, edit .projenrc.ts and run "npx projen".',
    ];
  }

  /**
   * Getter retrieving question issue template for the GitHub configuration.
   */
  private get questionIssueTemplate(): string[] {
    return [
      'name: ‚ùì Question',
      'description: Ask a question',
      'title: "[QUESTION] <title>"',
      'labels: ["type: question"]',
      'body:',
      '  - type: textarea',
      '    attributes:',
      '      label: Question',
      '      description: What would you like to know? If you encounter unusual behavior or identified a missing feature, consider opening a bug report instead.',
      '    validations:',
      '      required: true',
      '# Generated by projen. To modify, edit .projenrc.ts and run "npx projen".',
    ];
  }

  /**
   * Getter retrieving release workflow template options for the GitHub configuration.
   */
  private get releaseWorkflowOptions(): { on: Triggers; job: Job } {
    return {
      on: {
        pullRequest: {
          branches: ['main'],
          types: ['closed'],
        },
      },
      job: {
        runsOn: ['ubuntu-latest'],
        permissions: {
          contents: JobPermission.WRITE,
          pullRequests: JobPermission.WRITE,
        },
        steps: [
          {
            name: 'Create release',
            uses: 'dxfrontier/gh-action-release@main',
            with: {
              GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}',
              BRANCH: 'main',
            },
          },
        ],
      },
    };
  }

  /**
   * Getter retrieving stale workflow template options for the GitHub configuration.
   */
  private get staleWorkflowOptions(): { on: Triggers; job: Job } {
    return {
      on: {
        schedule: [
          {
            cron: '36 18 * * *',
          },
        ],
      },
      job: {
        runsOn: ['ubuntu-latest'],
        permissions: {
          issues: JobPermission.WRITE,
          pullRequests: JobPermission.WRITE,
        },
        steps: [
          {
            uses: 'actions/stale@v5',
            with: {
              'repo-token': '${{ secrets.GITHUB_TOKEN }}',
              'days-before-issue-stale': 30,
              'stale-issue-message':
                'This issue has not been updated in a while. If it is still relevant, please comment on it to keep it open. The issue will be closed soon if it remains inactive.',
              'close-issue-message': 'This issue has been closed automatically due to inactivity.',
              'stale-pr-message':
                'This PR has not been updated in a while. If it is still relevant, please comment on it to keep it open. The PR will be closed soon if it remains inactive.',
              'close-pr-message': 'This PR has been closed automatically due to inactivity.',
              'stale-issue-label': 'status: stale',
              'stale-pr-label': 'status: stale',
              'exempt-issue-labels': 'type: feature request',
              'exempt-pr-labels': 'type: feature request',
              'exempt-all-milestones': true,
            },
          },
        ],
      },
    };
  }

  /**
   * Creates the template file for a GitHub pull request.
   */
  private createPullRequest(): void {
    new PullRequestTemplate(this.project.github!, {
      lines: this.pullRequestTemplate,
    });
  }

  /**
   * Creates the template file for a GitHub bug issue.
   */
  private createBugIssue(): void {
    new TextFile(this.project, this.bugIssueFilePath, {
      lines: this.bugIssueTemplate,
    });
  }

  /**
   * Creates the template file for a GitHub feature issue.
   */
  private createFeatureIssue(): void {
    new TextFile(this.project, this.featureIssueFilePath, {
      lines: this.featureIssueTemplate,
    });
  }

  /**
   * Creates the template file for a GitHub question issue.
   */
  private createQuestionIssue(): void {
    new TextFile(this.project, this.questionIssueFilePath, {
      lines: this.questionIssueTemplate,
    });
  }

  /**
   * Creates the template file for a GitHub release workflow.
   */
  private createReleaseWorkflow(): void {
    const workflow: GithubWorkflow | undefined = this.project.github?.addWorkflow('Release');
    workflow?.on(this.releaseWorkflowOptions.on);
    workflow?.addJob('release', this.releaseWorkflowOptions.job);
  }

  /**
   * Creates the template file for a GitHub stale workflow.
   */
  private createStaleWorkflow(): void {
    const workflow: GithubWorkflow | undefined = this.project.github?.addWorkflow('Stale');
    workflow?.on(this.staleWorkflowOptions.on);
    workflow?.addJob('stale', this.staleWorkflowOptions.job);
  }

  /**
   * Adds template files to the GitHub component.
   */
  public add(): void {
    this.createPullRequest();
    this.createBugIssue();
    this.createFeatureIssue();
    this.createQuestionIssue();

    this.createReleaseWorkflow();
    this.createStaleWorkflow();
  }

  /**
   * Configures the `.gitattributes` file to treat GitHub component related files as generated code, optimizing diffs.
   */
  public updateGitAttributes(): void {
    // Pull request template is added automatically
    this.project.gitattributes.addAttributes(`/${this.bugIssueFilePath}`, 'linguist-generated');
    this.project.gitattributes.addAttributes(`/${this.featureIssueFilePath}`, 'linguist-generated');
    this.project.gitattributes.addAttributes(`/${this.questionIssueFilePath}`, 'linguist-generated');
    // Workflows templates are added automatically
  }

  /**
   * Executes setup for the GitHub component.
   */
  public setup(): void {
    this.add();
    this.updateGitAttributes();
  }
}
