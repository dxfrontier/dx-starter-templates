import { TextFile } from 'projen';
import { PullRequestTemplate } from 'projen/lib/github';
import { TypeScriptProject } from 'projen/lib/typescript';
import { IProjectComponent } from '../types/component';

/**
 * Configures the templates, settings and scripts for the project.
 *
 * Atm only the templates are relevant for GitHub.
 * The name GitHubComponent is chosen to avoid confusion with Projen components.
 */
export class GitHubComponent implements IProjectComponent {
  private project: TypeScriptProject;

  /**
   * Initializes the GitHubComponent.
   * @param project The project to configure GitHub for.
   */
  constructor(project: TypeScriptProject) {
    this.project = project;
  }

  /**
   * Retrieves the GitHub Bug issue file path for the project.
   */
  private get bugIssueFilePath(): string {
    return '.github/ISSUE_TEMPLATE/bug.yml';
  }

  /**
   * Retrieves the GitHub Feature Issue file path for the project.
   */
  private get featureIssueFilePath(): string {
    return '.github/ISSUE_TEMPLATE/feature.yml';
  }

  /**
   * Retrieves the GitHub Question Issue file path for the project.
   */
  private get questionIssueFilePath(): string {
    return '.github/ISSUE_TEMPLATE/question.yml';
  }

  /**
   * Retrieves the GitHub Pull Request Template for the project.
   */
  private get pullRequestTemplate(): string[] {
    return [
      '## Reviewers Checklist',
      '',
      'for complete review list refer to ABS Loop - Review Aspects',
      '',
      '### Organizational Section',
      '',
      '- [ ] PR is assigned to the according feature/bug',
      '- [ ] Feature/bug is descriptive',
      '- [ ] Feature/bug is assigned to a developer',
      '',
      '### Structure',
      '',
      '- [ ] Readability: Code is easy to understand, with meaningful names for variables, functions, and classes',
      '- [ ] Comments: Meaningful and helpful comments. Code is documented without being over-commented',
      '- [ ] DRY, KISS and YAGNI: Code implements only necessary features; no over-engineering',
      '- [ ] No sensitive data (e.g., passwords, API keys) in the code',
      '- [ ] No major updates for used packages',
      '',
      '### Testing',
      '',
      '- [ ] Code is locally tested by developer (if applicable)',
      '- [ ] Automated tests pass successfully',
      '<!-- Generated by projen. To modify, edit .projenrc.ts and run "npx projen".-->',
    ];
  }

  /**
   * Retrieves the GitHub Bug Issue template for the project.
   */
  private get bugIssueTemplate(): string[] {
    return [
      'name: üêû Bug',
      'description: File a bug/issue',
      'title: "[BUG] < title >"',
      'labels: ["type: bug"]',
      'body:',
      '  - type: textarea',
      '    attributes:',
      '      label: Current behavior',
      "      description: A description of what you're experiencing.",
      '    validations:',
      '      required: true',
      '',
      '  - type: textarea',
      '    attributes:',
      '      label: Expected behavior',
      '      description: A description of what you expected to happen.',
      '    validations:',
      '      required: true',
      '# Generated by projen. To modify, edit .projenrc.ts and run "npx projen".',
    ];
  }

  /**
   * Retrieves the GitHub Feature Issue template for the project.
   */
  private get featureIssueTemplate(): string[] {
    return [
      'name: üí° Feature',
      'description: Story related feature',
      'title: "[FEATURE] <title>"',
      'labels: ["type: feature"]',
      'body:',
      '  - type: textarea',
      '    attributes:',
      '      label: Description',
      '      description: A description of the feature.',
      '    validations:',
      '      required: true',
      '',
      '  - type: textarea',
      '    attributes:',
      '      label: Task List',
      '      description: Describe the steps to fulfill the feature.',
      '      value: |',
      '        - [ ] My First Task',
      '    validations:',
      '      required: true',
      '# Generated by projen. To modify, edit .projenrc.ts and run "npx projen".',
    ];
  }

  /**
   * Retrieves the GitHub Question Issue template for the project.
   */
  private get questionIssueTemplate(): string[] {
    return [
      'name: ‚ùì Question',
      'description: Ask a question',
      'title: "[QUESTION] <title>"',
      'labels: ["type: question"]',
      'body:',
      '  - type: textarea',
      '    attributes:',
      '      label: Question',
      '      description: What would you like to know? If you encounter unusual behavior or identified a missing feature, consider opening a bug report instead.',
      '    validations:',
      '      required: true',
      '# Generated by projen. To modify, edit .projenrc.ts and run "npx projen".',
    ];
  }

  /**
   * Creates a GitHub Pull Request template for the project.
   */
  private createPullRequest(): void {
    new PullRequestTemplate(this.project.github!, {
      lines: this.pullRequestTemplate,
    });
  }

  /**
   * Creates a GitHub Bug Issue template for the project.
   */
  private createBugIssue(): void {
    new TextFile(this.project, this.bugIssueFilePath, {
      lines: this.bugIssueTemplate,
    });
  }

  /**
   * Creates a GitHub Feature Issue template for the project.
   */
  private createFeatureIssue(): void {
    new TextFile(this.project, this.featureIssueFilePath, {
      lines: this.featureIssueTemplate,
    });
  }

  /**
   * Creates a GitHub Question Issue template for the project.
   */
  private createQuestionIssue(): void {
    new TextFile(this.project, this.questionIssueFilePath, {
      lines: this.questionIssueTemplate,
    });
  }

  /**
   * Setup GitHub and add according template files to the project.
   */
  public add(): void {
    this.createPullRequest();
    this.createBugIssue();
    this.createFeatureIssue();
    this.createQuestionIssue();
  }
}
