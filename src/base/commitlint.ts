import { TextFile } from 'projen';
import { Builder } from './builder';
import { LintStagedConfig, Scripts } from '../types';
import { TypeScriptProjectBase } from './project';

/**
 * Base class for CommitLint builder implementing all relevant configuration.
 * @abstract
 */
export abstract class CommitLintBase extends Builder {
  /**
   * Initializes the base CommitLint builder.
   * @param project The project to configure CommitLint for.
   */
  constructor(project: TypeScriptProjectBase) {
    super(project);
  }

  /**
   * File path to the CommitLint configuration.
   * @return File path to config file.
   * @protected
   */
  protected get filePath(): string {
    return '.commitlintrc.ts';
  }

  /**
   * Template file for the CommitLint configuration.
   * @return Template for the config file.
   * @protected
   */
  protected get template(): string[] {
    return [
      '// Generated by projen.To modify, edit.projenrc.ts and run "npx projen".',
      '',
      "import type { UserConfig } from '@commitlint/types';",
      "import { RuleConfigSeverity } from '@commitlint/types';",
      '',
      'const Configuration: UserConfig = {',
      "  extends: ['@commitlint/config-conventional'],",
      '  rules: {',
      "    'type-enum': [",
      '      RuleConfigSeverity.Error,',
      "      'always',",
      "      ['build', 'chore', 'ci', 'docs', 'feat', 'fix', 'perf', 'refactor', 'revert', 'style', 'test', 'delete'],",
      '    ],',
      "    'scope-empty': [RuleConfigSeverity.Error, 'never'],",
      "    'subject-empty': [RuleConfigSeverity.Error, 'never'],",
      '  },',
      "  helpUrl: 'https://github.com/conventional-changelog/commitlint/#what-is-commitlint',",
      '};',
      '',
      'export default Configuration;',
    ];
  }

  /**
   * NPM scripts for the CommitLint builder.
   * @return Npm script entries.
   * @protected
   */
  protected get scripts(): Scripts {
    return {
      commit: 'commit',
    };
  }

  /**
   * NPM packages to be installed as devDependencies for the CommitLint builder.
   * @return Npm dev dependencies.
   * @protected
   */
  protected get devDependencies(): string[] {
    return [
      '@commitlint/cli@^19.6.1',
      '@commitlint/config-conventional@^19.6.0',
      '@commitlint/prompt-cli@^19.6.1',
      '@commitlint/types@^19.5.0',
      'lint-staged@^15.2.11',
    ];
  }

  /**
   * Settings to be added to package.json for the CommitLint builder.
   * @return Configuration entries for package.json.
   * @protected
   */
  protected get npmSettings(): LintStagedConfig {
    return {};
  }

  protected addTemplates(): void {
    new TextFile(this.project, this.filePath, {
      lines: this.template,
    });
  }

  protected addSettings(): void {
    this.project.addFields({
      'lint-staged': this.npmSettings,
    });
  }

  protected addScripts(): void {
    for (const [name, command] of Object.entries(this.scripts)) {
      this.project.addTask(name, { exec: command });
    }
  }

  protected addDevDependencies(): void {
    this.project.addDevDeps(...this.devDependencies);
  }
}
