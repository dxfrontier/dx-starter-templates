import { TextFile } from 'projen';
import { Builder } from './builder';
import { Scripts } from '../types';
import { TypeScriptProjectBase } from './project';

/**
 * Base class for Eslint builder implementing all relevant configuration.
 * @abstract
 */
export abstract class EslintBase extends Builder {
  /**
   * Initializes the Eslint builder.
   * @param project The project to configure Eslint for.
   */
  constructor(project: TypeScriptProjectBase) {
    super(project);
  }

  /**
   * File path to the Eslint config.
   * @return File path to config file.
   * @protected
   */
  protected get configFilePath(): string {
    return 'eslint.config.mjs';
  }

  /**
   * File template for the Eslint configuration.
   * @return Template for the config file.
   * @protected
   */
  protected get configTemplate(): string[] {
    const rulesString: string = Object.entries(this.rules)
      .map(([rule, setting]: [string, string]): string => `      '${rule}': '${setting}',`)
      .join('\n');

    const ignoresString: string = this.ignoreFilePaths.map((path: string): string => `'${path}'`).join(', ');

    return [
      '// Generated by projen.To modify, edit.projenrc.ts and run "npx projen".',
      '',
      "import eslint from '@eslint/js';",
      "import tseslint from 'typescript-eslint';",
      '',
      'export default tseslint.config(',
      '  eslint.configs.recommended,',
      '  ...tseslint.configs.recommended,',
      '  ...tseslint.configs.stylistic,',
      '  {',
      '    rules: {',
      rulesString,
      '    },',
      '  },',
      '  {',
      `    ignores: [${ignoresString}],`,
      '  },',
      ');',
    ];
  }

  /**
   * File paths to the Eslint ignore entries.
   * @return File paths for ignore file entries.
   * @protected
   */
  protected get ignoreFilePaths(): string[] {
    return ['docs/', 'test/'];
  }

  /**
   * Rules for the Eslint config entries.
   * @return Rule entries.
   * @protected
   */
  protected get rules(): Record<string, string> {
    return {
      'no-console': 'off',
      'require-atomic-updates': 'off',
      '@typescript-eslint/no-non-null-assertion': 'off',
      '@typescript-eslint/ban-types': 'off',
      '@typescript-eslint/explicit-function-return-type': 'off',
      '@typescript-eslint/consistent-type-imports': 'off',
    };
  }

  /**
   * NPM scripts for the Eslint builder.
   * @return Npm script entries.
   * @protected
   */
  protected get scripts(): Scripts {
    return {
      eslint: 'eslint .',
    };
  }

  /**
   * NPM packages to be installed as devDependencies for the Eslint builder.
   * @return Npm dev dependencies.
   * @protected
   */
  protected get devDependencies(): string[] {
    return ['eslint@^9.17.0', 'typescript-eslint@^8.18.1'];
  }

  /**
   * Creates the template file for the Eslint commit-msg hook.
   * @private
   */
  private createConfigFile(): void {
    new TextFile(this.project, this.configFilePath, {
      lines: this.configTemplate,
    });
  }

  protected addTemplates(): void {
    this.createConfigFile();
  }

  protected addScripts(): void {
    for (const [name, command] of Object.entries(this.scripts)) {
      this.project.addTask(name, { exec: command, receiveArgs: true });
    }
  }

  protected addDevDependencies(): void {
    this.project.addDevDeps(...this.devDependencies);
  }
}
