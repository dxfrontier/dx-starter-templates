{
  "author": {
    "email": "mathias.von-kaiz@abs-gmbh.de",
    "name": "Mathias von Kaiz",
    "roles": [
      "author"
    ]
  },
  "bundled": {
    "construct": "^1.0.0"
  },
  "dependencies": {
    "projen": "^0.88.6"
  },
  "dependencyClosure": {
    "constructs": {
      "targets": {
        "dotnet": {
          "namespace": "Constructs",
          "packageId": "Constructs"
        },
        "go": {
          "moduleName": "github.com/aws/constructs-go"
        },
        "java": {
          "maven": {
            "artifactId": "constructs",
            "groupId": "software.constructs"
          },
          "package": "software.constructs"
        },
        "js": {
          "npm": "constructs"
        },
        "python": {
          "distName": "constructs",
          "module": "constructs"
        }
      }
    },
    "projen": {
      "submodules": {
        "projen.awscdk": {},
        "projen.build": {},
        "projen.cdk": {},
        "projen.cdk8s": {},
        "projen.cdktf": {},
        "projen.circleci": {},
        "projen.github": {},
        "projen.github.workflows": {},
        "projen.gitlab": {},
        "projen.java": {},
        "projen.javascript": {},
        "projen.python": {},
        "projen.release": {},
        "projen.typescript": {},
        "projen.vscode": {},
        "projen.web": {}
      },
      "targets": {
        "go": {
          "moduleName": "github.com/projen/projen-go"
        },
        "java": {
          "maven": {
            "artifactId": "projen",
            "groupId": "io.github.cdklabs"
          },
          "package": "io.github.cdklabs.projen"
        },
        "js": {
          "npm": "projen"
        },
        "python": {
          "distName": "projen",
          "module": "projen"
        }
      }
    }
  },
  "description": "projen-template-projects",
  "docs": {
    "stability": "stable"
  },
  "homepage": "https://github.com/dxfrontier/projen-template-projects.git",
  "jsiiVersion": "5.5.9 (build 9ca058c)",
  "license": "Apache-2.0",
  "metadata": {
    "jsii": {
      "pacmak": {
        "hasDefaultInterfaces": true
      }
    },
    "tscRootDir": "src"
  },
  "name": "projen-template-projects",
  "readme": {
    "markdown": "# Projen Template for Github Actions\n\nA project template for (projen)[https://projen.io/] to create a Github Action project.\n\n## Features\n\n- Automates project setup and configuration\n- Pre-configured with tools like TypeScript, ESLint, Prettier, and GitHub Actions\n- Customizable settings for seamless project management\n"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/dxfrontier/projen-template-projects.git"
  },
  "schema": "jsii/0.10.0",
  "targets": {
    "js": {
      "npm": "projen-template-projects"
    }
  },
  "types": {
    "projen-template-projects.Builder": {
      "abstract": true,
      "assembly": "projen-template-projects",
      "docs": {
        "custom": {
          "abstract": "true"
        },
        "stability": "stable",
        "summary": "Base class for managing project builder configurations."
      },
      "fqn": "projen-template-projects.Builder",
      "initializer": {
        "docs": {
          "stability": "stable",
          "summary": "Initializes the builder for a specified project."
        },
        "locationInModule": {
          "filename": "src/base/builder.ts",
          "line": 14
        },
        "parameters": [
          {
            "docs": {
              "summary": "The project to configure the builder for."
            },
            "name": "project",
            "type": {
              "fqn": "projen-template-projects.TypeScriptProjectBase"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/base/builder.ts",
        "line": 7
      },
      "methods": [
        {
          "docs": {
            "custom": {
              "protected": "true"
            },
            "stability": "stable",
            "summary": "Adds builder to the projects builder registry."
          },
          "locationInModule": {
            "filename": "src/base/builder.ts",
            "line": 22
          },
          "name": "addBuilder",
          "protected": true
        },
        {
          "docs": {
            "custom": {
              "protected": "true"
            },
            "stability": "stable",
            "summary": "Installs development dependencies for the builder in the project."
          },
          "locationInModule": {
            "filename": "src/base/builder.ts",
            "line": 52
          },
          "name": "addDevDependencies",
          "protected": true
        },
        {
          "docs": {
            "custom": {
              "protected": "true"
            },
            "stability": "stable",
            "summary": "Adds custom entries to the `.gitattributes` file for the builder in the project."
          },
          "locationInModule": {
            "filename": "src/base/builder.ts",
            "line": 59
          },
          "name": "addGitAttributes",
          "protected": true
        },
        {
          "docs": {
            "custom": {
              "protected": "true"
            },
            "stability": "stable",
            "summary": "Adds npm scripts specific to the builder within the project."
          },
          "locationInModule": {
            "filename": "src/base/builder.ts",
            "line": 45
          },
          "name": "addScripts",
          "protected": true
        },
        {
          "docs": {
            "custom": {
              "protected": "true"
            },
            "stability": "stable",
            "summary": "Configures settings specific to the builder within the project."
          },
          "locationInModule": {
            "filename": "src/base/builder.ts",
            "line": 38
          },
          "name": "addSettings",
          "protected": true
        },
        {
          "docs": {
            "custom": {
              "protected": "true"
            },
            "stability": "stable",
            "summary": "Adds template files to the builder's project directory."
          },
          "locationInModule": {
            "filename": "src/base/builder.ts",
            "line": 31
          },
          "name": "addTemplates",
          "protected": true
        },
        {
          "docs": {
            "custom": {
              "public": "This method is intended to be called in the constructor of each child class\nto set up the basic configuration for the builder. It sequentially calls\na set of setup methods which performs specific configuration tasks for the project.\nWe cannot use the preSynthesize hook as at this point it is too late setting all up.\n\n### Usage\n- This method should be called in each child's constructor immediately after\n  invoking `super()` to ensure the builder is fully initialized."
            },
            "stability": "stable",
            "summary": "Initialize builder configuration for the project."
          },
          "locationInModule": {
            "filename": "src/base/builder.ts",
            "line": 88
          },
          "name": "initialize"
        },
        {
          "docs": {
            "custom": {
              "public": "true"
            },
            "stability": "stable",
            "summary": "Hook to be called after synthesis."
          },
          "locationInModule": {
            "filename": "src/base/builder.ts",
            "line": 73
          },
          "name": "postSynthesize"
        },
        {
          "docs": {
            "custom": {
              "public": "true"
            },
            "stability": "stable",
            "summary": "Hook to be called before synthesis."
          },
          "locationInModule": {
            "filename": "src/base/builder.ts",
            "line": 66
          },
          "name": "preSynthesize"
        }
      ],
      "name": "Builder",
      "properties": [
        {
          "docs": {
            "stability": "stable"
          },
          "locationInModule": {
            "filename": "src/base/builder.ts",
            "line": 8
          },
          "name": "project",
          "protected": true,
          "type": {
            "fqn": "projen-template-projects.TypeScriptProjectBase"
          }
        }
      ],
      "symbolId": "src/base/builder:Builder"
    },
    "projen-template-projects.CommitLint": {
      "assembly": "projen-template-projects",
      "base": "projen-template-projects.CommitLintBase",
      "docs": {
        "stability": "stable",
        "summary": "CommitLint builder implementing all relevant configuration for the project."
      },
      "fqn": "projen-template-projects.CommitLint",
      "initializer": {
        "docs": {
          "remarks": "It calls the `initialize()` method immediately after invoking `super(project)`\nto ensure that all necessary configuration steps are applied.",
          "stability": "stable",
          "summary": "Initializes the CommitLint builder."
        },
        "locationInModule": {
          "filename": "src/github-action/commitlint.ts",
          "line": 14
        },
        "parameters": [
          {
            "docs": {
              "summary": "The project to configure CommitLint for."
            },
            "name": "project",
            "type": {
              "fqn": "projen-template-projects.TypeScriptProjectBase"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/github-action/commitlint.ts",
        "line": 7
      },
      "name": "CommitLint",
      "properties": [
        {
          "docs": {
            "custom": {
              "override": "true",
              "protected": "true"
            },
            "stability": "stable",
            "summary": "Settings to be added to package.json for the CommitLint builder."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/github-action/commitlint.ts",
            "line": 24
          },
          "name": "npmSettings",
          "overrides": "projen-template-projects.CommitLintBase",
          "protected": true,
          "type": {
            "collection": {
              "elementtype": {
                "union": {
                  "types": [
                    {
                      "primitive": "string"
                    },
                    {
                      "collection": {
                        "elementtype": {
                          "primitive": "string"
                        },
                        "kind": "array"
                      }
                    }
                  ]
                }
              },
              "kind": "map"
            }
          }
        }
      ],
      "symbolId": "src/github-action/commitlint:CommitLint"
    },
    "projen-template-projects.CommitLintBase": {
      "abstract": true,
      "assembly": "projen-template-projects",
      "base": "projen-template-projects.Builder",
      "docs": {
        "custom": {
          "abstract": "true"
        },
        "stability": "stable",
        "summary": "Base class for CommitLint builder implementing all relevant configuration."
      },
      "fqn": "projen-template-projects.CommitLintBase",
      "initializer": {
        "docs": {
          "stability": "stable",
          "summary": "Initializes the base CommitLint builder."
        },
        "locationInModule": {
          "filename": "src/base/commitlint.ts",
          "line": 15
        },
        "parameters": [
          {
            "docs": {
              "summary": "The project to configure CommitLint for."
            },
            "name": "project",
            "type": {
              "fqn": "projen-template-projects.TypeScriptProjectBase"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/base/commitlint.ts",
        "line": 10
      },
      "methods": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Installs development dependencies for the builder in the project."
          },
          "locationInModule": {
            "filename": "src/base/commitlint.ts",
            "line": 115
          },
          "name": "addDevDependencies",
          "overrides": "projen-template-projects.Builder",
          "protected": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Adds custom entries to the `.gitattributes` file for the builder in the project."
          },
          "locationInModule": {
            "filename": "src/base/commitlint.ts",
            "line": 119
          },
          "name": "addGitAttributes",
          "overrides": "projen-template-projects.Builder",
          "protected": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Adds npm scripts specific to the builder within the project."
          },
          "locationInModule": {
            "filename": "src/base/commitlint.ts",
            "line": 109
          },
          "name": "addScripts",
          "overrides": "projen-template-projects.Builder",
          "protected": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Configures settings specific to the builder within the project."
          },
          "locationInModule": {
            "filename": "src/base/commitlint.ts",
            "line": 103
          },
          "name": "addSettings",
          "overrides": "projen-template-projects.Builder",
          "protected": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Adds template files to the builder's project directory."
          },
          "locationInModule": {
            "filename": "src/base/commitlint.ts",
            "line": 97
          },
          "name": "addTemplates",
          "overrides": "projen-template-projects.Builder",
          "protected": true
        }
      ],
      "name": "CommitLintBase",
      "properties": [
        {
          "docs": {
            "custom": {
              "protected": "true"
            },
            "stability": "stable",
            "summary": "NPM packages to be installed as devDependencies for the CommitLint builder."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/base/commitlint.ts",
            "line": 79
          },
          "name": "devDependencies",
          "protected": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "custom": {
              "protected": "true"
            },
            "stability": "stable",
            "summary": "File path to the CommitLint configuration."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/base/commitlint.ts",
            "line": 23
          },
          "name": "filePath",
          "protected": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "protected": "true"
            },
            "stability": "stable",
            "summary": "Settings to be added to package.json for the CommitLint builder."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/base/commitlint.ts",
            "line": 93
          },
          "name": "npmSettings",
          "protected": true,
          "type": {
            "collection": {
              "elementtype": {
                "union": {
                  "types": [
                    {
                      "primitive": "string"
                    },
                    {
                      "collection": {
                        "elementtype": {
                          "primitive": "string"
                        },
                        "kind": "array"
                      }
                    }
                  ]
                }
              },
              "kind": "map"
            }
          }
        },
        {
          "docs": {
            "custom": {
              "protected": "true"
            },
            "stability": "stable",
            "summary": "NPM scripts for the CommitLint builder."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/base/commitlint.ts",
            "line": 69
          },
          "name": "scripts",
          "protected": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "map"
            }
          }
        },
        {
          "docs": {
            "custom": {
              "protected": "true"
            },
            "stability": "stable",
            "summary": "Template file for the CommitLint configuration."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/base/commitlint.ts",
            "line": 31
          },
          "name": "template",
          "protected": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        }
      ],
      "symbolId": "src/base/commitlint:CommitLintBase"
    },
    "projen-template-projects.CommitLintJsii": {
      "assembly": "projen-template-projects",
      "base": "projen-template-projects.CommitLintBase",
      "docs": {
        "stability": "stable",
        "summary": "CommitLint builder implementing all relevant configuration for the Jsii project."
      },
      "fqn": "projen-template-projects.CommitLintJsii",
      "initializer": {
        "docs": {
          "remarks": "It calls the `initialize()` method immediately after invoking `super(project)`\nto ensure that all necessary configuration steps are applied.",
          "stability": "stable",
          "summary": "Initializes the CommitLint builder."
        },
        "locationInModule": {
          "filename": "src/jsii/commitlint.ts",
          "line": 14
        },
        "parameters": [
          {
            "docs": {
              "summary": "The project to configure CommitLint for."
            },
            "name": "project",
            "type": {
              "fqn": "projen-template-projects.TypeScriptProjectBase"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/jsii/commitlint.ts",
        "line": 7
      },
      "methods": [
        {
          "docs": {
            "custom": {
              "override": "true",
              "protected": "true"
            },
            "stability": "stable",
            "summary": "Entries in `.gitattributes` are already done by `.projenrc.ts`."
          },
          "locationInModule": {
            "filename": "src/jsii/commitlint.ts",
            "line": 36
          },
          "name": "addGitAttributes",
          "overrides": "projen-template-projects.CommitLintBase",
          "protected": true
        }
      ],
      "name": "CommitLintJsii",
      "properties": [
        {
          "docs": {
            "custom": {
              "override": "true",
              "protected": "true"
            },
            "stability": "stable",
            "summary": "Settings to be added to package.json for the CommitLint builder."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jsii/commitlint.ts",
            "line": 24
          },
          "name": "npmSettings",
          "overrides": "projen-template-projects.CommitLintBase",
          "protected": true,
          "type": {
            "collection": {
              "elementtype": {
                "union": {
                  "types": [
                    {
                      "primitive": "string"
                    },
                    {
                      "collection": {
                        "elementtype": {
                          "primitive": "string"
                        },
                        "kind": "array"
                      }
                    }
                  ]
                }
              },
              "kind": "map"
            }
          }
        }
      ],
      "symbolId": "src/jsii/commitlint:CommitLintJsii"
    },
    "projen-template-projects.DevContainer": {
      "assembly": "projen-template-projects",
      "base": "projen-template-projects.DevContainerBase",
      "docs": {
        "stability": "stable",
        "summary": "DevContainer builder implementing all relevant configuration for the project."
      },
      "fqn": "projen-template-projects.DevContainer",
      "initializer": {
        "docs": {
          "remarks": "It calls the `initialize()` method immediately after invoking `super(project)`\nto ensure that all necessary configuration steps are applied.",
          "stability": "stable",
          "summary": "Initializes the DevContainer builder."
        },
        "locationInModule": {
          "filename": "src/github-action/devcontainer.ts",
          "line": 13
        },
        "parameters": [
          {
            "docs": {
              "summary": "The project to configure CommitLint for."
            },
            "name": "project",
            "type": {
              "fqn": "projen-template-projects.TypeScriptProjectBase"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/github-action/devcontainer.ts",
        "line": 6
      },
      "name": "DevContainer",
      "properties": [
        {
          "docs": {
            "custom": {
              "override": "true",
              "protected": "true"
            },
            "stability": "stable",
            "summary": "VSCode extensions to be installed in the DevContainer."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/github-action/devcontainer.ts",
            "line": 23
          },
          "name": "extensions",
          "overrides": "projen-template-projects.DevContainerBase",
          "protected": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        }
      ],
      "symbolId": "src/github-action/devcontainer:DevContainer"
    },
    "projen-template-projects.DevContainerBase": {
      "abstract": true,
      "assembly": "projen-template-projects",
      "base": "projen-template-projects.Builder",
      "docs": {
        "custom": {
          "abstract": "true"
        },
        "stability": "stable",
        "summary": "Base class for DevContainer builder implementing all relevant configuration."
      },
      "fqn": "projen-template-projects.DevContainerBase",
      "initializer": {
        "docs": {
          "stability": "stable",
          "summary": "Initializes the base DevContainer builder."
        },
        "locationInModule": {
          "filename": "src/base/devcontainer.ts",
          "line": 15
        },
        "parameters": [
          {
            "docs": {
              "summary": "The project to configure DevContainer for."
            },
            "name": "project",
            "type": {
              "fqn": "projen-template-projects.TypeScriptProjectBase"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/base/devcontainer.ts",
        "line": 10
      },
      "methods": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Adds custom entries to the `.gitattributes` file for the builder in the project."
          },
          "locationInModule": {
            "filename": "src/base/devcontainer.ts",
            "line": 97
          },
          "name": "addGitAttributes",
          "overrides": "projen-template-projects.Builder",
          "protected": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Adds npm scripts specific to the builder within the project."
          },
          "locationInModule": {
            "filename": "src/base/devcontainer.ts",
            "line": 91
          },
          "name": "addScripts",
          "overrides": "projen-template-projects.Builder",
          "protected": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Adds template files to the builder's project directory."
          },
          "locationInModule": {
            "filename": "src/base/devcontainer.ts",
            "line": 87
          },
          "name": "addTemplates",
          "overrides": "projen-template-projects.Builder",
          "protected": true
        }
      ],
      "name": "DevContainerBase",
      "properties": [
        {
          "docs": {
            "custom": {
              "protected": "true"
            },
            "stability": "stable",
            "summary": "Docker image used for the DevContainer."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/base/devcontainer.ts",
            "line": 31
          },
          "name": "dockerImage",
          "protected": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "protected": "true"
            },
            "stability": "stable",
            "summary": "VSCode extensions to be installed in the DevContainer."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/base/devcontainer.ts",
            "line": 51
          },
          "name": "extensions",
          "protected": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "custom": {
              "protected": "true"
            },
            "stability": "stable",
            "summary": "Features to be installed in the DevContainer."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/base/devcontainer.ts",
            "line": 39
          },
          "name": "features",
          "protected": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "map"
            }
          }
        },
        {
          "docs": {
            "custom": {
              "protected": "true"
            },
            "stability": "stable",
            "summary": "File path to the CommitLint configuration."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/base/devcontainer.ts",
            "line": 23
          },
          "name": "filePath",
          "protected": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "protected": "true"
            },
            "stability": "stable",
            "summary": "NPM scripts used within the DevContainer environment."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/base/devcontainer.ts",
            "line": 81
          },
          "name": "scripts",
          "protected": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "map"
            }
          }
        },
        {
          "docs": {
            "custom": {
              "protected": "true"
            },
            "remarks": "The first script in `scripts` is used as the postCreateCommand to install dependencies upon creation.",
            "stability": "stable",
            "summary": "Template file for DevContainer creation."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/base/devcontainer.ts",
            "line": 60
          },
          "name": "template",
          "protected": true,
          "type": {
            "fqn": "projen.JsonFileOptions"
          }
        }
      ],
      "symbolId": "src/base/devcontainer:DevContainerBase"
    },
    "projen-template-projects.DevContainerJsii": {
      "assembly": "projen-template-projects",
      "base": "projen-template-projects.DevContainerBase",
      "docs": {
        "stability": "stable",
        "summary": "DevContainer builder implementing all relevant configuration for the Jsii project."
      },
      "fqn": "projen-template-projects.DevContainerJsii",
      "initializer": {
        "docs": {
          "remarks": "It calls the `initialize()` method immediately after invoking `super(project)`\nto ensure that all necessary configuration steps are applied.",
          "stability": "stable",
          "summary": "Initializes the DevContainer builder."
        },
        "locationInModule": {
          "filename": "src/jsii/devcontainer.ts",
          "line": 13
        },
        "parameters": [
          {
            "docs": {
              "summary": "The project to configure CommitLint for."
            },
            "name": "project",
            "type": {
              "fqn": "projen-template-projects.TypeScriptProjectBase"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/jsii/devcontainer.ts",
        "line": 6
      },
      "name": "DevContainerJsii",
      "properties": [
        {
          "docs": {
            "custom": {
              "override": "true",
              "protected": "true"
            },
            "stability": "stable",
            "summary": "VSCode extensions to be installed in the DevContainer."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jsii/devcontainer.ts",
            "line": 23
          },
          "name": "extensions",
          "overrides": "projen-template-projects.DevContainerBase",
          "protected": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        }
      ],
      "symbolId": "src/jsii/devcontainer:DevContainerJsii"
    },
    "projen-template-projects.GitHub": {
      "assembly": "projen-template-projects",
      "base": "projen-template-projects.GitHubBase",
      "docs": {
        "stability": "stable",
        "summary": "GitHub builder implementing all relevant configuration for the project."
      },
      "fqn": "projen-template-projects.GitHub",
      "initializer": {
        "docs": {
          "remarks": "It calls the `initialize()` method immediately after invoking `super(project)`\nto ensure that all necessary configuration steps are applied.",
          "stability": "stable",
          "summary": "Initializes the GitHub builder."
        },
        "locationInModule": {
          "filename": "src/github-action/github.ts",
          "line": 13
        },
        "parameters": [
          {
            "docs": {
              "summary": "The project to configure GitHub for."
            },
            "name": "project",
            "type": {
              "fqn": "projen-template-projects.TypeScriptProjectBase"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/github-action/github.ts",
        "line": 6
      },
      "name": "GitHub",
      "symbolId": "src/github-action/github:GitHub"
    },
    "projen-template-projects.GitHubActionProject": {
      "assembly": "projen-template-projects",
      "base": "projen-template-projects.TypeScriptProjectBase",
      "docs": {
        "stability": "stable",
        "summary": "Defines a GitHub Action project."
      },
      "fqn": "projen-template-projects.GitHubActionProject",
      "initializer": {
        "docs": {
          "stability": "stable",
          "summary": "Initializes the GitHub Action project."
        },
        "locationInModule": {
          "filename": "src/github-action/project.ts",
          "line": 13
        },
        "parameters": [
          {
            "docs": {
              "summary": "Additional project options."
            },
            "name": "options",
            "type": {
              "fqn": "projen-template-projects.TypeScriptProjectBaseOptions"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/github-action/project.ts",
        "line": 8
      },
      "name": "GitHubActionProject",
      "symbolId": "src/github-action/project:GitHubActionProject"
    },
    "projen-template-projects.GitHubBase": {
      "abstract": true,
      "assembly": "projen-template-projects",
      "base": "projen-template-projects.Builder",
      "docs": {
        "custom": {
          "abstract": "true"
        },
        "stability": "stable",
        "summary": "Base class for GitHub builder implementing all relevant configuration."
      },
      "fqn": "projen-template-projects.GitHubBase",
      "initializer": {
        "docs": {
          "stability": "stable",
          "summary": "Initializes the base GitHub builder."
        },
        "locationInModule": {
          "filename": "src/base/github.ts",
          "line": 17
        },
        "parameters": [
          {
            "docs": {
              "summary": "The project to configure GitHub builder for."
            },
            "name": "project",
            "type": {
              "fqn": "projen-template-projects.TypeScriptProjectBase"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/base/github.ts",
        "line": 12
      },
      "methods": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Adds custom entries to the `.gitattributes` file for the builder in the project."
          },
          "locationInModule": {
            "filename": "src/base/github.ts",
            "line": 416
          },
          "name": "addGitAttributes",
          "overrides": "projen-template-projects.Builder",
          "protected": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Adds template files to the builder's project directory."
          },
          "locationInModule": {
            "filename": "src/base/github.ts",
            "line": 405
          },
          "name": "addTemplates",
          "overrides": "projen-template-projects.Builder",
          "protected": true
        }
      ],
      "name": "GitHubBase",
      "properties": [
        {
          "docs": {
            "custom": {
              "protected": "true"
            },
            "stability": "stable",
            "summary": "File path to GitHub bug issue template."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/base/github.ts",
            "line": 25
          },
          "name": "bugIssueFilePath",
          "protected": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "protected": "true"
            },
            "stability": "stable",
            "summary": "Issue template for the GitHub Bug configuration."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/base/github.ts",
            "line": 91
          },
          "name": "bugIssueTemplate",
          "protected": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "custom": {
              "protected": "true"
            },
            "remarks": "This file is used by release workflow to create the Changelog.",
            "stability": "stable",
            "summary": "Cliff toml configuration for the GitHub configuration."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/base/github.ts",
            "line": 171
          },
          "name": "cliffTomlConfiguration",
          "protected": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "custom": {
              "protected": "true"
            },
            "remarks": "This file is used by release workflow to create the Changelog.",
            "stability": "stable",
            "summary": "File path to the Cliff toml configuration."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/base/github.ts",
            "line": 50
          },
          "name": "cliffTomlFilePath",
          "protected": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "protected": "true"
            },
            "stability": "stable",
            "summary": "File path to GitHub feature issue template."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/base/github.ts",
            "line": 33
          },
          "name": "featureIssueFilePath",
          "protected": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "protected": "true"
            },
            "stability": "stable",
            "summary": "Issue template for the GitHub feature configuration."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/base/github.ts",
            "line": 119
          },
          "name": "featureIssueTemplate",
          "protected": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "custom": {
              "protected": "true"
            },
            "stability": "stable",
            "summary": "Pull Request template for the GitHub configuration."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/base/github.ts",
            "line": 58
          },
          "name": "pullRequestTemplate",
          "protected": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "custom": {
              "protected": "true"
            },
            "stability": "stable",
            "summary": "File path to GitHub question issue template."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/base/github.ts",
            "line": 41
          },
          "name": "questionIssueFilePath",
          "protected": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "protected": "true"
            },
            "stability": "stable",
            "summary": "Template for the GitHub Question Issue configuration."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/base/github.ts",
            "line": 149
          },
          "name": "questionIssueTemplate",
          "protected": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "custom": {
              "protected": "true"
            },
            "stability": "stable",
            "summary": "Workflow release template for the GitHub configuration."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/base/github.ts",
            "line": 264
          },
          "name": "releaseWorkflowOptions",
          "protected": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "map"
            }
          }
        },
        {
          "docs": {
            "custom": {
              "protected": "true"
            },
            "stability": "stable",
            "summary": "Workflow stale template options for the GitHub configuration."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/base/github.ts",
            "line": 296
          },
          "name": "staleWorkflowOptions",
          "protected": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "map"
            }
          }
        }
      ],
      "symbolId": "src/base/github:GitHubBase"
    },
    "projen-template-projects.GitHubJsii": {
      "assembly": "projen-template-projects",
      "base": "projen-template-projects.GitHubBase",
      "docs": {
        "stability": "stable",
        "summary": "GitHub builder implementing all relevant configuration for the Jsii project."
      },
      "fqn": "projen-template-projects.GitHubJsii",
      "initializer": {
        "docs": {
          "remarks": "It calls the `initialize()` method immediately after invoking `super(project)`\nto ensure that all necessary configuration steps are applied.",
          "stability": "stable",
          "summary": "Initializes the GitHub builder."
        },
        "locationInModule": {
          "filename": "src/jsii/github.ts",
          "line": 13
        },
        "parameters": [
          {
            "docs": {
              "summary": "The project to configure GitHub for."
            },
            "name": "project",
            "type": {
              "fqn": "projen-template-projects.TypeScriptProjectBase"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/jsii/github.ts",
        "line": 6
      },
      "name": "GitHubJsii",
      "symbolId": "src/jsii/github:GitHubJsii"
    },
    "projen-template-projects.Husky": {
      "assembly": "projen-template-projects",
      "base": "projen-template-projects.HuskyBase",
      "docs": {
        "stability": "stable",
        "summary": "Husky builder implementing all relevant configuration for the project."
      },
      "fqn": "projen-template-projects.Husky",
      "initializer": {
        "docs": {
          "remarks": "It calls the `initialize()` method immediately after invoking `super(project)`\nto ensure that all necessary configuration steps are applied.",
          "stability": "stable",
          "summary": "Initializes the Husky builder."
        },
        "locationInModule": {
          "filename": "src/github-action/husky.ts",
          "line": 13
        },
        "parameters": [
          {
            "docs": {
              "summary": "The project to configure Husky for."
            },
            "name": "project",
            "type": {
              "fqn": "projen-template-projects.TypeScriptProjectBase"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/github-action/husky.ts",
        "line": 6
      },
      "name": "Husky",
      "symbolId": "src/github-action/husky:Husky"
    },
    "projen-template-projects.HuskyBase": {
      "abstract": true,
      "assembly": "projen-template-projects",
      "base": "projen-template-projects.Builder",
      "docs": {
        "custom": {
          "abstract": "true"
        },
        "stability": "stable",
        "summary": "Base class for Husky builder implementing all relevant configuration."
      },
      "fqn": "projen-template-projects.HuskyBase",
      "initializer": {
        "docs": {
          "stability": "stable",
          "summary": "Initializes the Husky builder."
        },
        "locationInModule": {
          "filename": "src/base/husky.ts",
          "line": 15
        },
        "parameters": [
          {
            "docs": {
              "summary": "The project to configure Husky for."
            },
            "name": "project",
            "type": {
              "fqn": "projen-template-projects.TypeScriptProjectBase"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/base/husky.ts",
        "line": 10
      },
      "methods": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Installs development dependencies for the builder in the project."
          },
          "locationInModule": {
            "filename": "src/base/husky.ts",
            "line": 104
          },
          "name": "addDevDependencies",
          "overrides": "projen-template-projects.Builder",
          "protected": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Adds custom entries to the `.gitattributes` file for the builder in the project."
          },
          "locationInModule": {
            "filename": "src/base/husky.ts",
            "line": 108
          },
          "name": "addGitAttributes",
          "overrides": "projen-template-projects.Builder",
          "protected": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Adds npm scripts specific to the builder within the project."
          },
          "locationInModule": {
            "filename": "src/base/husky.ts",
            "line": 98
          },
          "name": "addScripts",
          "overrides": "projen-template-projects.Builder",
          "protected": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Adds template files to the builder's project directory."
          },
          "locationInModule": {
            "filename": "src/base/husky.ts",
            "line": 93
          },
          "name": "addTemplates",
          "overrides": "projen-template-projects.Builder",
          "protected": true
        }
      ],
      "name": "HuskyBase",
      "properties": [
        {
          "docs": {
            "custom": {
              "protected": "true"
            },
            "stability": "stable",
            "summary": "File path to the Husky commit-msg hook."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/base/husky.ts",
            "line": 23
          },
          "name": "commitMsgFilePath",
          "protected": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "protected": "true"
            },
            "stability": "stable",
            "summary": "Commit-msg hook template for the Husky configuration."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/base/husky.ts",
            "line": 39
          },
          "name": "commitMsgTemplate",
          "protected": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "custom": {
              "protected": "true"
            },
            "stability": "stable",
            "summary": "NPM packages to be installed as devDependencies for the CommitLint builder."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/base/husky.ts",
            "line": 69
          },
          "name": "devDependencies",
          "protected": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "custom": {
              "protected": "true"
            },
            "stability": "stable",
            "summary": "File path to the Husky pre-commit hook."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/base/husky.ts",
            "line": 31
          },
          "name": "preCommitFilePath",
          "protected": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "protected": "true"
            },
            "stability": "stable",
            "summary": "Pre-commit hook template for the Husky configuration."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/base/husky.ts",
            "line": 51
          },
          "name": "preCommitTemplate",
          "protected": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "custom": {
              "protected": "true"
            },
            "stability": "stable",
            "summary": "NPM scripts for the CommitLint builder."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/base/husky.ts",
            "line": 59
          },
          "name": "scripts",
          "protected": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "map"
            }
          }
        }
      ],
      "symbolId": "src/base/husky:HuskyBase"
    },
    "projen-template-projects.HuskyJsii": {
      "assembly": "projen-template-projects",
      "base": "projen-template-projects.HuskyBase",
      "docs": {
        "stability": "stable",
        "summary": "Husky builder implementing all relevant configuration for the Jsii project."
      },
      "fqn": "projen-template-projects.HuskyJsii",
      "initializer": {
        "docs": {
          "remarks": "It calls the `initialize()` method immediately after invoking `super(project)`\nto ensure that all necessary configuration steps are applied.",
          "stability": "stable",
          "summary": "Initializes the Husky builder."
        },
        "locationInModule": {
          "filename": "src/jsii/husky.ts",
          "line": 13
        },
        "parameters": [
          {
            "docs": {
              "summary": "The project to configure Husky for."
            },
            "name": "project",
            "type": {
              "fqn": "projen-template-projects.TypeScriptProjectBase"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/jsii/husky.ts",
        "line": 6
      },
      "methods": [
        {
          "docs": {
            "custom": {
              "override": "true",
              "protected": "true"
            },
            "stability": "stable",
            "summary": "Entries in `.gitattributes` are already done by `.projenrc.ts`."
          },
          "locationInModule": {
            "filename": "src/jsii/husky.ts",
            "line": 24
          },
          "name": "addGitAttributes",
          "overrides": "projen-template-projects.HuskyBase",
          "protected": true
        }
      ],
      "name": "HuskyJsii",
      "symbolId": "src/jsii/husky:HuskyJsii"
    },
    "projen-template-projects.NpmPackage": {
      "assembly": "projen-template-projects",
      "base": "projen-template-projects.NpmPackageBase",
      "docs": {
        "stability": "stable",
        "summary": "NPM Package builder implementing all relevant configuration for the project."
      },
      "fqn": "projen-template-projects.NpmPackage",
      "initializer": {
        "docs": {
          "remarks": "It calls the `initialize()` method immediately after invoking `super(project)`\nto ensure that all necessary configuration steps are applied.\nAdditionally it calls `removeScripts()` to ensure, that no projen standard scripts are defined\nas these scripts are not needed for this kind of project.",
          "stability": "stable",
          "summary": "Initializes the NPM Package builder."
        },
        "locationInModule": {
          "filename": "src/github-action/npm.ts",
          "line": 15
        },
        "parameters": [
          {
            "docs": {
              "summary": "The project to configure NPM Package for."
            },
            "name": "project",
            "type": {
              "fqn": "projen-template-projects.TypeScriptProjectBase"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/github-action/npm.ts",
        "line": 6
      },
      "name": "NpmPackage",
      "symbolId": "src/github-action/npm:NpmPackage"
    },
    "projen-template-projects.NpmPackageBase": {
      "abstract": true,
      "assembly": "projen-template-projects",
      "base": "projen-template-projects.Builder",
      "docs": {
        "custom": {
          "abstract": "true"
        },
        "stability": "stable",
        "summary": "Base class for NPM Package builder implementing all relevant configuration."
      },
      "fqn": "projen-template-projects.NpmPackageBase",
      "initializer": {
        "docs": {
          "stability": "stable",
          "summary": "Initializes the base NPM Package builder."
        },
        "locationInModule": {
          "filename": "src/base/npm.ts",
          "line": 14
        },
        "parameters": [
          {
            "docs": {
              "summary": "The project to configure NPM for."
            },
            "name": "project",
            "type": {
              "fqn": "projen-template-projects.TypeScriptProjectBase"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/base/npm.ts",
        "line": 9
      },
      "methods": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Adds custom entries to the `.gitattributes` file for the builder in the project."
          },
          "locationInModule": {
            "filename": "src/base/npm.ts",
            "line": 94
          },
          "name": "addGitAttributes",
          "overrides": "projen-template-projects.Builder",
          "protected": true
        },
        {
          "docs": {
            "custom": {
              "protected": "true"
            },
            "stability": "stable",
            "summary": "Configures settings specific to the builder within the project."
          },
          "locationInModule": {
            "filename": "src/base/npm.ts",
            "line": 77
          },
          "name": "addSettings",
          "overrides": "projen-template-projects.Builder",
          "protected": true
        },
        {
          "docs": {
            "custom": {
              "protected": "true"
            },
            "remarks": "Overwrite this method if you want to keep the projen standard scripts.",
            "stability": "stable",
            "summary": "Removes the NPM Package scripts associated with Projen NPM Package initialization."
          },
          "locationInModule": {
            "filename": "src/base/npm.ts",
            "line": 88
          },
          "name": "removeScripts",
          "protected": true
        }
      ],
      "name": "NpmPackageBase",
      "properties": [
        {
          "docs": {
            "custom": {
              "protected": "true"
            },
            "stability": "stable",
            "summary": "File paths for the .gitattributes file entries. These entries are not added automatically by projen and we have not extra builder for these. So we handle them here."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/base/npm.ts",
            "line": 32
          },
          "name": "gitAttributesFilePaths",
          "protected": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "custom": {
              "protected": "true"
            },
            "stability": "stable",
            "summary": "File path to the NPM Package ignore configuration."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/base/npm.ts",
            "line": 22
          },
          "name": "ignoreFilePath",
          "protected": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "protected": "true"
            },
            "stability": "stable",
            "summary": "NPM file paths to be packaged for the NPM Package."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/base/npm.ts",
            "line": 40
          },
          "name": "npmFilePaths",
          "protected": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "custom": {
              "protected": "true"
            },
            "remarks": "These scripts are added by Projen on project initialization\nand are not needed for our projects.\nOverwrite this method if you want to keep the projen standard scripts.",
            "stability": "stable",
            "summary": "Getter retrieving the npm scripts to be removed from NPM Package."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/base/npm.ts",
            "line": 51
          },
          "name": "projenScripts",
          "protected": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        }
      ],
      "symbolId": "src/base/npm:NpmPackageBase"
    },
    "projen-template-projects.NpmPackageJsii": {
      "assembly": "projen-template-projects",
      "base": "projen-template-projects.NpmPackageBase",
      "docs": {
        "stability": "stable",
        "summary": "NPM Package builder implementing all relevant configuration for the Jsii project."
      },
      "fqn": "projen-template-projects.NpmPackageJsii",
      "initializer": {
        "docs": {
          "remarks": "It calls the `initialize()` method immediately after invoking `super(project)`\nto ensure that all necessary configuration steps are applied.",
          "stability": "stable",
          "summary": "Initializes the NPM Package builder."
        },
        "locationInModule": {
          "filename": "src/jsii/npm.ts",
          "line": 13
        },
        "parameters": [
          {
            "docs": {
              "summary": "The project to configure NPM Package for."
            },
            "name": "project",
            "type": {
              "fqn": "projen-template-projects.TypeScriptProjectBase"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/jsii/npm.ts",
        "line": 6
      },
      "name": "NpmPackageJsii",
      "symbolId": "src/jsii/npm:NpmPackageJsii"
    },
    "projen-template-projects.Prettier": {
      "assembly": "projen-template-projects",
      "base": "projen-template-projects.PrettierBase",
      "docs": {
        "stability": "stable",
        "summary": "Prettier builder implementing all relevant configuration for the project."
      },
      "fqn": "projen-template-projects.Prettier",
      "initializer": {
        "docs": {
          "remarks": "It calls the `initialize()` method immediately after invoking `super(project)`\nto ensure that all necessary configuration steps are applied.",
          "stability": "stable",
          "summary": "Initializes the Prettier builder."
        },
        "locationInModule": {
          "filename": "src/github-action/prettier.ts",
          "line": 13
        },
        "parameters": [
          {
            "docs": {
              "summary": "The project to configure Prettier for."
            },
            "name": "project",
            "type": {
              "fqn": "projen-template-projects.TypeScriptProjectBase"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/github-action/prettier.ts",
        "line": 6
      },
      "methods": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Hook to be called after synthesis."
          },
          "locationInModule": {
            "filename": "src/github-action/prettier.ts",
            "line": 18
          },
          "name": "postSynthesize",
          "overrides": "projen-template-projects.Builder"
        }
      ],
      "name": "Prettier",
      "symbolId": "src/github-action/prettier:Prettier"
    },
    "projen-template-projects.PrettierBase": {
      "abstract": true,
      "assembly": "projen-template-projects",
      "base": "projen-template-projects.Builder",
      "docs": {
        "custom": {
          "abstract": "true"
        },
        "stability": "stable",
        "summary": "Base class for Prettier builder implementing all relevant configuration."
      },
      "fqn": "projen-template-projects.PrettierBase",
      "initializer": {
        "docs": {
          "stability": "stable",
          "summary": "Initializes the base Prettier builder."
        },
        "locationInModule": {
          "filename": "src/base/prettier.ts",
          "line": 15
        },
        "parameters": [
          {
            "docs": {
              "summary": "The project to configure Prettier for."
            },
            "name": "project",
            "type": {
              "fqn": "projen-template-projects.TypeScriptProjectBase"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/base/prettier.ts",
        "line": 10
      },
      "methods": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Adds custom entries to the `.gitattributes` file for the builder in the project."
          },
          "locationInModule": {
            "filename": "src/base/prettier.ts",
            "line": 110
          },
          "name": "addGitAttributes",
          "overrides": "projen-template-projects.Builder",
          "protected": true
        },
        {
          "docs": {
            "custom": {
              "private": "true"
            },
            "stability": "stable",
            "summary": "Adds entries to the `.prettierignore` file."
          },
          "locationInModule": {
            "filename": "src/base/prettier.ts",
            "line": 137
          },
          "name": "addPrettierIgnoreEntries",
          "protected": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Adds npm scripts specific to the builder within the project."
          },
          "locationInModule": {
            "filename": "src/base/prettier.ts",
            "line": 104
          },
          "name": "addScripts",
          "overrides": "projen-template-projects.Builder",
          "protected": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Configures settings specific to the builder within the project."
          },
          "locationInModule": {
            "filename": "src/base/prettier.ts",
            "line": 100
          },
          "name": "addSettings",
          "overrides": "projen-template-projects.Builder",
          "protected": true
        },
        {
          "docs": {
            "remarks": "Tried scenarios:\n  - Accessing attributes directly from `.gitattributes` file (but `.gitattributes` is private and inaccessible).\n    This would be the most efficient and elegant solution as it allows us to add the entries using API.\n  - Retrieving all files from the project (misses some files like `tsconfig.json`).\n  - Letting each component add its paths individually (leaves out many standard files).\n  - Manually adding paths (prone to errors).\n  - Modifying `.prettierignore` after post-synthesis (but `.prettierignore` is readonly) and leads to test issues\n    as these changes are not reflected in `syntesize()`.\n\nWe will update it manually and cover it by tests cases checking if changes on the files are reflected here.",
            "stability": "stable",
            "summary": "Executes post-synthesis tasks, focusing on updating the `.prettierignore` file with paths from `.gitattributes`."
          },
          "locationInModule": {
            "filename": "src/base/prettier.ts",
            "line": 129
          },
          "name": "preSynthesize",
          "overrides": "projen-template-projects.Builder"
        }
      ],
      "name": "PrettierBase",
      "properties": [
        {
          "docs": {
            "custom": {
              "protected": "true"
            },
            "stability": "stable",
            "summary": "File path to the Prettier ignore configuration."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/base/prettier.ts",
            "line": 23
          },
          "name": "ignoreFilePath",
          "protected": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "protected": "true"
            },
            "stability": "stable",
            "summary": "File paths to the Prettier ignore entries."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/base/prettier.ts",
            "line": 39
          },
          "name": "ignoreFilePaths",
          "protected": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "custom": {
              "protected": "true"
            },
            "stability": "stable",
            "summary": "NPM scripts used by Prettier."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/base/prettier.ts",
            "line": 93
          },
          "name": "scripts",
          "protected": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "map"
            }
          }
        },
        {
          "docs": {
            "custom": {
              "protected": "true"
            },
            "stability": "stable",
            "summary": "Settings for the Prettier configuration."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/base/prettier.ts",
            "line": 76
          },
          "name": "settings",
          "protected": true,
          "type": {
            "fqn": "projen.javascript.PrettierOverride"
          }
        },
        {
          "docs": {
            "custom": {
              "protected": "true"
            },
            "stability": "stable",
            "summary": "File path to the Prettier settings configuration."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/base/prettier.ts",
            "line": 31
          },
          "name": "settingsFilePath",
          "protected": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "src/base/prettier:PrettierBase"
    },
    "projen-template-projects.PrettierJsii": {
      "assembly": "projen-template-projects",
      "base": "projen-template-projects.PrettierBase",
      "docs": {
        "stability": "stable",
        "summary": "Prettier builder implementing all relevant configuration for the Jsii project."
      },
      "fqn": "projen-template-projects.PrettierJsii",
      "initializer": {
        "docs": {
          "remarks": "It calls the `initialize()` method immediately after invoking `super(project)`\nto ensure that all necessary configuration steps are applied.",
          "stability": "stable",
          "summary": "Initializes the Prettier builder."
        },
        "locationInModule": {
          "filename": "src/jsii/prettier.ts",
          "line": 13
        },
        "parameters": [
          {
            "docs": {
              "summary": "The project to configure Prettier for."
            },
            "name": "project",
            "type": {
              "fqn": "projen-template-projects.TypeScriptProjectBase"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/jsii/prettier.ts",
        "line": 6
      },
      "methods": [
        {
          "docs": {
            "custom": {
              "override": "true",
              "protected": "true"
            },
            "stability": "stable",
            "summary": "Entries in `.gitattributes` are already done by `.projenrc.ts`."
          },
          "locationInModule": {
            "filename": "src/jsii/prettier.ts",
            "line": 32
          },
          "name": "addGitAttributes",
          "overrides": "projen-template-projects.PrettierBase",
          "protected": true
        }
      ],
      "name": "PrettierJsii",
      "properties": [
        {
          "docs": {
            "custom": {
              "protected": "true"
            },
            "stability": "stable",
            "summary": "File paths to the Prettier ignore entries."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jsii/prettier.ts",
            "line": 22
          },
          "name": "ignoreFilePaths",
          "overrides": "projen-template-projects.PrettierBase",
          "protected": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        }
      ],
      "symbolId": "src/jsii/prettier:PrettierJsii"
    },
    "projen-template-projects.SampleCode": {
      "assembly": "projen-template-projects",
      "base": "projen-template-projects.Builder",
      "docs": {
        "stability": "stable",
        "summary": "SampleCode builder implementing all relevant configuration for the project."
      },
      "fqn": "projen-template-projects.SampleCode",
      "initializer": {
        "docs": {
          "remarks": "It calls the `initialize()` method immediately after invoking `super(project)`\nto ensure that all necessary configuration steps are applied.",
          "stability": "stable",
          "summary": "Initializes the base SampleCode builder."
        },
        "locationInModule": {
          "filename": "src/github-action/samplecode.ts",
          "line": 14
        },
        "parameters": [
          {
            "docs": {
              "summary": "The project to configure SampleCode for."
            },
            "name": "project",
            "type": {
              "fqn": "projen-template-projects.TypeScriptProjectBase"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/github-action/samplecode.ts",
        "line": 7
      },
      "methods": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Adds template files to the builder's project directory."
          },
          "locationInModule": {
            "filename": "src/github-action/samplecode.ts",
            "line": 78
          },
          "name": "addTemplates",
          "overrides": "projen-template-projects.Builder",
          "protected": true
        }
      ],
      "name": "SampleCode",
      "properties": [
        {
          "docs": {
            "custom": {
              "protected": "true"
            },
            "stability": "stable",
            "summary": "File path to the sample GitHub action."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/github-action/samplecode.ts",
            "line": 23
          },
          "name": "filePath",
          "protected": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "protected": "true"
            },
            "stability": "stable",
            "summary": "GitHub action template for the SampleCode configuration."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/github-action/samplecode.ts",
            "line": 31
          },
          "name": "sampleAction",
          "protected": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        }
      ],
      "symbolId": "src/github-action/samplecode:SampleCode"
    },
    "projen-template-projects.TypeScriptProjectBase": {
      "abstract": true,
      "assembly": "projen-template-projects",
      "base": "projen.typescript.TypeScriptProject",
      "docs": {
        "custom": {
          "abstract": "true"
        },
        "stability": "stable",
        "summary": "Base class for managing project configuration."
      },
      "fqn": "projen-template-projects.TypeScriptProjectBase",
      "initializer": {
        "docs": {
          "stability": "stable",
          "summary": "Initializes the project."
        },
        "locationInModule": {
          "filename": "src/base/project.ts",
          "line": 21
        },
        "parameters": [
          {
            "docs": {
              "summary": "Additional project options."
            },
            "name": "options",
            "type": {
              "fqn": "projen-template-projects.TypeScriptProjectBaseOptions"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/base/project.ts",
        "line": 14
      },
      "methods": [
        {
          "docs": {
            "returns": "The builder if found, otherwise undefined.",
            "stability": "stable",
            "summary": "Finds a builder in the registry by its constructor name."
          },
          "locationInModule": {
            "filename": "src/base/project.ts",
            "line": 58
          },
          "name": "findBuilderByName",
          "parameters": [
            {
              "docs": {
                "summary": "The name of the builder to search for."
              },
              "name": "name",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "optional": true,
            "type": {
              "fqn": "projen-template-projects.Builder"
            }
          }
        },
        {
          "docs": {
            "custom": {
              "public": "true"
            },
            "remarks": "Order is *not* guaranteed.",
            "stability": "stable",
            "summary": "Called after all components are synthesized."
          },
          "locationInModule": {
            "filename": "src/base/project.ts",
            "line": 75
          },
          "name": "postSynthesize",
          "overrides": "projen.Project"
        },
        {
          "docs": {
            "custom": {
              "public": "true"
            },
            "stability": "stable",
            "summary": "Called before all components are synthesized."
          },
          "locationInModule": {
            "filename": "src/base/project.ts",
            "line": 65
          },
          "name": "preSynthesize",
          "overrides": "projen.Project"
        },
        {
          "docs": {
            "custom": {
              "public": "true"
            },
            "stability": "stable",
            "summary": "Register a builder to be managed by this project."
          },
          "locationInModule": {
            "filename": "src/base/project.ts",
            "line": 49
          },
          "name": "registerBuilder",
          "parameters": [
            {
              "docs": {
                "summary": "The builder to register (must extend BaseBuilder)."
              },
              "name": "builder",
              "type": {
                "fqn": "projen-template-projects.Builder"
              }
            }
          ]
        }
      ],
      "name": "TypeScriptProjectBase",
      "properties": [
        {
          "docs": {
            "stability": "stable"
          },
          "locationInModule": {
            "filename": "src/base/project.ts",
            "line": 15
          },
          "name": "builderRegistry",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "projen-template-projects.Builder"
              },
              "kind": "array"
            }
          }
        }
      ],
      "symbolId": "src/base/project:TypeScriptProjectBase"
    },
    "projen-template-projects.TypeScriptProjectBaseOptions": {
      "assembly": "projen-template-projects",
      "datatype": true,
      "docs": {
        "stability": "stable"
      },
      "fqn": "projen-template-projects.TypeScriptProjectBaseOptions",
      "interfaces": [
        "projen.typescript.TypeScriptProjectOptions"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "src/base/project.ts",
        "line": 8
      },
      "name": "TypeScriptProjectBaseOptions",
      "symbolId": "src/base/project:TypeScriptProjectBaseOptions"
    },
    "projen-template-projects.VSCode": {
      "assembly": "projen-template-projects",
      "base": "projen-template-projects.VSCodeBase",
      "docs": {
        "stability": "stable",
        "summary": "VSCode builder implementing all relevant configuration for the project."
      },
      "fqn": "projen-template-projects.VSCode",
      "initializer": {
        "docs": {
          "remarks": "It calls the `initialize()` method immediately after invoking `super(project)`\nto ensure that all necessary configuration steps are applied.",
          "stability": "stable",
          "summary": "Initializes the VSCode builder."
        },
        "locationInModule": {
          "filename": "src/github-action/vscode.ts",
          "line": 13
        },
        "parameters": [
          {
            "docs": {
              "summary": "The project to configure VSCode Package for."
            },
            "name": "project",
            "type": {
              "fqn": "projen-template-projects.TypeScriptProjectBase"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/github-action/vscode.ts",
        "line": 6
      },
      "name": "VSCode",
      "symbolId": "src/github-action/vscode:VSCode"
    },
    "projen-template-projects.VSCodeBase": {
      "abstract": true,
      "assembly": "projen-template-projects",
      "base": "projen-template-projects.Builder",
      "docs": {
        "custom": {
          "abstract": "true"
        },
        "stability": "stable",
        "summary": "Base class for VSCode builder implementing all relevant configuration."
      },
      "fqn": "projen-template-projects.VSCodeBase",
      "initializer": {
        "docs": {
          "stability": "stable",
          "summary": "Initializes the base VSCode builder."
        },
        "locationInModule": {
          "filename": "src/base/vscode.ts",
          "line": 13
        },
        "parameters": [
          {
            "docs": {
              "summary": "The project to configure VSCode builder for."
            },
            "name": "project",
            "type": {
              "fqn": "projen-template-projects.TypeScriptProjectBase"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/base/vscode.ts",
        "line": 8
      },
      "methods": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Adds custom entries to the `.gitattributes` file for the builder in the project."
          },
          "locationInModule": {
            "filename": "src/base/vscode.ts",
            "line": 52
          },
          "name": "addGitAttributes",
          "overrides": "projen-template-projects.Builder",
          "protected": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Configures settings specific to the builder within the project."
          },
          "locationInModule": {
            "filename": "src/base/vscode.ts",
            "line": 48
          },
          "name": "addSettings",
          "overrides": "projen-template-projects.Builder",
          "protected": true
        }
      ],
      "name": "VSCodeBase",
      "properties": [
        {
          "docs": {
            "custom": {
              "protected": "true"
            },
            "stability": "stable",
            "summary": "Settings to be installed in VSCode."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/base/vscode.ts",
            "line": 29
          },
          "name": "settings",
          "protected": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "map"
            }
          }
        },
        {
          "docs": {
            "custom": {
              "protected": "true"
            },
            "stability": "stable",
            "summary": "File path to the VSCode settings configuration."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/base/vscode.ts",
            "line": 21
          },
          "name": "settingsFilePath",
          "protected": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "src/base/vscode:VSCodeBase"
    },
    "projen-template-projects.VSCodeJsii": {
      "assembly": "projen-template-projects",
      "base": "projen-template-projects.VSCodeBase",
      "docs": {
        "stability": "stable",
        "summary": "VSCode builder implementing all relevant configuration for the Jsii project."
      },
      "fqn": "projen-template-projects.VSCodeJsii",
      "initializer": {
        "docs": {
          "remarks": "It calls the `initialize()` method immediately after invoking `super(project)`\nto ensure that all necessary configuration steps are applied.",
          "stability": "stable",
          "summary": "Initializes the VSCode builder."
        },
        "locationInModule": {
          "filename": "src/jsii/vscode.ts",
          "line": 13
        },
        "parameters": [
          {
            "docs": {
              "summary": "The project to configure VSCode Package for."
            },
            "name": "project",
            "type": {
              "fqn": "projen-template-projects.TypeScriptProjectBase"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/jsii/vscode.ts",
        "line": 6
      },
      "name": "VSCodeJsii",
      "symbolId": "src/jsii/vscode:VSCodeJsii"
    }
  },
  "version": "0.0.0",
  "fingerprint": "th/HWr6/HDJg0WMHLdxCmESTaTr4Ts2o5G0uENipXpY="
}