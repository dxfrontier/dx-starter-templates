import * as commitlint from '../shared/commitlint';
import * as devcontainer from '../shared/devcontainer';
import * as git from '../shared/git';
import * as github from '../shared/github';
import * as husky from '../shared/husky';
import * as npm from '../shared/npm';
import * as prettier from '../shared/prettier';
import * as vscode from '../shared/vscode';

import { constants } from '../../src/util/constants';

import { snapshot } from './util/setup';

describe('github-action', () => {
  /**
   * Start Commit lint
   */
  describe('commit lint', () => {
    test('Commitlintrc template matches expected template', (): void => {
      commitlint.testRcTemplate(snapshot);
    });
  });
  /**
   * End Commit lint
   */

  /**
   * Start Devcontainer
   */
  describe('.devcontainer', () => {
    test('Container image is set properly', (): void => {
      devcontainer.testImage(snapshot);
    });

    test('Container features are set properly', (): void => {
      devcontainer.testFeatures(snapshot);
    });

    test('Container VsCode extensions are set properly', (): void => {
      devcontainer.testExtensions(snapshot);
    });

    test('Container postCreateCommand is set properly', (): void => {
      devcontainer.testCommand(snapshot);
    });
  });
  /**
   * End Devcontainer
   */

  /**
   * Start Git
   */
  describe('git', () => {
    test('Ignore patterns matches expected content', (): void => {
      const expectedEntries: string[] = [
        '',
        '!/.commitlintrc.ts',
        '!/.devcontainer.json',
        '!/.gitattributes',
        '!/.github/ISSUE_TEMPLATE/bug.yml',
        '!/.github/ISSUE_TEMPLATE/feature.yml',
        '!/.github/ISSUE_TEMPLATE/housekeeping.yml',
        '!/.github/ISSUE_TEMPLATE/question.yml',
        '!/.github/pull_request_template.md',
        '!/.github/workflows/enforce-labels.yml',
        '!/.github/workflows/release.yml',
        '!/.husky/commit-msg',
        '!/.husky/pre-commit',
        '!/.prettierignore',
        '!/.prettierrc.json',
        '!/.projen/deps.json',
        '!/.projen/files.json',
        '!/.projen/tasks.json',
        '!/.projenrc.js',
        '!/.vscode/settings.json',
        '!/cliff.toml',
        '!/package.json',
        '!/src/',
        '!/test/',
        '!/tsconfig.json',
        '# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".',
        '*.lcov',
        '*.log',
        '*.pid',
        '*.pid.lock',
        '*.seed',
        '*.tgz',
        '*.tsbuildinfo',
        '.cache',
        '.eslintcache',
        '.nyc_output',
        '.yarn-integrity',
        '/dist/',
        '/lib',
        'build/Release',
        'coverage',
        'jspm_packages/',
        'lerna-debug.log*',
        'lib-cov',
        'logs',
        'node_modules/',
        'npm-debug.log*',
        'pids',
        'report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json',
        'yarn-debug.log*',
        'yarn-error.log*',
      ];
      git.testIgnore(snapshot, expectedEntries);
    });
  });
  /**
   * End Git
   */

  /**
   * Start Github
   */
  describe('github', () => {});
  /**
   * End GitHub
   */

  /**
   * Start Github templates
   */
  describe('Github templates', () => {
    test('Projen standard workflows are removed', (): void => {
      github.testProjenWorkflows(snapshot, 2);
    });

    test('Release workflow template matches expected template', (): void => {
      github.testReleaseWorkflow(snapshot);
    });

    test('Cliff toml template matches expected template', (): void => {
      github.testCliffToml(snapshot);
    });

    test('Enforce labels template matches expected template', (): void => {
      github.testEnforceLabelsWorkflow(snapshot);
    });

    test('GitHub related files are added to .gitattributes and defined as linguist-generated', (): void => {
      const expectedTemplateLines: string[] = [
        '# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".',
        '',
        '* text=auto eol=lf',
        '/.commitlintrc.ts linguist-generated',
        '/.devcontainer.json linguist-generated',
        '/.gitattributes linguist-generated',
        '/.github/ISSUE_TEMPLATE/bug.yml linguist-generated',
        '/.github/ISSUE_TEMPLATE/feature.yml linguist-generated',
        '/.github/ISSUE_TEMPLATE/housekeeping.yml linguist-generated',
        '/.github/ISSUE_TEMPLATE/question.yml linguist-generated',
        '/.github/pull_request_template.md linguist-generated',
        '/.github/workflows/enforce-labels.yml linguist-generated',
        '/.github/workflows/release.yml linguist-generated',
        '/.gitignore linguist-generated',
        '/.husky/commit-msg linguist-generated',
        '/.husky/pre-commit linguist-generated',
        '/.prettierignore linguist-generated',
        '/.prettierrc.json linguist-generated',
        '/.projen/** linguist-generated',
        '/.projen/deps.json linguist-generated',
        '/.projen/files.json linguist-generated',
        '/.projen/tasks.json linguist-generated',
        '/.vscode/settings.json linguist-generated',
        '/CHANGELOG.md linguist-generated',
        '/cliff.toml linguist-generated',
        '/package-lock.json linguist-generated',
        '/package.json linguist-generated',
        '/tsconfig.json linguist-generated',
      ];
      github.testGitAttributes(snapshot, expectedTemplateLines);
    });
  });
  /**
   * End Github templates
   */
  /**
   * Start Github workflows
   */
  describe('Github workflows', () => {
    test('Projen standard workflows are removed', (): void => {
      github.testProjenWorkflows(snapshot, 2);
    });

    test('Release workflow template matches expected template', (): void => {
      github.testReleaseWorkflow(snapshot);
    });

    test('Cliff toml template matches expected template', (): void => {
      github.testCliffToml(snapshot);
    });

    test('Enforce labels template matches expected template', (): void => {
      github.testEnforceLabelsWorkflow(snapshot);
    });
  });
  /**
   * End Github workflows
   */

  /**
   * Start husky
   */
  describe('husky', () => {
    test('Commit-msg hook matches expected template', (): void => {
      husky.testCommitMsgHook(snapshot);
    });

    test('Pre-commit hook matches expected template', (): void => {
      husky.testPreCommitHook(snapshot);
    });
  });
  /**
   * End husky
   */

  /**
   * Start npm
   */
  describe('npm', () => {
    test('General info in package.json is set properly', (): void => {
      const expectedInfo: Record<string, unknown> = {
        name: 'my-github-action',
        version: '0.0.0',
        license: 'UNLICENSED',
        main: 'lib/index.js',
        types: 'lib/index.d.ts',
      };
      npm.testPackageJsonGeneral(snapshot, expectedInfo);
    });

    test('Files property in package.json is set properly', (): void => {
      const additionalPatterns: string[] = ['action.yml'];
      npm.testPackageJsonFiles(snapshot, additionalPatterns);
    });

    test('DevDependencies are added properly', (): void => {
      const expectedDevDependencies: Record<string, string> = {
        [constants['@commitlint/cli'].NAME]: constants['@commitlint/cli'].VERSION,
        [constants['@commitlint/config-conventional'].NAME]: constants['@commitlint/config-conventional'].VERSION,
        [constants['@commitlint/prompt-cli'].NAME]: constants['@commitlint/prompt-cli'].VERSION,
        [constants['@commitlint/types'].NAME]: constants['@commitlint/types'].VERSION,
        '@types/node': '*',
        constructs: '^10.0.0', // ????
        [constants['husky'].NAME]: constants['husky'].VERSION,
        [constants['lint-staged'].NAME]: constants['lint-staged'].VERSION,
        [constants['prettier'].NAME]: constants['prettier'].VERSION,
        projen: '*',
      };
      npm.testDevDependencies(snapshot, expectedDevDependencies);
    });

    test('Scripts are added properly', (): void => {
      const expectedTasks: Record<string, unknown> = {
        commit: 'commit',
        prepare: 'husky || true',
        prettier: 'prettier . --write',
      };
      npm.testScripts(snapshot, expectedTasks);
    });

    test('Other configuration modules specific settings in package.json are set properly', (): void => {
      const expectedSettings: Record<string, unknown> = {
        'lint-staged': {
          '**/*.{yml,yaml}': ['npm run prettier'],
        },
      };
      npm.testPackageJsonSettings(snapshot, expectedSettings);
    });

    test('Projen standard npm scripts are removed from package.json', (): void => {
      const keys: string[] = Object.keys(snapshot['package.json']!.scripts);
      const scriptsToRemove: string[] = [
        'bump',
        'clobber',
        'compile',
        'default',
        'eject',
        'eslint',
        'package',
        'post-compile',
        'post-upgrade',
        'pre-compile',
        'release',
        'test',
        'test:watch',
        'unbump',
        'upgrade',
        'watch',
        'projen',
      ];
      const keyFound: boolean = keys.some((key: string): boolean => scriptsToRemove.includes(key));
      expect(keyFound).toBe(false);
    });
  });
  /**
   * End npm
   */

  /**
   * Start prettier
   */
  describe('prettier', () => {
    test('Prettier settings are set properly', (): void => {
      const expectedSettings = {
        '//': '~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".',
        overrides: [
          {
            files: '*.*',
            options: {
              semi: true,
              trailingComma: 'all',
              singleQuote: true,
              printWidth: 120,
              tabWidth: 2,
            },
          },
        ],
      };
      prettier.testSettings(snapshot, expectedSettings);
    });

    test('Ignore patterns matches expected content', (): void => {
      const expectedEntries: string[] = [
        '/.commitlintrc.ts',
        '/.devcontainer.json',
        '/.gitattributes',
        '/.github/ISSUE_TEMPLATE/bug.yml',
        '/.github/ISSUE_TEMPLATE/feature.yml',
        '/.github/ISSUE_TEMPLATE/housekeeping.yml',
        '/.github/ISSUE_TEMPLATE/question.yml',
        '/.github/pull_request_template.md',
        '/.github/workflows/enforce-labels.yml',
        '/.github/workflows/release.yml',
        '/.gitignore',
        '/.husky/commit-msg',
        '/.husky/pre-commit',
        '/.prettierignore',
        '/.prettierrc.json',
        '/.vscode/settings.json',
        '/API.md',
        '/CHANGELOG.md',
        '/cliff.toml',
        '/package-lock.json',
        '/package.json',
      ];
      prettier.testIgnore(snapshot, expectedEntries);
    });
  });
  /**
   * End prettier
   */

  /**
   * Start typescript
   */
  describe('typescript', () => {
    test('TypeScript file is removed properly', (): void => {
      expect(snapshot['tsconfig.json']).toBeUndefined();
    });
  });
  /**
   * End typescript
   */

  /**
   * Start vscode
   */
  describe('vscode', () => {
    test('VsCode settings are set properly', (): void => {
      const expectedSettings: Record<string, string | boolean | number> = {
        '//': '~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".',
        'editor.tabSize': 2,
        'editor.stickyTabStops': true,
        'typescript.inlayHints.parameterNames.enabled': 'all',
        'typescript.inlayHints.enumMemberValues.enabled': true,
        'typescript.inlayHints.variableTypes.enabled': true,
        'typescript.inlayHints.propertyDeclarationTypes.enabled': true,
        'javascript.inlayHints.parameterNames.suppressWhenArgumentMatchesName': false,
        'javascript.inlayHints.variableTypes.suppressWhenTypeMatchesName': false,
        'typescript.inlayHints.functionLikeReturnTypes.enabled': true,
        'typescript.inlayHints.parameterTypes.enabled': true,
        'editor.inlayHints.fontSize': 10,
        'editor.inlayHints.padding': true,
        'editor.formatOnSave': true,
        'editor.formatOnPaste': true,
      };
      vscode.testSettings(snapshot, expectedSettings);
    });
  });
  /**
   * End vscode
   */
});
