import * as commitlint from '../shared/commitlint';
import * as devcontainer from '../shared/devcontainer';
import * as eslint from '../shared/eslint';
import * as git from '../shared/git';
import * as github from '../shared/github';
import * as husky from '../shared/husky';
import * as js from '../shared/jest';
import * as npm from '../shared/npm';
import * as prettier from '../shared/prettier';
import * as typescript from '../shared/typescript';
import * as vscode from '../shared/vscode';

import { constants } from '../../src/util/constants';

import { snapshot } from './util/setup';

describe('jsii', (): void => {
  /**
   * Start Commit lint
   */
  describe('commit lint', (): void => {
    test('Commitlintrc template matches expected template', (): void => {
      commitlint.testRcTemplate(snapshot);
    });
  });
  /**
   * End Commit lint
   */

  /**
   * Start Devcontainer
   */
  describe('.devcontainer', (): void => {
    test('Container image is set properly', (): void => {
      devcontainer.testImage(snapshot);
    });

    test('Container features are set properly', (): void => {
      devcontainer.testFeatures(snapshot);
    });

    test('Container VsCode extensions are set properly', (): void => {
      devcontainer.testExtensions(snapshot);
    });

    test('Container postCreateCommand is set properly', (): void => {
      devcontainer.testCommand(snapshot);
    });
  });
  /**
   * End Devcontainer
   */

  /**
   * Start Eslint
   */
  describe('eslint', (): void => {
    test('Config file matches expected template', (): void => {
      const additionalRules: Record<string, string> = {
        '@typescript-eslint/no-empty-function': 'off',
        '@typescript-eslint/class-literal-property-style': 'off',
        '@typescript-eslint/no-empty-object-type': 'off',
      };
      const additionalIgnores: string[] = ['docs/', 'test/', 'lib/', '.jsii'];
      eslint.testConfigFile(snapshot, additionalRules, additionalIgnores);
    });
  });
  /**
   * End Eslint
   * */

  /**
   * Start Git
   */
  describe('git', (): void => {
    test('Ignore patterns matches expected content', (): void => {
      const expectedEntries: string[] = [
        '',
        '!/.commitlintrc.ts',
        '!/.devcontainer.json',
        '!/.gitattributes',
        '!/.github/ISSUE_TEMPLATE/bug.yml',
        '!/.github/ISSUE_TEMPLATE/feature.yml',
        '!/.github/ISSUE_TEMPLATE/housekeeping.yml',
        '!/.github/ISSUE_TEMPLATE/question.yml',
        '!/.github/pull_request_template.md',
        '!/.github/workflows/enforce-labels.yml',
        '!/.github/workflows/release.yml',
        '!/.husky/commit-msg',
        '!/.husky/pre-commit',
        '!/.husky/pre-push',
        '!/.prettierignore',
        '!/.prettierrc.json',
        '!/.projen/deps.json',
        '!/.projen/files.json',
        '!/.projen/tasks.json',
        '!/.projenrc.ts',
        '!/.vscode/settings.json',
        '!/API.md',
        '!/cliff.toml',
        '!/eslint.config.mjs',
        '!/package.json',
        '!/src/',
        '!/test/',
        '!/tsconfig.dev.json',
        '# ~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".',
        '*.lcov',
        '*.log',
        '*.pid',
        '*.pid.lock',
        '*.seed',
        '*.tgz',
        '*.tsbuildinfo',
        '.cache',
        '.eslintcache',
        '.jsii',
        '.nyc_output',
        '.yarn-integrity',
        '/coverage/',
        '/dist/',
        '/lib',
        '/test-reports/',
        'build/Release',
        'coverage',
        'jspm_packages/',
        'junit.xml',
        'lerna-debug.log*',
        'lib-cov',
        'logs',
        'node_modules/',
        'npm-debug.log*',
        'pids',
        'report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json',
        'tsconfig.json',
        'yarn-debug.log*',
        'yarn-error.log*',
      ];
      git.testIgnore(snapshot, expectedEntries);
    });
  });
  /**
   * End Git
   */

  /**
   * Start Github
   */
  describe('github', (): void => {
    /**
     * Start Github attributes
     */
    describe('Attributes', (): void => {
      test('GitHub related files are added to .gitattributes and defined as linguist-generated', (): void => {
        github.testGitAttributes(snapshot);
      });
    });
    /**
     * End Github attributes
     */

    /**
     * Start Github templates
     */
    describe('Templates', (): void => {
      test('PR template matches expected template', (): void => {
        github.testPrTemplate(snapshot);
      });

      test('Bug issue template matches expected template', (): void => {
        github.testBugTemplate(snapshot);
      });

      test('Feature issue template matches expected template', (): void => {
        github.testFeatureTemplate(snapshot);
      });

      test('Housekeeping issue template matches expected template', (): void => {
        github.testBugTemplate(snapshot);
      });

      test('Question issue template matches expected template', (): void => {
        github.testQuestionTemplate(snapshot);
      });
    });
    /**
     * End Github templates
     */

    /**
     * Start Github workflows
     */
    describe('Workflows', (): void => {
      test('Projen standard workflows are removed', (): void => {
        github.testProjenWorkflows(snapshot, 2);
      });

      test('Release workflow template matches expected template', (): void => {
        github.testReleaseWorkflow(snapshot);
      });

      test('Cliff toml template matches expected template', (): void => {
        github.testCliffToml(snapshot);
      });
    });
    /**
     * End Github workflows
     */
  });
  /**
   * End Github
   */

  /**
   * Start husky
   */
  describe('husky', (): void => {
    test('Commit-msg hook matches expected template', (): void => {
      husky.testCommitMsgHook(snapshot);
    });

    test('Pre-commit hook matches expected template', (): void => {
      husky.testPreCommitHook(snapshot);
    });

    test('Pre-push hook matches expected template', (): void => {
      const expectedTemplateLines: string[] = [
        'npx projen build',
        '# This will restore staged the modified files by running `npx projen`',
        'git checkout -- cliff.toml package.json package-lock.json',
      ];
      husky.testPrePushHook(snapshot, expectedTemplateLines);
    });
  });
  /**
   * End husky
   */

  /**
   * Start jest
   */
  describe('jest', (): void => {
    test('Jest settings are set properly', (): void => {
      const expectedSettings: Record<string, unknown> = {
        // "jest": {
        coverageProvider: 'v8',
        testMatch: [
          '<rootDir>/@(src|test)/**/*(*.)@(spec|test).ts?(x)',
          '<rootDir>/@(src|test)/**/__tests__/**/*.ts?(x)',
          '<rootDir>/@(projenrc)/**/*(*.)@(spec|test).ts?(x)',
          '<rootDir>/@(projenrc)/**/__tests__/**/*.ts?(x)',
        ],
        clearMocks: true,
        collectCoverage: true,
        coverageReporters: ['json', 'lcov', 'clover', 'cobertura', 'text'],
        coverageDirectory: 'coverage',
        coveragePathIgnorePatterns: ['/node_modules/'],
        testPathIgnorePatterns: ['/node_modules/'],
        watchPathIgnorePatterns: ['/node_modules/'],
        reporters: [
          'default',
          [
            'jest-junit',
            {
              outputDirectory: 'test-reports',
            },
          ],
        ],
        transform: {
          '^.+\\.[t]sx?$': [
            'ts-jest',
            {
              tsconfig: 'tsconfig.dev.json',
            },
          ],
        },
        // }
      };
      js.testSettings(snapshot, expectedSettings);
    });
  });
  /**
   * End jest
   */

  /**
   * Start npm
   */
  describe('npm', (): void => {
    test('General info in package.json is set properly', (): void => {
      const expectedInfo: Record<string, unknown> = {
        name: '@dxfrontier/projen-template-projects',
        version: '0.0.0',
        repository: {
          type: 'git',
          url: 'https://github.com/dxfrontier/projen-template-projects.git',
        },
        author: {
          name: 'DXFrontier Dev Team',
          email: 'mathias.von-kaiz@abs-gmbh.de',
          organization: false,
        },
        license: 'UNLICENSED',
        main: 'lib/index.js',
        types: 'lib/index.d.ts',
      };
      npm.testPackageJsonGeneral(snapshot, expectedInfo);
    });

    test('Files property in package.json is set properly', (): void => {
      const additionalPatterns: string[] = ['lib', '.jsii'];
      npm.testPackageJsonFiles(snapshot, additionalPatterns);
    });

    test('DevDependencies are added properly', (): void => {
      const expectedDevDependencies: Record<string, string> = {
        [constants['@commitlint/cli'].NAME]: constants['@commitlint/cli'].VERSION,
        [constants['@commitlint/config-conventional'].NAME]: constants['@commitlint/config-conventional'].VERSION,
        [constants['@commitlint/prompt-cli'].NAME]: constants['@commitlint/prompt-cli'].VERSION,
        [constants['@commitlint/types'].NAME]: constants['@commitlint/types'].VERSION,
        [constants['@types/jest'].NAME]: '*',
        [constants['@types/node'].NAME]: constants['@types/node'].VERSION,
        [constants['constructs'].NAME]: '10.4.2', // ! This is injected by the jsii config module
        [constants['eslint'].NAME]: constants['eslint'].VERSION,
        [constants['husky'].NAME]: constants['husky'].VERSION,
        [constants['jest'].NAME]: '*', // ! This is injected by the jsii config module
        [constants['jest-junit'].NAME]: '^16', // ! This is injected by the jsii config module
        [constants['jsii'].NAME]: constants['jsii'].VERSION,
        [constants['jsii-diff'].NAME]: constants['jsii-diff'].VERSION,
        [constants['jsii-docgen'].NAME]: constants['jsii-docgen'].VERSION,
        [constants['jsii-pacmak'].NAME]: constants['jsii-pacmak'].VERSION,
        [constants['jsii-rosetta'].NAME]: constants['jsii-rosetta'].VERSION,
        [constants['lint-staged'].NAME]: constants['lint-staged'].VERSION,
        [constants['prettier'].NAME]: constants['prettier'].VERSION,
        [constants['projen'].NAME]: '0.91.6', // ! This is injected by the jsii config module
        [constants['ts-jest'].NAME]: '*', // ! This is injected by the jsii config module
        [constants[`ts-node`].NAME]: constants[`ts-node`].VERSION,
        [constants['typescript'].NAME]: constants['typescript'].VERSION,
        [constants['typescript-eslint'].NAME]: constants['typescript-eslint'].VERSION,
      };
      npm.testDevDependencies(snapshot, expectedDevDependencies);
    });

    test('PeerDependencies are added properly', (): void => {
      const expectedPeerDependencies: Record<string, string> = {
        [constants['constructs'].NAME]: constants['constructs'].VERSION,
        [constants['projen'].NAME]: constants['projen'].VERSION,
      };
      npm.testPeerDependencies(snapshot, expectedPeerDependencies);
    });

    test('Scripts are added properly', (): void => {
      const expectedTasks: Record<string, unknown> = {
        build: 'npx projen build',
        clobber: 'npx projen clobber',
        commit: 'commit',
        compat: 'npx projen compat',
        compile: 'npx projen compile',
        default: 'npx projen default',
        docgen: 'npx projen docgen',
        eject: 'npx projen eject',
        eslint: 'eslint .',
        package: 'npx projen package',
        'package-all': 'npx projen package-all',
        'package:js': 'npx projen package:js',
        'post-compile': 'npx projen post-compile',
        'pre-compile': 'npx projen pre-compile',
        prepare: 'husky || true',
        prettier: 'prettier . --write',
        test: 'npx projen test',
        'test:watch': 'npx projen test:watch',
        watch: 'npx projen watch',
        projen: 'npx projen',
      };
      npm.testScripts(snapshot, expectedTasks);
    });

    test('Other configuration modules specific settings in package.json are set properly', (): void => {
      const expectedSettings: Record<string, unknown> = {
        'lint-staged': {
          '**/*.ts': ['npm run eslint', 'npm run prettier'],
        },
        jsii: {
          outdir: 'dist',
          targets: {},
          tsc: {
            outDir: 'lib',
            rootDir: 'src',
          },
        },
      };
      npm.testPackageJsonSettings(snapshot, expectedSettings);
    });
  });
  /**
   * End npm
   */

  /**
   * Start prettier
   */
  describe('prettier', (): void => {
    test('Prettier settings are set properly', (): void => {
      prettier.testSettings(snapshot);
    });

    test('Ignore patterns matches expected content', (): void => {
      const expectedEntries: string[] = [
        '*.snap',
        '/.commitlintrc.ts',
        '/.devcontainer.json',
        '/.gitattributes',
        '/.github/ISSUE_TEMPLATE/bug.yml',
        '/.github/ISSUE_TEMPLATE/feature.yml',
        '/.github/ISSUE_TEMPLATE/housekeeping.yml',
        '/.github/ISSUE_TEMPLATE/question.yml',
        '/.github/pull_request_template.md',
        '/.github/workflows/enforce-labels.yml',
        '/.github/workflows/release.yml',
        '/.gitignore',
        '/.husky/commit-msg',
        '/.husky/pre-commit',
        '/.husky/pre-push',
        '/.prettierignore',
        '/.prettierrc.json',
        '/.projen/**',
        '/.projen/deps.json',
        '/.projen/files.json',
        '/.projen/tasks.json',
        '/.vscode/settings.json',
        '/CHANGELOG.md',
        '/cliff.toml',
        '/eslint.config.mjs',
        '/package-lock.json',
        '/package.json',
        '/tsconfig.dev.json',
        '/API.md',
      ];
      prettier.testIgnore(snapshot, expectedEntries);
    });
  });
  /**
   * End prettier
   */

  /**
   * Start typescript
   */
  describe('typescript', (): void => {
    test('TypeScript settings are set properly', (): void => {
      const expectedSettings: Record<string, unknown> = {
        compilerOptions: {
          alwaysStrict: true,
          declaration: true,
          esModuleInterop: true,
          experimentalDecorators: true,
          inlineSourceMap: true,
          inlineSources: true,
          lib: ['es2019'],
          module: 'CommonJS',
          noEmitOnError: false,
          noFallthroughCasesInSwitch: true,
          noImplicitAny: true,
          noImplicitReturns: true,
          noImplicitThis: true,
          noUnusedLocals: true,
          noUnusedParameters: true,
          resolveJsonModule: true,
          strict: true,
          strictNullChecks: true,
          strictPropertyInitialization: true,
          stripInternal: true,
          target: 'ES2019',
          allowImportingTsExtensions: true,
        },
        include: ['src/**/*.ts', 'test/**/*.ts', '.projenrc.ts', 'projenrc/**/*.ts'],
        exclude: ['node_modules'],
      };
      typescript.testSettings(snapshot, expectedSettings, 'tsconfig.dev.json');
    });
  });
  /**
   * End typescript
   */

  /**
   * Start vscode
   */
  describe('vscode', (): void => {
    test('VsCode settings are set properly', (): void => {
      vscode.testSettings(snapshot);
    });
  });
  /**
   * End vscode
   */
});
