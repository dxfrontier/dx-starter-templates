"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.JsiiProject = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const projen_1 = require("projen");
const commitlint_1 = require("../base/config/commitlint");
const devcontainer_1 = require("../base/config/devcontainer");
const eslint_1 = require("../base/config/eslint");
const github_1 = require("../base/config/github");
const git_1 = require("../base/config/git");
const jest_1 = require("../base/config/jest");
const options_1 = require("../base/config/options");
const prettier_1 = require("../base/config/prettier");
const vscode_1 = require("../base/config/vscode");
const npm_1 = require("./config/npm");
const typescript_1 = require("./config/typescript");
const utils_1 = require("../util/utils");
const husky_1 = require("./config/husky");
const issues_1 = require("../base/config/issues");
/**
 * Base class for managing project Jsii configuration.
 */
class JsiiProject extends projen_1.cdk.JsiiProject {
    /**
     * Initializes the project.
     * @param options Additional project options.
     */
    constructor(options) {
        super({
            ...options_1.BaseOptions.sharedOptions(options),
            // tsconfig.dev.json needs to be enabled for Jsii Projects
            projenrcTs: true,
            disableTsconfigDev: options.disableTsconfigDev ?? false,
            disableTsconfig: options.disableTsconfig ?? true,
            tsconfig: {
                compilerOptions: {
                    allowImportingTsExtensions: true,
                },
            },
            jestOptions: {
                extraCliOptions: ['--verbose'],
            },
        });
        this.typescript = true;
        this.kind = 'base';
        this.gitConfig = new git_1.GitConfigBase(this);
        this.typescriptConfig = new typescript_1.TypeScriptConfigJsii(this);
        this.npmConfig = new npm_1.NpmConfigJsii(this);
        this.issuesConfig = new issues_1.IssuesConfigBase(this);
        if (options.prettierEnabled) {
            this.prettierConfig = new prettier_1.PrettierConfigBase(this);
        }
        if (options.devContainerEnabled) {
            this.devContainerConfig = new devcontainer_1.DevContainerConfigBase(this);
        }
        if (options.eslintEnabled) {
            this.eslintConfig = new eslint_1.EsLintConfigBase(this);
        }
        if (options.jestEnabled) {
            this.jestConfig = new jest_1.JestConfigBase(this);
        }
        if (options.vscodeEnabled) {
            this.vscodeConfig = new vscode_1.VsCodeConfigBase(this);
        }
        if (options.githubEnabled) {
            this.githubConfig = new github_1.GitHubConfigBase(this);
        }
        if (options.commitlintEnabled) {
            this.commitlintConfig = new commitlint_1.CommitLintConfigBase(this);
        }
        if (options.huskyEnabled) {
            this.huskyConfig = new husky_1.HuskyConfigJsii(this);
        }
    }
    preSynthesize() {
        utils_1.util.registerConfig(this.components);
        super.preSynthesize();
    }
    postSynthesize() {
        super.postSynthesize();
    }
}
exports.JsiiProject = JsiiProject;
_a = JSII_RTTI_SYMBOL_1;
JsiiProject[_a] = { fqn: "@dxfrontier/projen-template-projects.JsiiProject", version: "0.0.0" };
//# sourceMappingURL=data:application/json;base64,