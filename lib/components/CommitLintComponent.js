"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CommitLintComponent = void 0;
const projen_1 = require("projen");
/**
 * Configures the CommitLint templates, settings and npm scripts for the project.
 */
class CommitLintComponent {
    /**
     * Initializes the CommitLint component.
     * @param project The project to configure CommitLint for.
     */
    constructor(project) {
        this.project = project;
    }
    /**
     * Getter retrieving the file path for the CommitLint configuration.
     */
    get filePath() {
        return '.commitlintrc.ts';
    }
    /**
     * Getter retrieving the template file for the CommitLint configuration.
     */
    get template() {
        return [
            '// Generated by projen.To modify, edit.projenrc.ts and run "npx projen".',
            '',
            // eslint-disable-next-line prettier/prettier
            'import type { UserConfig } from \'@commitlint/types\';',
            // eslint-disable-next-line prettier/prettier
            'import { RuleConfigSeverity } from \'@commitlint/types\';',
            '',
            'const Configuration: UserConfig = {',
            // eslint-disable-next-line prettier/prettier
            '  extends: [\'@commitlint/config-conventional\'],',
            '  rules: {',
            // eslint-disable-next-line prettier/prettier
            '    \'type-enum\': [',
            '      RuleConfigSeverity.Error,',
            // eslint-disable-next-line prettier/prettier
            '      \'always\',',
            // eslint-disable-next-line prettier/prettier
            '      [\'build\', \'chore\', \'ci\', \'docs\', \'feat\', \'fix\', \'perf\', \'refactor\', \'revert\', \'style\', \'test\', \'delete\'],',
            '    ],',
            // eslint-disable-next-line prettier/prettier
            '    \'scope-empty\': [RuleConfigSeverity.Error, \'never\'],',
            // eslint-disable-next-line prettier/prettier
            '    \'subject-empty\': [RuleConfigSeverity.Error, \'never\'],',
            '  },',
            // eslint-disable-next-line prettier/prettier
            '  helpUrl: \'https://github.com/conventional-changelog/commitlint/#what-is-commitlint\',',
            '};',
            '',
            'export default Configuration;',
        ];
    }
    /**
     * Getter retrieving the npm scripts for the CommitLint component.
     */
    get scripts() {
        return {
            commit: 'commit',
        };
    }
    /**
     * Getter retrieving the relevant npm packages to be installed as devDependencies for the CommitLint component.
     */
    get devDependencies() {
        return [
            '@commitlint/cli',
            '@commitlint/config-conventional',
            '@commitlint/prompt-cli',
            '@commitlint/types',
            'lint-staged',
        ];
    }
    /**
     * Getter retrieving the settings to be added to package.json for the CommitLint component.
     */
    get npmSettings() {
        return {
            '**/*.{yml,yaml}': ['npm run format:message', 'npm run format:fix'],
        };
    }
    /**
     * Creates the template file for the CommitLint configuration.
     */
    createConfiguration() {
        new projen_1.TextFile(this.project, this.filePath, {
            lines: this.template,
        });
    }
    /**
     * Creates npm package settings specific to CommitLint setup within the project configuration.
     */
    createSettings() {
        this.project.addFields({
            'lint-staged': this.npmSettings,
        });
    }
    /**
     * Adds template files and settings to the CommitLint component.
     */
    add() {
        this.createConfiguration();
        this.createSettings();
    }
    /**
     * Adds npm scripts specific to CommitLint setup within the project configuration.
     */
    addScripts() {
        for (const [name, command] of Object.entries(this.scripts)) {
            this.project.addTask(name, { exec: command });
        }
    }
    /**
     * Adds npm devDependencies specific to CommitLint setup within the project configuration.
     */
    addDevDependencies() {
        this.project.addDevDeps(...this.devDependencies);
    }
    /**
     * Configures the `.gitattributes` file to treat CommitLint component related files as generated code, optimizing diffs.
     */
    updateGitAttributes() {
        this.project.gitattributes.addAttributes(`/${this.filePath}`, 'linguist-generated');
    }
    /**
     * Executes setup for the CommitLint component.
     */
    setup() {
        this.add();
        this.addScripts();
        this.addDevDependencies();
        this.updateGitAttributes();
    }
}
exports.CommitLintComponent = CommitLintComponent;
//# sourceMappingURL=data:application/json;base64,