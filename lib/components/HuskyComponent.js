"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.HuskyComponent = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const projen_1 = require("projen");
/**
 * Configures the Husky templates, settings and npm scripts for the project.
 */
class HuskyComponent {
    /**
     * Initializes the Husky component.
     * @param project The project to configure Husky for.
     */
    constructor(project) {
        this.project = project;
    }
    /**
     * Getter retrieving the file path for the Husky commit-msg hook.
     */
    get commitMsgFilePath() {
        return '.husky/commit-msg';
    }
    /**
     * Getter retrieving the file path for the Husky pre-commit hook.
     */
    get preCommitFilePath() {
        return '.husky/pre-commit';
    }
    /**
     * Getter retrieving the template file for commit-msg hook.
     */
    get commitMsgTemplate() {
        return [
            '# Generated by projen.To modify, edit.projenrc.ts and run "npx projen".',
            '',
            'npx --no-install commitlint --edit "$1"',
        ];
    }
    /**
     * Getter retrieving the template file for pre-commit hook.
     */
    get preCommitTemplate() {
        return ['# Generated by projen.To modify, edit.projenrc.ts and run "npx projen".', '', 'npx lint-staged'];
    }
    /**
     * Getter retrieving the npm scripts used for the Husky component.
     */
    get scripts() {
        return {
            prepare: 'husky || true',
        };
    }
    /**
     * Getter retrieving the relevant npm packages to be installed as devDependencies for the Husky component.
     */
    get devDependencies() {
        return ['husky'];
    }
    /**
     * Creates the template file for the Husky commit-msg hook.
     */
    createCommitMsgHook() {
        new projen_1.TextFile(this.project, this.commitMsgFilePath, {
            lines: this.commitMsgTemplate,
        });
    }
    /**
     * Creates the template file for the Husky pre-commit hook.
     */
    createPreCommitHook() {
        new projen_1.TextFile(this.project, this.preCommitFilePath, {
            lines: this.preCommitTemplate,
        });
    }
    /**
     * Adds template files to the Husky component.
     */
    add() {
        this.createCommitMsgHook();
        this.createPreCommitHook();
    }
    /**
     * Adds npm scripts specific to Husky setup within the project configuration.
     */
    addScripts() {
        for (const [name, command] of Object.entries(this.scripts)) {
            this.project.addTask(name, { exec: command });
        }
    }
    /**
     * Adds npm devDependencies specific to Husky setup within the project configuration.
     */
    addDevDependencies() {
        this.project.addDevDeps(...this.devDependencies);
    }
    /**
     * Configures the `.gitattributes` file to treat Husky component related files as generated code, optimizing diffs.
     */
    updateGitAttributes() {
        this.project.gitattributes.addAttributes(`/${this.commitMsgFilePath}`, 'linguist-generated');
        this.project.gitattributes.addAttributes(`/${this.preCommitFilePath}`, 'linguist-generated');
    }
    /**
     * Executes setup for the Husky component.
     */
    setup() {
        this.add();
        this.addScripts();
        this.addDevDependencies();
        this.updateGitAttributes();
    }
}
exports.HuskyComponent = HuskyComponent;
_a = JSII_RTTI_SYMBOL_1;
HuskyComponent[_a] = { fqn: "projen-template-github-action.HuskyComponent", version: "0.0.0" };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSHVza3lDb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29tcG9uZW50cy9IdXNreUNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLG1DQUFrQztBQUlsQzs7R0FFRztBQUNILE1BQWEsY0FBYztJQUd6Qjs7O09BR0c7SUFDSCxZQUFZLE9BQTBCO1FBQ3BDLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO0lBQ3pCLENBQUM7SUFFRDs7T0FFRztJQUNILElBQVksaUJBQWlCO1FBQzNCLE9BQU8sbUJBQW1CLENBQUM7SUFDN0IsQ0FBQztJQUVEOztPQUVHO0lBQ0gsSUFBWSxpQkFBaUI7UUFDM0IsT0FBTyxtQkFBbUIsQ0FBQztJQUM3QixDQUFDO0lBRUQ7O09BRUc7SUFDSCxJQUFZLGlCQUFpQjtRQUMzQixPQUFPO1lBQ0wseUVBQXlFO1lBQ3pFLEVBQUU7WUFDRix5Q0FBeUM7U0FDMUMsQ0FBQztJQUNKLENBQUM7SUFFRDs7T0FFRztJQUNILElBQVksaUJBQWlCO1FBQzNCLE9BQU8sQ0FBQyx5RUFBeUUsRUFBRSxFQUFFLEVBQUUsaUJBQWlCLENBQUMsQ0FBQztJQUM1RyxDQUFDO0lBRUQ7O09BRUc7SUFDSCxJQUFZLE9BQU87UUFDakIsT0FBTztZQUNMLE9BQU8sRUFBRSxlQUFlO1NBQ3pCLENBQUM7SUFDSixDQUFDO0lBRUQ7O09BRUc7SUFDSCxJQUFZLGVBQWU7UUFDekIsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ25CLENBQUM7SUFFRDs7T0FFRztJQUNLLG1CQUFtQjtRQUN6QixJQUFJLGlCQUFRLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsaUJBQWlCLEVBQUU7WUFDakQsS0FBSyxFQUFFLElBQUksQ0FBQyxpQkFBaUI7U0FDOUIsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVEOztPQUVHO0lBQ0ssbUJBQW1CO1FBQ3pCLElBQUksaUJBQVEsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxpQkFBaUIsRUFBRTtZQUNqRCxLQUFLLEVBQUUsSUFBSSxDQUFDLGlCQUFpQjtTQUM5QixDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQ7O09BRUc7SUFDSSxHQUFHO1FBQ1IsSUFBSSxDQUFDLG1CQUFtQixFQUFFLENBQUM7UUFDM0IsSUFBSSxDQUFDLG1CQUFtQixFQUFFLENBQUM7SUFDN0IsQ0FBQztJQUVEOztPQUVHO0lBQ0ksVUFBVTtRQUNmLEtBQUssTUFBTSxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsSUFBSSxNQUFNLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDO1lBQzNELElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFDO1FBQ2hELENBQUM7SUFDSCxDQUFDO0lBRUQ7O09BRUc7SUFDSSxrQkFBa0I7UUFDdkIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUM7SUFDbkQsQ0FBQztJQUVEOztPQUVHO0lBQ0ksbUJBQW1CO1FBQ3hCLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLGFBQWEsQ0FBQyxJQUFJLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxFQUFFLG9CQUFvQixDQUFDLENBQUM7UUFDN0YsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsYUFBYSxDQUFDLElBQUksSUFBSSxDQUFDLGlCQUFpQixFQUFFLEVBQUUsb0JBQW9CLENBQUMsQ0FBQztJQUMvRixDQUFDO0lBRUQ7O09BRUc7SUFDSSxLQUFLO1FBQ1YsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQ1gsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO1FBQ2xCLElBQUksQ0FBQyxrQkFBa0IsRUFBRSxDQUFDO1FBQzFCLElBQUksQ0FBQyxtQkFBbUIsRUFBRSxDQUFDO0lBQzdCLENBQUM7O0FBckhILHdDQXNIQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFRleHRGaWxlIH0gZnJvbSAncHJvamVuJztcbmltcG9ydCB7IFR5cGVTY3JpcHRQcm9qZWN0IH0gZnJvbSAncHJvamVuL2xpYi90eXBlc2NyaXB0JztcbmltcG9ydCB7IElQcm9qZWN0Q29tcG9uZW50LCBTY3JpcHRzIH0gZnJvbSAnLi4vdHlwZXMnO1xuXG4vKipcbiAqIENvbmZpZ3VyZXMgdGhlIEh1c2t5IHRlbXBsYXRlcywgc2V0dGluZ3MgYW5kIG5wbSBzY3JpcHRzIGZvciB0aGUgcHJvamVjdC5cbiAqL1xuZXhwb3J0IGNsYXNzIEh1c2t5Q29tcG9uZW50IGltcGxlbWVudHMgSVByb2plY3RDb21wb25lbnQge1xuICBwcml2YXRlIHByb2plY3Q6IFR5cGVTY3JpcHRQcm9qZWN0O1xuXG4gIC8qKlxuICAgKiBJbml0aWFsaXplcyB0aGUgSHVza3kgY29tcG9uZW50LlxuICAgKiBAcGFyYW0gcHJvamVjdCBUaGUgcHJvamVjdCB0byBjb25maWd1cmUgSHVza3kgZm9yLlxuICAgKi9cbiAgY29uc3RydWN0b3IocHJvamVjdDogVHlwZVNjcmlwdFByb2plY3QpIHtcbiAgICB0aGlzLnByb2plY3QgPSBwcm9qZWN0O1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHRlciByZXRyaWV2aW5nIHRoZSBmaWxlIHBhdGggZm9yIHRoZSBIdXNreSBjb21taXQtbXNnIGhvb2suXG4gICAqL1xuICBwcml2YXRlIGdldCBjb21taXRNc2dGaWxlUGF0aCgpOiBzdHJpbmcge1xuICAgIHJldHVybiAnLmh1c2t5L2NvbW1pdC1tc2cnO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHRlciByZXRyaWV2aW5nIHRoZSBmaWxlIHBhdGggZm9yIHRoZSBIdXNreSBwcmUtY29tbWl0IGhvb2suXG4gICAqL1xuICBwcml2YXRlIGdldCBwcmVDb21taXRGaWxlUGF0aCgpOiBzdHJpbmcge1xuICAgIHJldHVybiAnLmh1c2t5L3ByZS1jb21taXQnO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHRlciByZXRyaWV2aW5nIHRoZSB0ZW1wbGF0ZSBmaWxlIGZvciBjb21taXQtbXNnIGhvb2suXG4gICAqL1xuICBwcml2YXRlIGdldCBjb21taXRNc2dUZW1wbGF0ZSgpOiBzdHJpbmdbXSB7XG4gICAgcmV0dXJuIFtcbiAgICAgICcjIEdlbmVyYXRlZCBieSBwcm9qZW4uVG8gbW9kaWZ5LCBlZGl0LnByb2plbnJjLnRzIGFuZCBydW4gXCJucHggcHJvamVuXCIuJyxcbiAgICAgICcnLFxuICAgICAgJ25weCAtLW5vLWluc3RhbGwgY29tbWl0bGludCAtLWVkaXQgXCIkMVwiJyxcbiAgICBdO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHRlciByZXRyaWV2aW5nIHRoZSB0ZW1wbGF0ZSBmaWxlIGZvciBwcmUtY29tbWl0IGhvb2suXG4gICAqL1xuICBwcml2YXRlIGdldCBwcmVDb21taXRUZW1wbGF0ZSgpOiBzdHJpbmdbXSB7XG4gICAgcmV0dXJuIFsnIyBHZW5lcmF0ZWQgYnkgcHJvamVuLlRvIG1vZGlmeSwgZWRpdC5wcm9qZW5yYy50cyBhbmQgcnVuIFwibnB4IHByb2plblwiLicsICcnLCAnbnB4IGxpbnQtc3RhZ2VkJ107XG4gIH1cblxuICAvKipcbiAgICogR2V0dGVyIHJldHJpZXZpbmcgdGhlIG5wbSBzY3JpcHRzIHVzZWQgZm9yIHRoZSBIdXNreSBjb21wb25lbnQuXG4gICAqL1xuICBwcml2YXRlIGdldCBzY3JpcHRzKCk6IFNjcmlwdHMge1xuICAgIHJldHVybiB7XG4gICAgICBwcmVwYXJlOiAnaHVza3kgfHwgdHJ1ZScsXG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXR0ZXIgcmV0cmlldmluZyB0aGUgcmVsZXZhbnQgbnBtIHBhY2thZ2VzIHRvIGJlIGluc3RhbGxlZCBhcyBkZXZEZXBlbmRlbmNpZXMgZm9yIHRoZSBIdXNreSBjb21wb25lbnQuXG4gICAqL1xuICBwcml2YXRlIGdldCBkZXZEZXBlbmRlbmNpZXMoKTogc3RyaW5nW10ge1xuICAgIHJldHVybiBbJ2h1c2t5J107XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyB0aGUgdGVtcGxhdGUgZmlsZSBmb3IgdGhlIEh1c2t5IGNvbW1pdC1tc2cgaG9vay5cbiAgICovXG4gIHByaXZhdGUgY3JlYXRlQ29tbWl0TXNnSG9vaygpOiB2b2lkIHtcbiAgICBuZXcgVGV4dEZpbGUodGhpcy5wcm9qZWN0LCB0aGlzLmNvbW1pdE1zZ0ZpbGVQYXRoLCB7XG4gICAgICBsaW5lczogdGhpcy5jb21taXRNc2dUZW1wbGF0ZSxcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIHRoZSB0ZW1wbGF0ZSBmaWxlIGZvciB0aGUgSHVza3kgcHJlLWNvbW1pdCBob29rLlxuICAgKi9cbiAgcHJpdmF0ZSBjcmVhdGVQcmVDb21taXRIb29rKCk6IHZvaWQge1xuICAgIG5ldyBUZXh0RmlsZSh0aGlzLnByb2plY3QsIHRoaXMucHJlQ29tbWl0RmlsZVBhdGgsIHtcbiAgICAgIGxpbmVzOiB0aGlzLnByZUNvbW1pdFRlbXBsYXRlLFxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZHMgdGVtcGxhdGUgZmlsZXMgdG8gdGhlIEh1c2t5IGNvbXBvbmVudC5cbiAgICovXG4gIHB1YmxpYyBhZGQoKTogdm9pZCB7XG4gICAgdGhpcy5jcmVhdGVDb21taXRNc2dIb29rKCk7XG4gICAgdGhpcy5jcmVhdGVQcmVDb21taXRIb29rKCk7XG4gIH1cblxuICAvKipcbiAgICogQWRkcyBucG0gc2NyaXB0cyBzcGVjaWZpYyB0byBIdXNreSBzZXR1cCB3aXRoaW4gdGhlIHByb2plY3QgY29uZmlndXJhdGlvbi5cbiAgICovXG4gIHB1YmxpYyBhZGRTY3JpcHRzKCk6IHZvaWQge1xuICAgIGZvciAoY29uc3QgW25hbWUsIGNvbW1hbmRdIG9mIE9iamVjdC5lbnRyaWVzKHRoaXMuc2NyaXB0cykpIHtcbiAgICAgIHRoaXMucHJvamVjdC5hZGRUYXNrKG5hbWUsIHsgZXhlYzogY29tbWFuZCB9KTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQWRkcyBucG0gZGV2RGVwZW5kZW5jaWVzIHNwZWNpZmljIHRvIEh1c2t5IHNldHVwIHdpdGhpbiB0aGUgcHJvamVjdCBjb25maWd1cmF0aW9uLlxuICAgKi9cbiAgcHVibGljIGFkZERldkRlcGVuZGVuY2llcygpOiB2b2lkIHtcbiAgICB0aGlzLnByb2plY3QuYWRkRGV2RGVwcyguLi50aGlzLmRldkRlcGVuZGVuY2llcyk7XG4gIH1cblxuICAvKipcbiAgICogQ29uZmlndXJlcyB0aGUgYC5naXRhdHRyaWJ1dGVzYCBmaWxlIHRvIHRyZWF0IEh1c2t5IGNvbXBvbmVudCByZWxhdGVkIGZpbGVzIGFzIGdlbmVyYXRlZCBjb2RlLCBvcHRpbWl6aW5nIGRpZmZzLlxuICAgKi9cbiAgcHVibGljIHVwZGF0ZUdpdEF0dHJpYnV0ZXMoKTogdm9pZCB7XG4gICAgdGhpcy5wcm9qZWN0LmdpdGF0dHJpYnV0ZXMuYWRkQXR0cmlidXRlcyhgLyR7dGhpcy5jb21taXRNc2dGaWxlUGF0aH1gLCAnbGluZ3Vpc3QtZ2VuZXJhdGVkJyk7XG4gICAgdGhpcy5wcm9qZWN0LmdpdGF0dHJpYnV0ZXMuYWRkQXR0cmlidXRlcyhgLyR7dGhpcy5wcmVDb21taXRGaWxlUGF0aH1gLCAnbGluZ3Vpc3QtZ2VuZXJhdGVkJyk7XG4gIH1cblxuICAvKipcbiAgICogRXhlY3V0ZXMgc2V0dXAgZm9yIHRoZSBIdXNreSBjb21wb25lbnQuXG4gICAqL1xuICBwdWJsaWMgc2V0dXAoKTogdm9pZCB7XG4gICAgdGhpcy5hZGQoKTtcbiAgICB0aGlzLmFkZFNjcmlwdHMoKTtcbiAgICB0aGlzLmFkZERldkRlcGVuZGVuY2llcygpO1xuICAgIHRoaXMudXBkYXRlR2l0QXR0cmlidXRlcygpO1xuICB9XG59XG4iXX0=