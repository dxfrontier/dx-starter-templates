"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.HuskyComponent = void 0;
const projen_1 = require("projen");
/**
 * Configures the Husky templates, settings and npm scripts for the project.
 */
class HuskyComponent {
    /**
     * Initializes the Husky component.
     * @param project The project to configure Husky for.
     */
    constructor(project) {
        this.project = project;
    }
    /**
     * Getter retrieving the file path for the Husky commit-msg hook.
     */
    get commitMsgFilePath() {
        return '.husky/commit-msg';
    }
    /**
     * Getter retrieving the file path for the Husky pre-commit hook.
     */
    get preCommitFilePath() {
        return '.husky/pre-commit';
    }
    /**
     * Getter retrieving the template file for commit-msg hook.
     */
    get commitMsgTemplate() {
        return [
            '# Generated by projen.To modify, edit.projenrc.ts and run "npx projen".',
            '',
            'npx --no-install commitlint --edit "$1"',
        ];
    }
    /**
     * Getter retrieving the template file for pre-commit hook.
     */
    get preCommitTemplate() {
        return ['# Generated by projen.To modify, edit.projenrc.ts and run "npx projen".', '', 'npx lint-staged'];
    }
    /**
     * Getter retrieving the npm scripts used for the Husky component.
     */
    get scripts() {
        return {
            prepare: 'husky || true',
        };
    }
    /**
     * Getter retrieving the relevant npm packages to be installed as devDependencies for the Husky component.
     */
    get devDependencies() {
        return ['husky'];
    }
    /**
     * Creates the template file for the Husky commit-msg hook.
     */
    createCommitMsgHook() {
        new projen_1.TextFile(this.project, this.commitMsgFilePath, {
            lines: this.commitMsgTemplate,
        });
    }
    /**
     * Creates the template file for the Husky pre-commit hook.
     */
    createPreCommitHook() {
        new projen_1.TextFile(this.project, this.preCommitFilePath, {
            lines: this.preCommitTemplate,
        });
    }
    /**
     * Adds template files to the Husky component.
     */
    add() {
        this.createCommitMsgHook();
        this.createPreCommitHook();
    }
    /**
     * Adds npm scripts specific to Husky setup within the project configuration.
     */
    addScripts() {
        for (const [name, command] of Object.entries(this.scripts)) {
            this.project.addTask(name, { exec: command });
        }
    }
    /**
     * Adds npm devDependencies specific to Husky setup within the project configuration.
     */
    addDevDependencies() {
        this.project.addDevDeps(...this.devDependencies);
    }
    /**
     * Configures the `.gitattributes` file to treat Husky component related files as generated code, optimizing diffs.
     */
    updateGitAttributes() {
        this.project.gitattributes.addAttributes(`/${this.commitMsgFilePath}`, 'linguist-generated');
        this.project.gitattributes.addAttributes(`/${this.preCommitFilePath}`, 'linguist-generated');
    }
    /**
     * Executes setup for the Husky component.
     */
    setup() {
        this.add();
        this.addScripts();
        this.addDevDependencies();
        this.updateGitAttributes();
    }
}
exports.HuskyComponent = HuskyComponent;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSHVza3lDb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29tcG9uZW50cy9IdXNreUNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxtQ0FBa0M7QUFJbEM7O0dBRUc7QUFDSCxNQUFhLGNBQWM7SUFHekI7OztPQUdHO0lBQ0gsWUFBWSxPQUEwQjtRQUNwQyxJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztJQUN6QixDQUFDO0lBRUQ7O09BRUc7SUFDSCxJQUFZLGlCQUFpQjtRQUMzQixPQUFPLG1CQUFtQixDQUFDO0lBQzdCLENBQUM7SUFFRDs7T0FFRztJQUNILElBQVksaUJBQWlCO1FBQzNCLE9BQU8sbUJBQW1CLENBQUM7SUFDN0IsQ0FBQztJQUVEOztPQUVHO0lBQ0gsSUFBWSxpQkFBaUI7UUFDM0IsT0FBTztZQUNMLHlFQUF5RTtZQUN6RSxFQUFFO1lBQ0YseUNBQXlDO1NBQzFDLENBQUM7SUFDSixDQUFDO0lBRUQ7O09BRUc7SUFDSCxJQUFZLGlCQUFpQjtRQUMzQixPQUFPLENBQUMseUVBQXlFLEVBQUUsRUFBRSxFQUFFLGlCQUFpQixDQUFDLENBQUM7SUFDNUcsQ0FBQztJQUVEOztPQUVHO0lBQ0gsSUFBWSxPQUFPO1FBQ2pCLE9BQU87WUFDTCxPQUFPLEVBQUUsZUFBZTtTQUN6QixDQUFDO0lBQ0osQ0FBQztJQUVEOztPQUVHO0lBQ0gsSUFBWSxlQUFlO1FBQ3pCLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNuQixDQUFDO0lBRUQ7O09BRUc7SUFDSyxtQkFBbUI7UUFDekIsSUFBSSxpQkFBUSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLGlCQUFpQixFQUFFO1lBQ2pELEtBQUssRUFBRSxJQUFJLENBQUMsaUJBQWlCO1NBQzlCLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRDs7T0FFRztJQUNLLG1CQUFtQjtRQUN6QixJQUFJLGlCQUFRLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsaUJBQWlCLEVBQUU7WUFDakQsS0FBSyxFQUFFLElBQUksQ0FBQyxpQkFBaUI7U0FDOUIsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVEOztPQUVHO0lBQ0ksR0FBRztRQUNSLElBQUksQ0FBQyxtQkFBbUIsRUFBRSxDQUFDO1FBQzNCLElBQUksQ0FBQyxtQkFBbUIsRUFBRSxDQUFDO0lBQzdCLENBQUM7SUFFRDs7T0FFRztJQUNJLFVBQVU7UUFDZixLQUFLLE1BQU0sQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLElBQUksTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQztZQUMzRCxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztRQUNoRCxDQUFDO0lBQ0gsQ0FBQztJQUVEOztPQUVHO0lBQ0ksa0JBQWtCO1FBQ3ZCLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDO0lBQ25ELENBQUM7SUFFRDs7T0FFRztJQUNJLG1CQUFtQjtRQUN4QixJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxhQUFhLENBQUMsSUFBSSxJQUFJLENBQUMsaUJBQWlCLEVBQUUsRUFBRSxvQkFBb0IsQ0FBQyxDQUFDO1FBQzdGLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLGFBQWEsQ0FBQyxJQUFJLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxFQUFFLG9CQUFvQixDQUFDLENBQUM7SUFDL0YsQ0FBQztJQUVEOztPQUVHO0lBQ0ksS0FBSztRQUNWLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUNYLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztRQUNsQixJQUFJLENBQUMsa0JBQWtCLEVBQUUsQ0FBQztRQUMxQixJQUFJLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztJQUM3QixDQUFDO0NBQ0Y7QUF0SEQsd0NBc0hDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVGV4dEZpbGUgfSBmcm9tICdwcm9qZW4nO1xuaW1wb3J0IHsgVHlwZVNjcmlwdFByb2plY3QgfSBmcm9tICdwcm9qZW4vbGliL3R5cGVzY3JpcHQnO1xuaW1wb3J0IHsgSVByb2plY3RDb21wb25lbnQsIFNjcmlwdHMgfSBmcm9tICcuLi90eXBlcyc7XG5cbi8qKlxuICogQ29uZmlndXJlcyB0aGUgSHVza3kgdGVtcGxhdGVzLCBzZXR0aW5ncyBhbmQgbnBtIHNjcmlwdHMgZm9yIHRoZSBwcm9qZWN0LlxuICovXG5leHBvcnQgY2xhc3MgSHVza3lDb21wb25lbnQgaW1wbGVtZW50cyBJUHJvamVjdENvbXBvbmVudCB7XG4gIHByaXZhdGUgcHJvamVjdDogVHlwZVNjcmlwdFByb2plY3Q7XG5cbiAgLyoqXG4gICAqIEluaXRpYWxpemVzIHRoZSBIdXNreSBjb21wb25lbnQuXG4gICAqIEBwYXJhbSBwcm9qZWN0IFRoZSBwcm9qZWN0IHRvIGNvbmZpZ3VyZSBIdXNreSBmb3IuXG4gICAqL1xuICBjb25zdHJ1Y3Rvcihwcm9qZWN0OiBUeXBlU2NyaXB0UHJvamVjdCkge1xuICAgIHRoaXMucHJvamVjdCA9IHByb2plY3Q7XG4gIH1cblxuICAvKipcbiAgICogR2V0dGVyIHJldHJpZXZpbmcgdGhlIGZpbGUgcGF0aCBmb3IgdGhlIEh1c2t5IGNvbW1pdC1tc2cgaG9vay5cbiAgICovXG4gIHByaXZhdGUgZ2V0IGNvbW1pdE1zZ0ZpbGVQYXRoKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuICcuaHVza3kvY29tbWl0LW1zZyc7XG4gIH1cblxuICAvKipcbiAgICogR2V0dGVyIHJldHJpZXZpbmcgdGhlIGZpbGUgcGF0aCBmb3IgdGhlIEh1c2t5IHByZS1jb21taXQgaG9vay5cbiAgICovXG4gIHByaXZhdGUgZ2V0IHByZUNvbW1pdEZpbGVQYXRoKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuICcuaHVza3kvcHJlLWNvbW1pdCc7XG4gIH1cblxuICAvKipcbiAgICogR2V0dGVyIHJldHJpZXZpbmcgdGhlIHRlbXBsYXRlIGZpbGUgZm9yIGNvbW1pdC1tc2cgaG9vay5cbiAgICovXG4gIHByaXZhdGUgZ2V0IGNvbW1pdE1zZ1RlbXBsYXRlKCk6IHN0cmluZ1tdIHtcbiAgICByZXR1cm4gW1xuICAgICAgJyMgR2VuZXJhdGVkIGJ5IHByb2plbi5UbyBtb2RpZnksIGVkaXQucHJvamVucmMudHMgYW5kIHJ1biBcIm5weCBwcm9qZW5cIi4nLFxuICAgICAgJycsXG4gICAgICAnbnB4IC0tbm8taW5zdGFsbCBjb21taXRsaW50IC0tZWRpdCBcIiQxXCInLFxuICAgIF07XG4gIH1cblxuICAvKipcbiAgICogR2V0dGVyIHJldHJpZXZpbmcgdGhlIHRlbXBsYXRlIGZpbGUgZm9yIHByZS1jb21taXQgaG9vay5cbiAgICovXG4gIHByaXZhdGUgZ2V0IHByZUNvbW1pdFRlbXBsYXRlKCk6IHN0cmluZ1tdIHtcbiAgICByZXR1cm4gWycjIEdlbmVyYXRlZCBieSBwcm9qZW4uVG8gbW9kaWZ5LCBlZGl0LnByb2plbnJjLnRzIGFuZCBydW4gXCJucHggcHJvamVuXCIuJywgJycsICducHggbGludC1zdGFnZWQnXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXR0ZXIgcmV0cmlldmluZyB0aGUgbnBtIHNjcmlwdHMgdXNlZCBmb3IgdGhlIEh1c2t5IGNvbXBvbmVudC5cbiAgICovXG4gIHByaXZhdGUgZ2V0IHNjcmlwdHMoKTogU2NyaXB0cyB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHByZXBhcmU6ICdodXNreSB8fCB0cnVlJyxcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHRlciByZXRyaWV2aW5nIHRoZSByZWxldmFudCBucG0gcGFja2FnZXMgdG8gYmUgaW5zdGFsbGVkIGFzIGRldkRlcGVuZGVuY2llcyBmb3IgdGhlIEh1c2t5IGNvbXBvbmVudC5cbiAgICovXG4gIHByaXZhdGUgZ2V0IGRldkRlcGVuZGVuY2llcygpOiBzdHJpbmdbXSB7XG4gICAgcmV0dXJuIFsnaHVza3knXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIHRoZSB0ZW1wbGF0ZSBmaWxlIGZvciB0aGUgSHVza3kgY29tbWl0LW1zZyBob29rLlxuICAgKi9cbiAgcHJpdmF0ZSBjcmVhdGVDb21taXRNc2dIb29rKCk6IHZvaWQge1xuICAgIG5ldyBUZXh0RmlsZSh0aGlzLnByb2plY3QsIHRoaXMuY29tbWl0TXNnRmlsZVBhdGgsIHtcbiAgICAgIGxpbmVzOiB0aGlzLmNvbW1pdE1zZ1RlbXBsYXRlLFxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgdGhlIHRlbXBsYXRlIGZpbGUgZm9yIHRoZSBIdXNreSBwcmUtY29tbWl0IGhvb2suXG4gICAqL1xuICBwcml2YXRlIGNyZWF0ZVByZUNvbW1pdEhvb2soKTogdm9pZCB7XG4gICAgbmV3IFRleHRGaWxlKHRoaXMucHJvamVjdCwgdGhpcy5wcmVDb21taXRGaWxlUGF0aCwge1xuICAgICAgbGluZXM6IHRoaXMucHJlQ29tbWl0VGVtcGxhdGUsXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQWRkcyB0ZW1wbGF0ZSBmaWxlcyB0byB0aGUgSHVza3kgY29tcG9uZW50LlxuICAgKi9cbiAgcHVibGljIGFkZCgpOiB2b2lkIHtcbiAgICB0aGlzLmNyZWF0ZUNvbW1pdE1zZ0hvb2soKTtcbiAgICB0aGlzLmNyZWF0ZVByZUNvbW1pdEhvb2soKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIG5wbSBzY3JpcHRzIHNwZWNpZmljIHRvIEh1c2t5IHNldHVwIHdpdGhpbiB0aGUgcHJvamVjdCBjb25maWd1cmF0aW9uLlxuICAgKi9cbiAgcHVibGljIGFkZFNjcmlwdHMoKTogdm9pZCB7XG4gICAgZm9yIChjb25zdCBbbmFtZSwgY29tbWFuZF0gb2YgT2JqZWN0LmVudHJpZXModGhpcy5zY3JpcHRzKSkge1xuICAgICAgdGhpcy5wcm9qZWN0LmFkZFRhc2sobmFtZSwgeyBleGVjOiBjb21tYW5kIH0pO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIG5wbSBkZXZEZXBlbmRlbmNpZXMgc3BlY2lmaWMgdG8gSHVza3kgc2V0dXAgd2l0aGluIHRoZSBwcm9qZWN0IGNvbmZpZ3VyYXRpb24uXG4gICAqL1xuICBwdWJsaWMgYWRkRGV2RGVwZW5kZW5jaWVzKCk6IHZvaWQge1xuICAgIHRoaXMucHJvamVjdC5hZGREZXZEZXBzKC4uLnRoaXMuZGV2RGVwZW5kZW5jaWVzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb25maWd1cmVzIHRoZSBgLmdpdGF0dHJpYnV0ZXNgIGZpbGUgdG8gdHJlYXQgSHVza3kgY29tcG9uZW50IHJlbGF0ZWQgZmlsZXMgYXMgZ2VuZXJhdGVkIGNvZGUsIG9wdGltaXppbmcgZGlmZnMuXG4gICAqL1xuICBwdWJsaWMgdXBkYXRlR2l0QXR0cmlidXRlcygpOiB2b2lkIHtcbiAgICB0aGlzLnByb2plY3QuZ2l0YXR0cmlidXRlcy5hZGRBdHRyaWJ1dGVzKGAvJHt0aGlzLmNvbW1pdE1zZ0ZpbGVQYXRofWAsICdsaW5ndWlzdC1nZW5lcmF0ZWQnKTtcbiAgICB0aGlzLnByb2plY3QuZ2l0YXR0cmlidXRlcy5hZGRBdHRyaWJ1dGVzKGAvJHt0aGlzLnByZUNvbW1pdEZpbGVQYXRofWAsICdsaW5ndWlzdC1nZW5lcmF0ZWQnKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBFeGVjdXRlcyBzZXR1cCBmb3IgdGhlIEh1c2t5IGNvbXBvbmVudC5cbiAgICovXG4gIHB1YmxpYyBzZXR1cCgpOiB2b2lkIHtcbiAgICB0aGlzLmFkZCgpO1xuICAgIHRoaXMuYWRkU2NyaXB0cygpO1xuICAgIHRoaXMuYWRkRGV2RGVwZW5kZW5jaWVzKCk7XG4gICAgdGhpcy51cGRhdGVHaXRBdHRyaWJ1dGVzKCk7XG4gIH1cbn1cbiJdfQ==