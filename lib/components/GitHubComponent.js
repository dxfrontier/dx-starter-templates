"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GitHubComponent = void 0;
const projen_1 = require("projen");
const github_1 = require("projen/lib/github");
const workflows_model_1 = require("projen/lib/github/workflows-model");
/**
 * Configures the GitHub templates, settings and npm scripts for the project.
 */
class GitHubComponent {
    /**
     * Initializes the GitHub component.
     * @param project The project to configure GitHub for.
     */
    constructor(project) {
        this.project = project;
    }
    /**
     * Getter retrieving the file path for GitHub bug issue template.
     */
    get bugIssueFilePath() {
        return '.github/ISSUE_TEMPLATE/bug.yml';
    }
    /**
     * Getter retrieving the file path for GitHub feature issue template.
     */
    get featureIssueFilePath() {
        return '.github/ISSUE_TEMPLATE/feature.yml';
    }
    /**
     * Getter retrieving the file path for GitHub question issue template.
     */
    get questionIssueFilePath() {
        return '.github/ISSUE_TEMPLATE/question.yml';
    }
    /**
     * Getter retrieving the file path for the Cliff toml configuration.
     * This file is used by release workflow to create the Changelog.
     */
    get cliffTomlFilePath() {
        return 'cliff.toml';
    }
    /**
     * Getter retrieving pull request template for the GitHub configuration.
     */
    get pullRequestTemplate() {
        return [
            '## Reviewers Checklist',
            '',
            'for complete review list refer to ABS Loop - Review Aspects',
            '',
            '### Organizational Section',
            '',
            '- [ ] PR is assigned to the according feature/bug',
            '- [ ] Feature/bug is descriptive',
            '- [ ] Feature/bug is assigned to according labels',
            '- [ ] Feature/bug is assigned to a developer',
            '',
            '### Structure',
            '',
            '- [ ] Readability: Code is easy to understand, with meaningful names for variables, functions, and classes',
            '- [ ] Comments: Meaningful and helpful comments. Code is documented without being over-commented',
            '- [ ] DRY, KISS and YAGNI: Code implements only necessary features; no over-engineering',
            '- [ ] No sensitive data (e.g., passwords, API keys) in the code',
            '- [ ] No major updates for used packages',
            '',
            '### Testing',
            '',
            '- [ ] Code is locally tested by developer (if applicable)',
            '- [ ] Automated tests pass successfully',
            '<!-- Generated by projen. To modify, edit .projenrc.ts and run "npx projen".-->',
        ];
    }
    /**
     * Getter retrieving bug issue template for the GitHub configuration.
     */
    get bugIssueTemplate() {
        return [
            'name: üêû Bug',
            'description: File a bug/issue',
            'title: "[BUG] <title>"',
            'labels: ["type: bug"]',
            'body:',
            '  - type: textarea',
            '    attributes:',
            '      label: Current behavior',
            "      description: A description of what you're experiencing.",
            '    validations:',
            '      required: true',
            '',
            '  - type: textarea',
            '    attributes:',
            '      label: Expected behavior',
            '      description: A description of what you expected to happen.',
            '    validations:',
            '      required: true',
            '# Generated by projen. To modify, edit .projenrc.ts and run "npx projen".',
        ];
    }
    /**
     * Getter retrieving feature issue template for the GitHub configuration.
     */
    get featureIssueTemplate() {
        return [
            'name: üí° Feature',
            'description: Story related feature',
            'title: "[FEATURE] <title>"',
            'labels: ["type: feature"]',
            'body:',
            '  - type: textarea',
            '    attributes:',
            '      label: Description',
            '      description: A description of the feature.',
            '    validations:',
            '      required: true',
            '',
            '  - type: textarea',
            '    attributes:',
            '      label: Task List',
            '      description: Describe the steps to fulfill the feature.',
            '      value: |',
            '        - [ ] My First Task',
            '    validations:',
            '      required: true',
            '# Generated by projen. To modify, edit .projenrc.ts and run "npx projen".',
        ];
    }
    /**
     * Getter retrieving question issue template for the GitHub configuration.
     */
    get questionIssueTemplate() {
        return [
            'name: ‚ùì Question',
            'description: Ask a question',
            'title: "[QUESTION] <title>"',
            'labels: ["type: question"]',
            'body:',
            '  - type: textarea',
            '    attributes:',
            '      label: Question',
            '      description: What would you like to know? If you encounter unusual behavior or identified a missing feature, consider opening a bug report instead.',
            '    validations:',
            '      required: true',
            '# Generated by projen. To modify, edit .projenrc.ts and run "npx projen".',
        ];
    }
    /**
     * Getter retrieving cliff toml configuration for the GitHub configuration.
     * This file is used by release workflow to create the Changelog.
     */
    get cliffTomlConfiguration() {
        return [
            '# ~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".',
            '',
            '[changelog]',
            '# changelog header',
            'header = """',
            '# Changelog\n',
            'All notable changes to this project will be documented in this file.\n',
            '"""',
            '# template for the changelog body',
            '# https://keats.github.io/tera/docs/#introduction',
            'body = """',
            '{% if version %}\\',
            '    ## [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }}',
            '{% else %}\\',
            '    ## [unreleased]',
            '{% endif %}\\',
            '{% for group, commits in commits | group_by(attribute="group") %}',
            '    ### {{ group | striptags | trim | upper_first }}',
            '    {% for commit in commits %}',
            '        - {% if commit.scope %}*({{ commit.scope }})* {% endif %}\\',
            '            {% if commit.breaking %}[**breaking**] {% endif %}\\',
            '            {{ commit.message | upper_first }}\\',
            '    {% endfor %}',
            '{% endfor %}\\',
            '"""',
            '# template for the changelog footer',
            'footer = """',
            '<!-- generated by git-cliff -->',
            '"""',
            '# remove the leading and trailing s',
            'trim = true',
            '# postprocessors',
            'postprocessors = [',
            '  # { pattern = "<REPO>", replace = "https://github.com/orhun/git-cliff" }, # replace repository URL',
            ']',
            '',
            '[git]',
            '# parse the commits based on https://www.conventionalcommits.org',
            'conventional_commits = true',
            '# filter out the commits that are not conventional',
            'filter_unconventional = true',
            '# process each line of a commit as an individual commit',
            'split_commits = false',
            '# regex for preprocessing the commit messages',
            'commit_preprocessors = [',
            '  # Replace issue numbers',
            '  #{ pattern = "\\((\\w+\\s)?#([0-9]+)\\)", replace = "([#${2}](<REPO>/issues/${2}))"},',
            '  # Check spelling of the commit with https://github.com/crate-ci/typos',
            '  # If the spelling is incorrect, it will be automatically fixed.',
            '  #{ pattern = ".*", replace_command = "typos --write-changes -" },',
            ']',
            '# regex for parsing and grouping commits',
            'commit_parsers = [',
            '  { message = "^feat", group = "<!-- 0 -->üöÄ Features" },',
            '  { message = "^fix", group = "<!-- 1 -->üêõ Bug Fixes" },',
            '  { message = "^doc", group = "<!-- 3 -->üìö Documentation" },',
            '  { message = "^perf", group = "<!-- 4 -->‚ö° Performance" },',
            '  { message = "^refactor", group = "<!-- 2 -->üöú Refactor" },',
            '  { message = "^style", group = "<!-- 5 -->üé® Styling" },',
            '  { message = "^test", group = "<!-- 6 -->üß™ Testing" },',
            '  { message = "^chore\\(release\\): prepare for", skip = true },',
            '  { message = "^chore\\(deps.*\\)", skip = true },',
            '  { message = "^chore\\(pr\\)", skip = true },',
            '  { message = "^chore\\(pull\\)", skip = true },',
            '  { message = "^chore|^ci", group = "<!-- 7 -->‚öôÔ∏è Miscellaneous Tasks" },',
            '  { body = ".*security", group = "<!-- 8 -->üõ°Ô∏è Security" },',
            '  { message = "^revert", group = "<!-- 9 -->‚óÄÔ∏è Revert" },',
            ']',
            '# protect breaking changes from being skipped due to matching a skipping commit_parser',
            'protect_breaking_commits = false',
            '# filter out the commits that are not matched by commit parsers',
            'filter_commits = false',
            '# regex for matching git tags',
            '# tag_pattern = "v[0-9].*"',
            '# regex for skipping tags',
            '# skip_tags = ""',
            '# regex for ignoring tags',
            '# ignore_tags = ""',
            '# sort the tags topologically',
            'topo_order = false',
            '# sort the commits inside sections by oldest/newest order',
            'sort_commits = "oldest"',
            '# limit the number of commits included in the changelog.',
            '# limit_commits = 42',
        ];
    }
    /**
     * Getter retrieving release workflow template options for the GitHub configuration.
     */
    get releaseWorkflowOptions() {
        return {
            on: {
                pullRequest: {
                    branches: ['main'],
                    types: ['closed'],
                },
            },
            job: {
                runsOn: ['ubuntu-latest'],
                permissions: {
                    contents: workflows_model_1.JobPermission.WRITE,
                    pullRequests: workflows_model_1.JobPermission.WRITE,
                },
                steps: [
                    {
                        name: 'Create release',
                        uses: 'dxfrontier/gh-action-release@main',
                        with: {
                            GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}',
                            BRANCH: 'main',
                        },
                    },
                ],
            },
        };
    }
    /**
     * Getter retrieving stale workflow template options for the GitHub configuration.
     */
    get staleWorkflowOptions() {
        return {
            on: {
                schedule: [
                    {
                        cron: '36 18 * * *',
                    },
                ],
            },
            job: {
                runsOn: ['ubuntu-latest'],
                permissions: {
                    issues: workflows_model_1.JobPermission.WRITE,
                    pullRequests: workflows_model_1.JobPermission.WRITE,
                },
                steps: [
                    {
                        uses: 'actions/stale@v5',
                        with: {
                            'repo-token': '${{ secrets.GITHUB_TOKEN }}',
                            'days-before-issue-stale': 30,
                            'stale-issue-message': 'This issue has not been updated in a while. If it is still relevant, please comment on it to keep it open. The issue will be closed soon if it remains inactive.',
                            'close-issue-message': 'This issue has been closed automatically due to inactivity.',
                            'stale-pr-message': 'This PR has not been updated in a while. If it is still relevant, please comment on it to keep it open. The PR will be closed soon if it remains inactive.',
                            'close-pr-message': 'This PR has been closed automatically due to inactivity.',
                            'stale-issue-label': 'status: stale',
                            'stale-pr-label': 'status: stale',
                            'exempt-issue-labels': 'type: feature request',
                            'exempt-pr-labels': 'type: feature request',
                            'exempt-all-milestones': true,
                        },
                    },
                ],
            },
        };
    }
    /**
     * Creates the template file for a GitHub pull request.
     */
    createPullRequest() {
        new github_1.PullRequestTemplate(this.project.github, {
            lines: this.pullRequestTemplate,
        });
    }
    /**
     * Creates the template file for a GitHub bug issue.
     */
    createBugIssue() {
        new projen_1.TextFile(this.project, this.bugIssueFilePath, {
            lines: this.bugIssueTemplate,
        });
    }
    /**
     * Creates the template file for a GitHub feature issue.
     */
    createFeatureIssue() {
        new projen_1.TextFile(this.project, this.featureIssueFilePath, {
            lines: this.featureIssueTemplate,
        });
    }
    /**
     * Creates the template file for a GitHub question issue.
     */
    createQuestionIssue() {
        new projen_1.TextFile(this.project, this.questionIssueFilePath, {
            lines: this.questionIssueTemplate,
        });
    }
    /**
     * Creates the template file for a GitHub release workflow.
     */
    createReleaseWorkflow() {
        var _a;
        const workflow = (_a = this.project.github) === null || _a === void 0 ? void 0 : _a.addWorkflow('Release');
        workflow === null || workflow === void 0 ? void 0 : workflow.on(this.releaseWorkflowOptions.on);
        workflow === null || workflow === void 0 ? void 0 : workflow.addJob('release', this.releaseWorkflowOptions.job);
    }
    /**
     * Creates the template file for a GitHub stale workflow.
     */
    createStaleWorkflow() {
        var _a;
        const workflow = (_a = this.project.github) === null || _a === void 0 ? void 0 : _a.addWorkflow('Stale');
        workflow === null || workflow === void 0 ? void 0 : workflow.on(this.staleWorkflowOptions.on);
        workflow === null || workflow === void 0 ? void 0 : workflow.addJob('stale', this.staleWorkflowOptions.job);
    }
    /**
     * Creates the configuration file for the cliff toml CHANGELOG creation in release workflow.
     */
    createCliffTomlConfiguration() {
        new projen_1.TextFile(this.project, this.cliffTomlFilePath, {
            lines: this.cliffTomlConfiguration,
        });
    }
    /**
     * Adds template files to the GitHub component.
     */
    add() {
        this.createPullRequest();
        this.createBugIssue();
        this.createFeatureIssue();
        this.createQuestionIssue();
        this.createReleaseWorkflow();
        this.createStaleWorkflow();
        this.createCliffTomlConfiguration();
    }
    /**
     * Configures the `.gitattributes` file to treat GitHub component related files as generated code, optimizing diffs.
     */
    updateGitAttributes() {
        // Pull request template is added automatically
        this.project.gitattributes.addAttributes(`/${this.bugIssueFilePath}`, 'linguist-generated');
        this.project.gitattributes.addAttributes(`/${this.featureIssueFilePath}`, 'linguist-generated');
        this.project.gitattributes.addAttributes(`/${this.questionIssueFilePath}`, 'linguist-generated');
        this.project.gitattributes.addAttributes(`/${this.cliffTomlFilePath}`, 'linguist-generated');
        // Workflows templates are added automatically
    }
    /**
     * Executes setup for the GitHub component.
     */
    setup() {
        this.add();
        this.updateGitAttributes();
    }
}
exports.GitHubComponent = GitHubComponent;
//# sourceMappingURL=data:application/json;base64,