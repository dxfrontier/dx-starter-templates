"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ReadmeConfigCapService = void 0;
/**
 * Implementing all relevant Readme configuration for the CapService project.
 * We do not extend Base config classes as this is a special case.
 */
class ReadmeConfigCapService {
    getReadme(options) {
        // Start README.md
        return {
            filename: 'README.md',
            contents: [
                `# ${options.name}`,
                '',
                `${options.description}`,
                '',
                '# Table of Contents',
                '',
                `- [${options.name}](#${options.name})`,
                '- [Table of Contents](#table-of-contents)',
                '  - [Prerequisites](#prerequisites)',
                '  - [`Installation`](#installation)',
                '  - [`Usage`](#usage)',
                '    - [Start locally](#start-locally)',
                '    - [Debug locally](#debug-locally)',
                '    - [Deploy (`DEV`, `QA`, `PROD`)](#deploy-dev-qa-prod)',
                '      - [Deployment steps](#deployment-steps)',
                '      - [`Branch-Specific` deployment rules](#branch-specific-deployment-rules)',
                '  - [Project tools and utilities](#project-tools-and-utilities)',
                '    - [Prettier](#prettier)',
                '    - [ESLint](#eslint)',
                '    - [Lint-staged](#lint-staged)',
                '    - [Commit-Lint](#commit-lint)',
                '    - [Husky](#husky)',
                '  - [Authors](#authors)',
                '',
                '## Prerequisites',
                '',
                'Install [**@sap/cds-dk**](https://cap.cloud.sap/docs/get-started/), [typescript](https://www.typescriptlang.org/), [ts-node](https://www.npmjs.com/package/ts-node) globally:',
                '',
                '```bash',
                'npm install -g @sap/cds-dk typescript ts-node',
                '```',
                '',
                '## `Installation`',
                '',
                '1. After generating the project using `projen`, install the required dependencies by running:',
                '',
                '```bash',
                'npm install',
                '```',
                '',
                '2. Create the following three labels in your repository by navigating to `Pull Requests` > `Labels` > `New Label`:',
                '',
                '   - **patch**',
                '   - **minor**',
                '   - **major**',
                '',
                '> [!TIP]',
                '> For more info about `SemVer (MAJOR.MINOR.PATCH)`, visit [SemVer.org](https://semver.org/)',
                '',
                '3. The following secrets must be created in your GitHub repository to enable the automatic deployment process:',
                '',
                '| Parameter       | Description                                                                   |',
                '| --------------- | ----------------------------------------------------------------------------- |',
                '| `CF_IAS_ORIGIN` | The origin used for IAS authentication when logging into Cloud Foundry. |',
                '| `CF_API_DEV` | The API endpoint for the development Cloud Foundry environment. |',
                '| `CF_ORG_DEV` | The organization for the development environment in Cloud Foundry. |',
                '| `CF_SPACE_DEV` | The space within the development organization in Cloud Foundry. |',
                '| `CF_USERNAME_DEV` | The username for logging into the development environment in Cloud Foundry. |',
                '| `CF_PASSWORD_DEV` | The password for logging into the development environment in Cloud Foundry. |',
                '| `CF_API_PROD` | The API endpoint for the production Cloud Foundry environment. |',
                '| `CF_ORG_PROD` | The organization for the production environment in Cloud Foundry. |',
                '| `CF_SPACE_PROD` | The space within the production organization in Cloud Foundry. |',
                '| `CF_USERNAME_PROD` | The username for logging into the production environment in Cloud Foundry. |',
                '| `CF_PASSWORD_PROD` | The password for logging into the production environment in Cloud Foundry. |',
                '',
                '## `Usage`',
                '',
                '### Start locally',
                '',
                'Start the CAP server in watch mode (hot-reload):',
                '',
                '```bash',
                'npm run watch',
                '```',
                '',
                '> [!TIP]',
                '> Access the service at http://localhost:4004',
                '',
                '### Debug locally',
                '',
                '1. Add breakpoints in your `.ts` files.',
                '2. Start the CAP server in debug mode:',
                '',
                '```bash',
                'npm run watch',
                '```',
                '',
                '3. Refresh the service.',
                '4. The debugger should stop at the breakpoint line.',
                '',
                '### Deploy (`DEV`, `QA`, `PROD`)',
                '',
                'The deployment process is automatically triggered when a `PULL REQUEST` is merged into the `main` branch.',
                '',
                '#### Deployment steps',
                '',
                '- `Version Bump`: The `package.json` version is incremented based on the selected label (`patch`, `minor`, or `major`).',
                '- `GitHub Tags`: A new tag is created to mark the release.',
                '- `GitHub Release`: A release is published in the repository, summarizing the changes.',
                '- `Changelog Update`: The `CHANGELOG.md` file is updated with the latest commit messages.',
                '',
                '> [!CAUTION]',
                '> Secrets from installation process are required for automatic deployment. See **[installation](#installation)**.',
                '',
                '> [!CAUTION]',
                '> Every `PULL REQUEST` merged into `main` must have one of the following labels:',
                '> - `patch` **(0.0.x)**',
                '> - `minor` **(0.x.0)**',
                '> - `major` **(x.0.0)**',
                '',
                '#### `Branch-Specific` deployment rules',
                '',
                '- `Development (DEV)`: Changes merged into the `dev` branch trigger deployment to the development environment.',
                '- `Quality Assurance (QA)`: Merging changes into `qa` triggers deployment to the QA environment.',
                '- `Production (PROD)`: Merging changes into `prod` deploys to production.',
                '',
                '> [!TIP]',
                '> To deploy all environments (`DEV`, `QA`, `PROD`), maintain `dev`, `qa`, and `prod` branches and merge changes accordingly.',
                '',
                '## Project tools and utilities',
                '',
                '### Prettier',
                '',
                'A code formatter enforcing consistent style.',
                '',
                '> [!NOTE]',
                '> Prettier runs automatically on commit.',
                '',
                '> [!TIP]',
                '> Manually run Prettier:',
                '> ```bash',
                '> npm run prettier:fix',
                '> ```',
                '',
                '### ESLint',
                '',
                'A linter enforcing TypeScript coding standards.',
                '',
                '> [!NOTE]',
                '> ESLint runs automatically on commit.',
                '',
                '> [!TIP]',
                '> Manually run ESLint:',
                '> ```bash',
                '> npm run eslint:fix',
                '> ```',
                '',
                '### Lint-staged',
                '',
                'Runs linters only on staged files before committing.',
                '',
                '### Commit-Lint',
                '',
                'Ensures commit messages follow a conventional format.',
                '',
                '### Husky',
                '',
                'Manages Git hooks for automated tasks (e.g., running tests, linters).',
                '',
                '## Authors',
                '',
                '- [@Author1](#link1)',
                '- [@Author2](#link2)',
                '',
                '<p align="right">(<a href="#table-of-contents">back to top</a>)</p>',
            ].join('\n'),
            // End README.md
        };
    }
}
exports.ReadmeConfigCapService = ReadmeConfigCapService;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVhZG1lLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NhcC1zZXJ2aWNlL2NvbmZpZy9yZWFkbWUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBTUE7OztHQUdHO0FBQ0gsTUFBYSxzQkFBc0I7SUFDMUIsU0FBUyxDQUFDLE9BQWlDO1FBQ2hELGtCQUFrQjtRQUNsQixPQUFPO1lBQ0wsUUFBUSxFQUFFLFdBQVc7WUFDckIsUUFBUSxFQUFFO2dCQUNSLEtBQUssT0FBTyxDQUFDLElBQUksRUFBRTtnQkFDbkIsRUFBRTtnQkFDRixHQUFHLE9BQU8sQ0FBQyxXQUFXLEVBQUU7Z0JBQ3hCLEVBQUU7Z0JBQ0YscUJBQXFCO2dCQUNyQixFQUFFO2dCQUNGLE1BQU0sT0FBTyxDQUFDLElBQUksTUFBTSxPQUFPLENBQUMsSUFBSSxHQUFHO2dCQUN2QywyQ0FBMkM7Z0JBQzNDLHFDQUFxQztnQkFDckMscUNBQXFDO2dCQUNyQyx1QkFBdUI7Z0JBQ3ZCLHVDQUF1QztnQkFDdkMsdUNBQXVDO2dCQUN2QywyREFBMkQ7Z0JBQzNELCtDQUErQztnQkFDL0MsaUZBQWlGO2dCQUNqRixpRUFBaUU7Z0JBQ2pFLDZCQUE2QjtnQkFDN0IseUJBQXlCO2dCQUN6QixtQ0FBbUM7Z0JBQ25DLG1DQUFtQztnQkFDbkMsdUJBQXVCO2dCQUN2Qix5QkFBeUI7Z0JBQ3pCLEVBQUU7Z0JBQ0Ysa0JBQWtCO2dCQUNsQixFQUFFO2dCQUNGLCtLQUErSztnQkFDL0ssRUFBRTtnQkFDRixTQUFTO2dCQUNULCtDQUErQztnQkFDL0MsS0FBSztnQkFDTCxFQUFFO2dCQUNGLG1CQUFtQjtnQkFDbkIsRUFBRTtnQkFDRiwrRkFBK0Y7Z0JBQy9GLEVBQUU7Z0JBQ0YsU0FBUztnQkFDVCxhQUFhO2dCQUNiLEtBQUs7Z0JBQ0wsRUFBRTtnQkFDRixvSEFBb0g7Z0JBQ3BILEVBQUU7Z0JBQ0YsZ0JBQWdCO2dCQUNoQixnQkFBZ0I7Z0JBQ2hCLGdCQUFnQjtnQkFDaEIsRUFBRTtnQkFDRixVQUFVO2dCQUNWLDZGQUE2RjtnQkFDN0YsRUFBRTtnQkFDRixnSEFBZ0g7Z0JBQ2hILEVBQUU7Z0JBQ0YscUdBQXFHO2dCQUNyRyxxR0FBcUc7Z0JBQ3JHLCtGQUErRjtnQkFDL0Ysb0ZBQW9GO2dCQUNwRix1RkFBdUY7Z0JBQ3ZGLHNGQUFzRjtnQkFDdEYscUdBQXFHO2dCQUNyRyxxR0FBcUc7Z0JBQ3JHLG9GQUFvRjtnQkFDcEYsdUZBQXVGO2dCQUN2RixzRkFBc0Y7Z0JBQ3RGLHFHQUFxRztnQkFDckcscUdBQXFHO2dCQUNyRyxFQUFFO2dCQUNGLFlBQVk7Z0JBQ1osRUFBRTtnQkFDRixtQkFBbUI7Z0JBQ25CLEVBQUU7Z0JBQ0Ysa0RBQWtEO2dCQUNsRCxFQUFFO2dCQUNGLFNBQVM7Z0JBQ1QsZUFBZTtnQkFDZixLQUFLO2dCQUNMLEVBQUU7Z0JBQ0YsVUFBVTtnQkFDViwrQ0FBK0M7Z0JBQy9DLEVBQUU7Z0JBQ0YsbUJBQW1CO2dCQUNuQixFQUFFO2dCQUNGLHlDQUF5QztnQkFDekMsd0NBQXdDO2dCQUN4QyxFQUFFO2dCQUNGLFNBQVM7Z0JBQ1QsZUFBZTtnQkFDZixLQUFLO2dCQUNMLEVBQUU7Z0JBQ0YseUJBQXlCO2dCQUN6QixxREFBcUQ7Z0JBQ3JELEVBQUU7Z0JBQ0Ysa0NBQWtDO2dCQUNsQyxFQUFFO2dCQUNGLDJHQUEyRztnQkFDM0csRUFBRTtnQkFDRix1QkFBdUI7Z0JBQ3ZCLEVBQUU7Z0JBQ0YseUhBQXlIO2dCQUN6SCw0REFBNEQ7Z0JBQzVELHdGQUF3RjtnQkFDeEYsMkZBQTJGO2dCQUMzRixFQUFFO2dCQUNGLGNBQWM7Z0JBQ2QsbUhBQW1IO2dCQUNuSCxFQUFFO2dCQUNGLGNBQWM7Z0JBQ2Qsa0ZBQWtGO2dCQUNsRix5QkFBeUI7Z0JBQ3pCLHlCQUF5QjtnQkFDekIseUJBQXlCO2dCQUN6QixFQUFFO2dCQUNGLHlDQUF5QztnQkFDekMsRUFBRTtnQkFDRixnSEFBZ0g7Z0JBQ2hILGtHQUFrRztnQkFDbEcsMkVBQTJFO2dCQUMzRSxFQUFFO2dCQUNGLFVBQVU7Z0JBQ1YsOEhBQThIO2dCQUM5SCxFQUFFO2dCQUNGLGdDQUFnQztnQkFDaEMsRUFBRTtnQkFDRixjQUFjO2dCQUNkLEVBQUU7Z0JBQ0YsOENBQThDO2dCQUM5QyxFQUFFO2dCQUNGLFdBQVc7Z0JBQ1gsMENBQTBDO2dCQUMxQyxFQUFFO2dCQUNGLFVBQVU7Z0JBQ1YsMEJBQTBCO2dCQUMxQixXQUFXO2dCQUNYLHdCQUF3QjtnQkFDeEIsT0FBTztnQkFDUCxFQUFFO2dCQUNGLFlBQVk7Z0JBQ1osRUFBRTtnQkFDRixpREFBaUQ7Z0JBQ2pELEVBQUU7Z0JBQ0YsV0FBVztnQkFDWCx3Q0FBd0M7Z0JBQ3hDLEVBQUU7Z0JBQ0YsVUFBVTtnQkFDVix3QkFBd0I7Z0JBQ3hCLFdBQVc7Z0JBQ1gsc0JBQXNCO2dCQUN0QixPQUFPO2dCQUNQLEVBQUU7Z0JBQ0YsaUJBQWlCO2dCQUNqQixFQUFFO2dCQUNGLHNEQUFzRDtnQkFDdEQsRUFBRTtnQkFDRixpQkFBaUI7Z0JBQ2pCLEVBQUU7Z0JBQ0YsdURBQXVEO2dCQUN2RCxFQUFFO2dCQUNGLFdBQVc7Z0JBQ1gsRUFBRTtnQkFDRix1RUFBdUU7Z0JBQ3ZFLEVBQUU7Z0JBQ0YsWUFBWTtnQkFDWixFQUFFO2dCQUNGLHNCQUFzQjtnQkFDdEIsc0JBQXNCO2dCQUN0QixFQUFFO2dCQUNGLHFFQUFxRTthQUN0RSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7WUFDWixnQkFBZ0I7U0FDakIsQ0FBQztJQUNKLENBQUM7Q0FDRjtBQS9LRCx3REErS0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDYXBTZXJ2aWNlUHJvamVjdE9wdGlvbnMgfSBmcm9tICcuLi9wcm9qZWN0JztcblxuaW50ZXJmYWNlIFJlYWRtZUNvbmZpZyB7XG4gIGdldFJlYWRtZShvcHRpb25zOiBDYXBTZXJ2aWNlUHJvamVjdE9wdGlvbnMpOiB7IGZpbGVuYW1lOiBzdHJpbmc7IGNvbnRlbnRzOiBzdHJpbmcgfTtcbn1cblxuLyoqXG4gKiBJbXBsZW1lbnRpbmcgYWxsIHJlbGV2YW50IFJlYWRtZSBjb25maWd1cmF0aW9uIGZvciB0aGUgQ2FwU2VydmljZSBwcm9qZWN0LlxuICogV2UgZG8gbm90IGV4dGVuZCBCYXNlIGNvbmZpZyBjbGFzc2VzIGFzIHRoaXMgaXMgYSBzcGVjaWFsIGNhc2UuXG4gKi9cbmV4cG9ydCBjbGFzcyBSZWFkbWVDb25maWdDYXBTZXJ2aWNlIGltcGxlbWVudHMgUmVhZG1lQ29uZmlnIHtcbiAgcHVibGljIGdldFJlYWRtZShvcHRpb25zOiBDYXBTZXJ2aWNlUHJvamVjdE9wdGlvbnMpOiB7IGZpbGVuYW1lOiBzdHJpbmc7IGNvbnRlbnRzOiBzdHJpbmcgfSB7XG4gICAgLy8gU3RhcnQgUkVBRE1FLm1kXG4gICAgcmV0dXJuIHtcbiAgICAgIGZpbGVuYW1lOiAnUkVBRE1FLm1kJyxcbiAgICAgIGNvbnRlbnRzOiBbXG4gICAgICAgIGAjICR7b3B0aW9ucy5uYW1lfWAsXG4gICAgICAgICcnLFxuICAgICAgICBgJHtvcHRpb25zLmRlc2NyaXB0aW9ufWAsXG4gICAgICAgICcnLFxuICAgICAgICAnIyBUYWJsZSBvZiBDb250ZW50cycsXG4gICAgICAgICcnLFxuICAgICAgICBgLSBbJHtvcHRpb25zLm5hbWV9XSgjJHtvcHRpb25zLm5hbWV9KWAsXG4gICAgICAgICctIFtUYWJsZSBvZiBDb250ZW50c10oI3RhYmxlLW9mLWNvbnRlbnRzKScsXG4gICAgICAgICcgIC0gW1ByZXJlcXVpc2l0ZXNdKCNwcmVyZXF1aXNpdGVzKScsXG4gICAgICAgICcgIC0gW2BJbnN0YWxsYXRpb25gXSgjaW5zdGFsbGF0aW9uKScsXG4gICAgICAgICcgIC0gW2BVc2FnZWBdKCN1c2FnZSknLFxuICAgICAgICAnICAgIC0gW1N0YXJ0IGxvY2FsbHldKCNzdGFydC1sb2NhbGx5KScsXG4gICAgICAgICcgICAgLSBbRGVidWcgbG9jYWxseV0oI2RlYnVnLWxvY2FsbHkpJyxcbiAgICAgICAgJyAgICAtIFtEZXBsb3kgKGBERVZgLCBgUUFgLCBgUFJPRGApXSgjZGVwbG95LWRldi1xYS1wcm9kKScsXG4gICAgICAgICcgICAgICAtIFtEZXBsb3ltZW50IHN0ZXBzXSgjZGVwbG95bWVudC1zdGVwcyknLFxuICAgICAgICAnICAgICAgLSBbYEJyYW5jaC1TcGVjaWZpY2AgZGVwbG95bWVudCBydWxlc10oI2JyYW5jaC1zcGVjaWZpYy1kZXBsb3ltZW50LXJ1bGVzKScsXG4gICAgICAgICcgIC0gW1Byb2plY3QgdG9vbHMgYW5kIHV0aWxpdGllc10oI3Byb2plY3QtdG9vbHMtYW5kLXV0aWxpdGllcyknLFxuICAgICAgICAnICAgIC0gW1ByZXR0aWVyXSgjcHJldHRpZXIpJyxcbiAgICAgICAgJyAgICAtIFtFU0xpbnRdKCNlc2xpbnQpJyxcbiAgICAgICAgJyAgICAtIFtMaW50LXN0YWdlZF0oI2xpbnQtc3RhZ2VkKScsXG4gICAgICAgICcgICAgLSBbQ29tbWl0LUxpbnRdKCNjb21taXQtbGludCknLFxuICAgICAgICAnICAgIC0gW0h1c2t5XSgjaHVza3kpJyxcbiAgICAgICAgJyAgLSBbQXV0aG9yc10oI2F1dGhvcnMpJyxcbiAgICAgICAgJycsXG4gICAgICAgICcjIyBQcmVyZXF1aXNpdGVzJyxcbiAgICAgICAgJycsXG4gICAgICAgICdJbnN0YWxsIFsqKkBzYXAvY2RzLWRrKipdKGh0dHBzOi8vY2FwLmNsb3VkLnNhcC9kb2NzL2dldC1zdGFydGVkLyksIFt0eXBlc2NyaXB0XShodHRwczovL3d3dy50eXBlc2NyaXB0bGFuZy5vcmcvKSwgW3RzLW5vZGVdKGh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL3RzLW5vZGUpIGdsb2JhbGx5OicsXG4gICAgICAgICcnLFxuICAgICAgICAnYGBgYmFzaCcsXG4gICAgICAgICducG0gaW5zdGFsbCAtZyBAc2FwL2Nkcy1kayB0eXBlc2NyaXB0IHRzLW5vZGUnLFxuICAgICAgICAnYGBgJyxcbiAgICAgICAgJycsXG4gICAgICAgICcjIyBgSW5zdGFsbGF0aW9uYCcsXG4gICAgICAgICcnLFxuICAgICAgICAnMS4gQWZ0ZXIgZ2VuZXJhdGluZyB0aGUgcHJvamVjdCB1c2luZyBgcHJvamVuYCwgaW5zdGFsbCB0aGUgcmVxdWlyZWQgZGVwZW5kZW5jaWVzIGJ5IHJ1bm5pbmc6JyxcbiAgICAgICAgJycsXG4gICAgICAgICdgYGBiYXNoJyxcbiAgICAgICAgJ25wbSBpbnN0YWxsJyxcbiAgICAgICAgJ2BgYCcsXG4gICAgICAgICcnLFxuICAgICAgICAnMi4gQ3JlYXRlIHRoZSBmb2xsb3dpbmcgdGhyZWUgbGFiZWxzIGluIHlvdXIgcmVwb3NpdG9yeSBieSBuYXZpZ2F0aW5nIHRvIGBQdWxsIFJlcXVlc3RzYCA+IGBMYWJlbHNgID4gYE5ldyBMYWJlbGA6JyxcbiAgICAgICAgJycsXG4gICAgICAgICcgICAtICoqcGF0Y2gqKicsXG4gICAgICAgICcgICAtICoqbWlub3IqKicsXG4gICAgICAgICcgICAtICoqbWFqb3IqKicsXG4gICAgICAgICcnLFxuICAgICAgICAnPiBbIVRJUF0nLFxuICAgICAgICAnPiBGb3IgbW9yZSBpbmZvIGFib3V0IGBTZW1WZXIgKE1BSk9SLk1JTk9SLlBBVENIKWAsIHZpc2l0IFtTZW1WZXIub3JnXShodHRwczovL3NlbXZlci5vcmcvKScsXG4gICAgICAgICcnLFxuICAgICAgICAnMy4gVGhlIGZvbGxvd2luZyBzZWNyZXRzIG11c3QgYmUgY3JlYXRlZCBpbiB5b3VyIEdpdEh1YiByZXBvc2l0b3J5IHRvIGVuYWJsZSB0aGUgYXV0b21hdGljIGRlcGxveW1lbnQgcHJvY2VzczonLFxuICAgICAgICAnJyxcbiAgICAgICAgJ3wgUGFyYW1ldGVyICAgICAgIHwgRGVzY3JpcHRpb24gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCcsXG4gICAgICAgICd8IC0tLS0tLS0tLS0tLS0tLSB8IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIHwnLFxuICAgICAgICAnfCBgQ0ZfSUFTX09SSUdJTmAgfCBUaGUgb3JpZ2luIHVzZWQgZm9yIElBUyBhdXRoZW50aWNhdGlvbiB3aGVuIGxvZ2dpbmcgaW50byBDbG91ZCBGb3VuZHJ5LiB8JyxcbiAgICAgICAgJ3wgYENGX0FQSV9ERVZgIHwgVGhlIEFQSSBlbmRwb2ludCBmb3IgdGhlIGRldmVsb3BtZW50IENsb3VkIEZvdW5kcnkgZW52aXJvbm1lbnQuIHwnLFxuICAgICAgICAnfCBgQ0ZfT1JHX0RFVmAgfCBUaGUgb3JnYW5pemF0aW9uIGZvciB0aGUgZGV2ZWxvcG1lbnQgZW52aXJvbm1lbnQgaW4gQ2xvdWQgRm91bmRyeS4gfCcsXG4gICAgICAgICd8IGBDRl9TUEFDRV9ERVZgIHwgVGhlIHNwYWNlIHdpdGhpbiB0aGUgZGV2ZWxvcG1lbnQgb3JnYW5pemF0aW9uIGluIENsb3VkIEZvdW5kcnkuIHwnLFxuICAgICAgICAnfCBgQ0ZfVVNFUk5BTUVfREVWYCB8IFRoZSB1c2VybmFtZSBmb3IgbG9nZ2luZyBpbnRvIHRoZSBkZXZlbG9wbWVudCBlbnZpcm9ubWVudCBpbiBDbG91ZCBGb3VuZHJ5LiB8JyxcbiAgICAgICAgJ3wgYENGX1BBU1NXT1JEX0RFVmAgfCBUaGUgcGFzc3dvcmQgZm9yIGxvZ2dpbmcgaW50byB0aGUgZGV2ZWxvcG1lbnQgZW52aXJvbm1lbnQgaW4gQ2xvdWQgRm91bmRyeS4gfCcsXG4gICAgICAgICd8IGBDRl9BUElfUFJPRGAgfCBUaGUgQVBJIGVuZHBvaW50IGZvciB0aGUgcHJvZHVjdGlvbiBDbG91ZCBGb3VuZHJ5IGVudmlyb25tZW50LiB8JyxcbiAgICAgICAgJ3wgYENGX09SR19QUk9EYCB8IFRoZSBvcmdhbml6YXRpb24gZm9yIHRoZSBwcm9kdWN0aW9uIGVudmlyb25tZW50IGluIENsb3VkIEZvdW5kcnkuIHwnLFxuICAgICAgICAnfCBgQ0ZfU1BBQ0VfUFJPRGAgfCBUaGUgc3BhY2Ugd2l0aGluIHRoZSBwcm9kdWN0aW9uIG9yZ2FuaXphdGlvbiBpbiBDbG91ZCBGb3VuZHJ5LiB8JyxcbiAgICAgICAgJ3wgYENGX1VTRVJOQU1FX1BST0RgIHwgVGhlIHVzZXJuYW1lIGZvciBsb2dnaW5nIGludG8gdGhlIHByb2R1Y3Rpb24gZW52aXJvbm1lbnQgaW4gQ2xvdWQgRm91bmRyeS4gfCcsXG4gICAgICAgICd8IGBDRl9QQVNTV09SRF9QUk9EYCB8IFRoZSBwYXNzd29yZCBmb3IgbG9nZ2luZyBpbnRvIHRoZSBwcm9kdWN0aW9uIGVudmlyb25tZW50IGluIENsb3VkIEZvdW5kcnkuIHwnLFxuICAgICAgICAnJyxcbiAgICAgICAgJyMjIGBVc2FnZWAnLFxuICAgICAgICAnJyxcbiAgICAgICAgJyMjIyBTdGFydCBsb2NhbGx5JyxcbiAgICAgICAgJycsXG4gICAgICAgICdTdGFydCB0aGUgQ0FQIHNlcnZlciBpbiB3YXRjaCBtb2RlIChob3QtcmVsb2FkKTonLFxuICAgICAgICAnJyxcbiAgICAgICAgJ2BgYGJhc2gnLFxuICAgICAgICAnbnBtIHJ1biB3YXRjaCcsXG4gICAgICAgICdgYGAnLFxuICAgICAgICAnJyxcbiAgICAgICAgJz4gWyFUSVBdJyxcbiAgICAgICAgJz4gQWNjZXNzIHRoZSBzZXJ2aWNlIGF0IGh0dHA6Ly9sb2NhbGhvc3Q6NDAwNCcsXG4gICAgICAgICcnLFxuICAgICAgICAnIyMjIERlYnVnIGxvY2FsbHknLFxuICAgICAgICAnJyxcbiAgICAgICAgJzEuIEFkZCBicmVha3BvaW50cyBpbiB5b3VyIGAudHNgIGZpbGVzLicsXG4gICAgICAgICcyLiBTdGFydCB0aGUgQ0FQIHNlcnZlciBpbiBkZWJ1ZyBtb2RlOicsXG4gICAgICAgICcnLFxuICAgICAgICAnYGBgYmFzaCcsXG4gICAgICAgICducG0gcnVuIHdhdGNoJyxcbiAgICAgICAgJ2BgYCcsXG4gICAgICAgICcnLFxuICAgICAgICAnMy4gUmVmcmVzaCB0aGUgc2VydmljZS4nLFxuICAgICAgICAnNC4gVGhlIGRlYnVnZ2VyIHNob3VsZCBzdG9wIGF0IHRoZSBicmVha3BvaW50IGxpbmUuJyxcbiAgICAgICAgJycsXG4gICAgICAgICcjIyMgRGVwbG95IChgREVWYCwgYFFBYCwgYFBST0RgKScsXG4gICAgICAgICcnLFxuICAgICAgICAnVGhlIGRlcGxveW1lbnQgcHJvY2VzcyBpcyBhdXRvbWF0aWNhbGx5IHRyaWdnZXJlZCB3aGVuIGEgYFBVTEwgUkVRVUVTVGAgaXMgbWVyZ2VkIGludG8gdGhlIGBtYWluYCBicmFuY2guJyxcbiAgICAgICAgJycsXG4gICAgICAgICcjIyMjIERlcGxveW1lbnQgc3RlcHMnLFxuICAgICAgICAnJyxcbiAgICAgICAgJy0gYFZlcnNpb24gQnVtcGA6IFRoZSBgcGFja2FnZS5qc29uYCB2ZXJzaW9uIGlzIGluY3JlbWVudGVkIGJhc2VkIG9uIHRoZSBzZWxlY3RlZCBsYWJlbCAoYHBhdGNoYCwgYG1pbm9yYCwgb3IgYG1ham9yYCkuJyxcbiAgICAgICAgJy0gYEdpdEh1YiBUYWdzYDogQSBuZXcgdGFnIGlzIGNyZWF0ZWQgdG8gbWFyayB0aGUgcmVsZWFzZS4nLFxuICAgICAgICAnLSBgR2l0SHViIFJlbGVhc2VgOiBBIHJlbGVhc2UgaXMgcHVibGlzaGVkIGluIHRoZSByZXBvc2l0b3J5LCBzdW1tYXJpemluZyB0aGUgY2hhbmdlcy4nLFxuICAgICAgICAnLSBgQ2hhbmdlbG9nIFVwZGF0ZWA6IFRoZSBgQ0hBTkdFTE9HLm1kYCBmaWxlIGlzIHVwZGF0ZWQgd2l0aCB0aGUgbGF0ZXN0IGNvbW1pdCBtZXNzYWdlcy4nLFxuICAgICAgICAnJyxcbiAgICAgICAgJz4gWyFDQVVUSU9OXScsXG4gICAgICAgICc+IFNlY3JldHMgZnJvbSBpbnN0YWxsYXRpb24gcHJvY2VzcyBhcmUgcmVxdWlyZWQgZm9yIGF1dG9tYXRpYyBkZXBsb3ltZW50LiBTZWUgKipbaW5zdGFsbGF0aW9uXSgjaW5zdGFsbGF0aW9uKSoqLicsXG4gICAgICAgICcnLFxuICAgICAgICAnPiBbIUNBVVRJT05dJyxcbiAgICAgICAgJz4gRXZlcnkgYFBVTEwgUkVRVUVTVGAgbWVyZ2VkIGludG8gYG1haW5gIG11c3QgaGF2ZSBvbmUgb2YgdGhlIGZvbGxvd2luZyBsYWJlbHM6JyxcbiAgICAgICAgJz4gLSBgcGF0Y2hgICoqKDAuMC54KSoqJyxcbiAgICAgICAgJz4gLSBgbWlub3JgICoqKDAueC4wKSoqJyxcbiAgICAgICAgJz4gLSBgbWFqb3JgICoqKHguMC4wKSoqJyxcbiAgICAgICAgJycsXG4gICAgICAgICcjIyMjIGBCcmFuY2gtU3BlY2lmaWNgIGRlcGxveW1lbnQgcnVsZXMnLFxuICAgICAgICAnJyxcbiAgICAgICAgJy0gYERldmVsb3BtZW50IChERVYpYDogQ2hhbmdlcyBtZXJnZWQgaW50byB0aGUgYGRldmAgYnJhbmNoIHRyaWdnZXIgZGVwbG95bWVudCB0byB0aGUgZGV2ZWxvcG1lbnQgZW52aXJvbm1lbnQuJyxcbiAgICAgICAgJy0gYFF1YWxpdHkgQXNzdXJhbmNlIChRQSlgOiBNZXJnaW5nIGNoYW5nZXMgaW50byBgcWFgIHRyaWdnZXJzIGRlcGxveW1lbnQgdG8gdGhlIFFBIGVudmlyb25tZW50LicsXG4gICAgICAgICctIGBQcm9kdWN0aW9uIChQUk9EKWA6IE1lcmdpbmcgY2hhbmdlcyBpbnRvIGBwcm9kYCBkZXBsb3lzIHRvIHByb2R1Y3Rpb24uJyxcbiAgICAgICAgJycsXG4gICAgICAgICc+IFshVElQXScsXG4gICAgICAgICc+IFRvIGRlcGxveSBhbGwgZW52aXJvbm1lbnRzIChgREVWYCwgYFFBYCwgYFBST0RgKSwgbWFpbnRhaW4gYGRldmAsIGBxYWAsIGFuZCBgcHJvZGAgYnJhbmNoZXMgYW5kIG1lcmdlIGNoYW5nZXMgYWNjb3JkaW5nbHkuJyxcbiAgICAgICAgJycsXG4gICAgICAgICcjIyBQcm9qZWN0IHRvb2xzIGFuZCB1dGlsaXRpZXMnLFxuICAgICAgICAnJyxcbiAgICAgICAgJyMjIyBQcmV0dGllcicsXG4gICAgICAgICcnLFxuICAgICAgICAnQSBjb2RlIGZvcm1hdHRlciBlbmZvcmNpbmcgY29uc2lzdGVudCBzdHlsZS4nLFxuICAgICAgICAnJyxcbiAgICAgICAgJz4gWyFOT1RFXScsXG4gICAgICAgICc+IFByZXR0aWVyIHJ1bnMgYXV0b21hdGljYWxseSBvbiBjb21taXQuJyxcbiAgICAgICAgJycsXG4gICAgICAgICc+IFshVElQXScsXG4gICAgICAgICc+IE1hbnVhbGx5IHJ1biBQcmV0dGllcjonLFxuICAgICAgICAnPiBgYGBiYXNoJyxcbiAgICAgICAgJz4gbnBtIHJ1biBwcmV0dGllcjpmaXgnLFxuICAgICAgICAnPiBgYGAnLFxuICAgICAgICAnJyxcbiAgICAgICAgJyMjIyBFU0xpbnQnLFxuICAgICAgICAnJyxcbiAgICAgICAgJ0EgbGludGVyIGVuZm9yY2luZyBUeXBlU2NyaXB0IGNvZGluZyBzdGFuZGFyZHMuJyxcbiAgICAgICAgJycsXG4gICAgICAgICc+IFshTk9URV0nLFxuICAgICAgICAnPiBFU0xpbnQgcnVucyBhdXRvbWF0aWNhbGx5IG9uIGNvbW1pdC4nLFxuICAgICAgICAnJyxcbiAgICAgICAgJz4gWyFUSVBdJyxcbiAgICAgICAgJz4gTWFudWFsbHkgcnVuIEVTTGludDonLFxuICAgICAgICAnPiBgYGBiYXNoJyxcbiAgICAgICAgJz4gbnBtIHJ1biBlc2xpbnQ6Zml4JyxcbiAgICAgICAgJz4gYGBgJyxcbiAgICAgICAgJycsXG4gICAgICAgICcjIyMgTGludC1zdGFnZWQnLFxuICAgICAgICAnJyxcbiAgICAgICAgJ1J1bnMgbGludGVycyBvbmx5IG9uIHN0YWdlZCBmaWxlcyBiZWZvcmUgY29tbWl0dGluZy4nLFxuICAgICAgICAnJyxcbiAgICAgICAgJyMjIyBDb21taXQtTGludCcsXG4gICAgICAgICcnLFxuICAgICAgICAnRW5zdXJlcyBjb21taXQgbWVzc2FnZXMgZm9sbG93IGEgY29udmVudGlvbmFsIGZvcm1hdC4nLFxuICAgICAgICAnJyxcbiAgICAgICAgJyMjIyBIdXNreScsXG4gICAgICAgICcnLFxuICAgICAgICAnTWFuYWdlcyBHaXQgaG9va3MgZm9yIGF1dG9tYXRlZCB0YXNrcyAoZS5nLiwgcnVubmluZyB0ZXN0cywgbGludGVycykuJyxcbiAgICAgICAgJycsXG4gICAgICAgICcjIyBBdXRob3JzJyxcbiAgICAgICAgJycsXG4gICAgICAgICctIFtAQXV0aG9yMV0oI2xpbmsxKScsXG4gICAgICAgICctIFtAQXV0aG9yMl0oI2xpbmsyKScsXG4gICAgICAgICcnLFxuICAgICAgICAnPHAgYWxpZ249XCJyaWdodFwiPig8YSBocmVmPVwiI3RhYmxlLW9mLWNvbnRlbnRzXCI+YmFjayB0byB0b3A8L2E+KTwvcD4nLFxuICAgICAgXS5qb2luKCdcXG4nKSxcbiAgICAgIC8vIEVuZCBSRUFETUUubWRcbiAgICB9O1xuICB9XG59XG4iXX0=