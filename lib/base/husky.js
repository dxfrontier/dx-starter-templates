"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.HuskyBase = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const projen_1 = require("projen");
const builder_1 = require("./builder");
/**
 * Base class for Husky builder implementing all relevant configuration.
 * @abstract
 */
class HuskyBase extends builder_1.Builder {
    /**
     * Initializes the Husky builder.
     * @param project The project to configure Husky for.
     */
    constructor(project) {
        super(project);
    }
    /**
     * File path to the Husky commit-msg hook.
     * @protected
     */
    get commitMsgFilePath() {
        return '.husky/commit-msg';
    }
    /**
     * File path to the Husky pre-commit hook.
     * @protected
     */
    get preCommitFilePath() {
        return '.husky/pre-commit';
    }
    /**
     * Commit-msg hook template for the Husky configuration.
     * @protected
     */
    get commitMsgTemplate() {
        return [
            '# Generated by projen.To modify, edit.projenrc.ts and run "npx projen".',
            '',
            'npx --no-install commitlint --edit "$1"',
        ];
    }
    /**
     * Pre-commit hook template for the Husky configuration.
     * @protected
     */
    get preCommitTemplate() {
        return ['# Generated by projen.To modify, edit.projenrc.ts and run "npx projen".', '', 'npx lint-staged'];
    }
    /**
     * NPM scripts for the CommitLint builder.
     * @protected
     */
    get scripts() {
        return {
            prepare: 'husky || true',
        };
    }
    /**
     * NPM packages to be installed as devDependencies for the CommitLint builder.
     * @protected
     */
    get devDependencies() {
        return ['husky'];
    }
    /**
     * Creates the template file for the Husky commit-msg hook.
     * @private
     */
    createCommitMsgHook() {
        new projen_1.TextFile(this.project, this.commitMsgFilePath, {
            lines: this.commitMsgTemplate,
        });
    }
    /**
     * Creates the template file for the Husky pre-commit hook.
     * @private
     */
    createPreCommitHook() {
        new projen_1.TextFile(this.project, this.preCommitFilePath, {
            lines: this.preCommitTemplate,
        });
    }
    addTemplates() {
        this.createCommitMsgHook();
        this.createPreCommitHook();
    }
    addScripts() {
        for (const [name, command] of Object.entries(this.scripts)) {
            this.project.addTask(name, { exec: command });
        }
    }
    addDevDependencies() {
        this.project.addDevDeps(...this.devDependencies);
    }
    addGitAttributes() {
        this.project.gitattributes.addAttributes(`/${this.commitMsgFilePath}`, 'linguist-generated');
        this.project.gitattributes.addAttributes(`/${this.preCommitFilePath}`, 'linguist-generated');
    }
}
exports.HuskyBase = HuskyBase;
_a = JSII_RTTI_SYMBOL_1;
HuskyBase[_a] = { fqn: "projen-template-projects.HuskyBase", version: "0.0.0" };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHVza3kuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvYmFzZS9odXNreS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLG1DQUFrQztBQUNsQyx1Q0FBb0M7QUFJcEM7OztHQUdHO0FBQ0gsTUFBc0IsU0FBVSxTQUFRLGlCQUFPO0lBQzdDOzs7T0FHRztJQUNILFlBQVksT0FBOEI7UUFDeEMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ2pCLENBQUM7SUFFRDs7O09BR0c7SUFDSCxJQUFjLGlCQUFpQjtRQUM3QixPQUFPLG1CQUFtQixDQUFDO0lBQzdCLENBQUM7SUFFRDs7O09BR0c7SUFDSCxJQUFjLGlCQUFpQjtRQUM3QixPQUFPLG1CQUFtQixDQUFDO0lBQzdCLENBQUM7SUFFRDs7O09BR0c7SUFDSCxJQUFjLGlCQUFpQjtRQUM3QixPQUFPO1lBQ0wseUVBQXlFO1lBQ3pFLEVBQUU7WUFDRix5Q0FBeUM7U0FDMUMsQ0FBQztJQUNKLENBQUM7SUFFRDs7O09BR0c7SUFDSCxJQUFjLGlCQUFpQjtRQUM3QixPQUFPLENBQUMseUVBQXlFLEVBQUUsRUFBRSxFQUFFLGlCQUFpQixDQUFDLENBQUM7SUFDNUcsQ0FBQztJQUVEOzs7T0FHRztJQUNILElBQWMsT0FBTztRQUNuQixPQUFPO1lBQ0wsT0FBTyxFQUFFLGVBQWU7U0FDekIsQ0FBQztJQUNKLENBQUM7SUFFRDs7O09BR0c7SUFDSCxJQUFjLGVBQWU7UUFDM0IsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ25CLENBQUM7SUFFRDs7O09BR0c7SUFDSyxtQkFBbUI7UUFDekIsSUFBSSxpQkFBUSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLGlCQUFpQixFQUFFO1lBQ2pELEtBQUssRUFBRSxJQUFJLENBQUMsaUJBQWlCO1NBQzlCLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRDs7O09BR0c7SUFDSyxtQkFBbUI7UUFDekIsSUFBSSxpQkFBUSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLGlCQUFpQixFQUFFO1lBQ2pELEtBQUssRUFBRSxJQUFJLENBQUMsaUJBQWlCO1NBQzlCLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFUyxZQUFZO1FBQ3BCLElBQUksQ0FBQyxtQkFBbUIsRUFBRSxDQUFDO1FBQzNCLElBQUksQ0FBQyxtQkFBbUIsRUFBRSxDQUFDO0lBQzdCLENBQUM7SUFFUyxVQUFVO1FBQ2xCLEtBQUssTUFBTSxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsSUFBSSxNQUFNLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDO1lBQzNELElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFDO1FBQ2hELENBQUM7SUFDSCxDQUFDO0lBRVMsa0JBQWtCO1FBQzFCLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDO0lBQ25ELENBQUM7SUFFUyxnQkFBZ0I7UUFDeEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsYUFBYSxDQUFDLElBQUksSUFBSSxDQUFDLGlCQUFpQixFQUFFLEVBQUUsb0JBQW9CLENBQUMsQ0FBQztRQUM3RixJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxhQUFhLENBQUMsSUFBSSxJQUFJLENBQUMsaUJBQWlCLEVBQUUsRUFBRSxvQkFBb0IsQ0FBQyxDQUFDO0lBQy9GLENBQUM7O0FBckdILDhCQXNHQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFRleHRGaWxlIH0gZnJvbSAncHJvamVuJztcbmltcG9ydCB7IEJ1aWxkZXIgfSBmcm9tICcuL2J1aWxkZXInO1xuaW1wb3J0IHsgU2NyaXB0cyB9IGZyb20gJy4uL3R5cGVzJztcbmltcG9ydCB7IFR5cGVTY3JpcHRQcm9qZWN0QmFzZSB9IGZyb20gJy4vcHJvamVjdCc7XG5cbi8qKlxuICogQmFzZSBjbGFzcyBmb3IgSHVza3kgYnVpbGRlciBpbXBsZW1lbnRpbmcgYWxsIHJlbGV2YW50IGNvbmZpZ3VyYXRpb24uXG4gKiBAYWJzdHJhY3RcbiAqL1xuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEh1c2t5QmFzZSBleHRlbmRzIEJ1aWxkZXIge1xuICAvKipcbiAgICogSW5pdGlhbGl6ZXMgdGhlIEh1c2t5IGJ1aWxkZXIuXG4gICAqIEBwYXJhbSBwcm9qZWN0IFRoZSBwcm9qZWN0IHRvIGNvbmZpZ3VyZSBIdXNreSBmb3IuXG4gICAqL1xuICBjb25zdHJ1Y3Rvcihwcm9qZWN0OiBUeXBlU2NyaXB0UHJvamVjdEJhc2UpIHtcbiAgICBzdXBlcihwcm9qZWN0KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBGaWxlIHBhdGggdG8gdGhlIEh1c2t5IGNvbW1pdC1tc2cgaG9vay5cbiAgICogQHByb3RlY3RlZFxuICAgKi9cbiAgcHJvdGVjdGVkIGdldCBjb21taXRNc2dGaWxlUGF0aCgpOiBzdHJpbmcge1xuICAgIHJldHVybiAnLmh1c2t5L2NvbW1pdC1tc2cnO1xuICB9XG5cbiAgLyoqXG4gICAqIEZpbGUgcGF0aCB0byB0aGUgSHVza3kgcHJlLWNvbW1pdCBob29rLlxuICAgKiBAcHJvdGVjdGVkXG4gICAqL1xuICBwcm90ZWN0ZWQgZ2V0IHByZUNvbW1pdEZpbGVQYXRoKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuICcuaHVza3kvcHJlLWNvbW1pdCc7XG4gIH1cblxuICAvKipcbiAgICogQ29tbWl0LW1zZyBob29rIHRlbXBsYXRlIGZvciB0aGUgSHVza3kgY29uZmlndXJhdGlvbi5cbiAgICogQHByb3RlY3RlZFxuICAgKi9cbiAgcHJvdGVjdGVkIGdldCBjb21taXRNc2dUZW1wbGF0ZSgpOiBzdHJpbmdbXSB7XG4gICAgcmV0dXJuIFtcbiAgICAgICcjIEdlbmVyYXRlZCBieSBwcm9qZW4uVG8gbW9kaWZ5LCBlZGl0LnByb2plbnJjLnRzIGFuZCBydW4gXCJucHggcHJvamVuXCIuJyxcbiAgICAgICcnLFxuICAgICAgJ25weCAtLW5vLWluc3RhbGwgY29tbWl0bGludCAtLWVkaXQgXCIkMVwiJyxcbiAgICBdO1xuICB9XG5cbiAgLyoqXG4gICAqIFByZS1jb21taXQgaG9vayB0ZW1wbGF0ZSBmb3IgdGhlIEh1c2t5IGNvbmZpZ3VyYXRpb24uXG4gICAqIEBwcm90ZWN0ZWRcbiAgICovXG4gIHByb3RlY3RlZCBnZXQgcHJlQ29tbWl0VGVtcGxhdGUoKTogc3RyaW5nW10ge1xuICAgIHJldHVybiBbJyMgR2VuZXJhdGVkIGJ5IHByb2plbi5UbyBtb2RpZnksIGVkaXQucHJvamVucmMudHMgYW5kIHJ1biBcIm5weCBwcm9qZW5cIi4nLCAnJywgJ25weCBsaW50LXN0YWdlZCddO1xuICB9XG5cbiAgLyoqXG4gICAqIE5QTSBzY3JpcHRzIGZvciB0aGUgQ29tbWl0TGludCBidWlsZGVyLlxuICAgKiBAcHJvdGVjdGVkXG4gICAqL1xuICBwcm90ZWN0ZWQgZ2V0IHNjcmlwdHMoKTogU2NyaXB0cyB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHByZXBhcmU6ICdodXNreSB8fCB0cnVlJyxcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIE5QTSBwYWNrYWdlcyB0byBiZSBpbnN0YWxsZWQgYXMgZGV2RGVwZW5kZW5jaWVzIGZvciB0aGUgQ29tbWl0TGludCBidWlsZGVyLlxuICAgKiBAcHJvdGVjdGVkXG4gICAqL1xuICBwcm90ZWN0ZWQgZ2V0IGRldkRlcGVuZGVuY2llcygpOiBzdHJpbmdbXSB7XG4gICAgcmV0dXJuIFsnaHVza3knXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIHRoZSB0ZW1wbGF0ZSBmaWxlIGZvciB0aGUgSHVza3kgY29tbWl0LW1zZyBob29rLlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgcHJpdmF0ZSBjcmVhdGVDb21taXRNc2dIb29rKCk6IHZvaWQge1xuICAgIG5ldyBUZXh0RmlsZSh0aGlzLnByb2plY3QsIHRoaXMuY29tbWl0TXNnRmlsZVBhdGgsIHtcbiAgICAgIGxpbmVzOiB0aGlzLmNvbW1pdE1zZ1RlbXBsYXRlLFxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgdGhlIHRlbXBsYXRlIGZpbGUgZm9yIHRoZSBIdXNreSBwcmUtY29tbWl0IGhvb2suXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBwcml2YXRlIGNyZWF0ZVByZUNvbW1pdEhvb2soKTogdm9pZCB7XG4gICAgbmV3IFRleHRGaWxlKHRoaXMucHJvamVjdCwgdGhpcy5wcmVDb21taXRGaWxlUGF0aCwge1xuICAgICAgbGluZXM6IHRoaXMucHJlQ29tbWl0VGVtcGxhdGUsXG4gICAgfSk7XG4gIH1cblxuICBwcm90ZWN0ZWQgYWRkVGVtcGxhdGVzKCk6IHZvaWQge1xuICAgIHRoaXMuY3JlYXRlQ29tbWl0TXNnSG9vaygpO1xuICAgIHRoaXMuY3JlYXRlUHJlQ29tbWl0SG9vaygpO1xuICB9XG5cbiAgcHJvdGVjdGVkIGFkZFNjcmlwdHMoKTogdm9pZCB7XG4gICAgZm9yIChjb25zdCBbbmFtZSwgY29tbWFuZF0gb2YgT2JqZWN0LmVudHJpZXModGhpcy5zY3JpcHRzKSkge1xuICAgICAgdGhpcy5wcm9qZWN0LmFkZFRhc2sobmFtZSwgeyBleGVjOiBjb21tYW5kIH0pO1xuICAgIH1cbiAgfVxuXG4gIHByb3RlY3RlZCBhZGREZXZEZXBlbmRlbmNpZXMoKTogdm9pZCB7XG4gICAgdGhpcy5wcm9qZWN0LmFkZERldkRlcHMoLi4udGhpcy5kZXZEZXBlbmRlbmNpZXMpO1xuICB9XG5cbiAgcHJvdGVjdGVkIGFkZEdpdEF0dHJpYnV0ZXMoKTogdm9pZCB7XG4gICAgdGhpcy5wcm9qZWN0LmdpdGF0dHJpYnV0ZXMuYWRkQXR0cmlidXRlcyhgLyR7dGhpcy5jb21taXRNc2dGaWxlUGF0aH1gLCAnbGluZ3Vpc3QtZ2VuZXJhdGVkJyk7XG4gICAgdGhpcy5wcm9qZWN0LmdpdGF0dHJpYnV0ZXMuYWRkQXR0cmlidXRlcyhgLyR7dGhpcy5wcmVDb21taXRGaWxlUGF0aH1gLCAnbGluZ3Vpc3QtZ2VuZXJhdGVkJyk7XG4gIH1cbn1cbiJdfQ==