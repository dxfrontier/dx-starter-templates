"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.HuskyBase = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const projen_1 = require("projen");
const builder_1 = require("./builder");
/**
 * Base class for Husky builder implementing all relevant configuration.
 * @abstract
 */
class HuskyBase extends builder_1.Builder {
    /**
     * Initializes the Husky builder.
     * @param project The project to configure Husky for.
     */
    constructor(project) {
        super(project);
    }
    /**
     * File path to the Husky commit-msg hook.
     * @return File path to commit-msg hook file.
     * @protected
     */
    get commitMsgFilePath() {
        return '.husky/commit-msg';
    }
    /**
     * File path to the Husky pre-commit hook.
     * @return File path to pre-commit hook file.
     * @protected
     */
    get preCommitFilePath() {
        return '.husky/pre-commit';
    }
    /**
     * Commit-msg hook template for the Husky configuration.
     * @return Template for the commit-msg hook file.
     * @protected
     */
    get commitMsgTemplate() {
        return [
            '# Generated by projen.To modify, edit.projenrc.ts and run "npx projen".',
            '',
            'npx --no-install commitlint --edit "$1"',
        ];
    }
    /**
     * Pre-commit hook template for the Husky configuration.
     * @return Template for the pre-commit hook file.
     * @protected
     */
    get preCommitTemplate() {
        return ['# Generated by projen.To modify, edit.projenrc.ts and run "npx projen".', '', 'npx lint-staged'];
    }
    /**
     * NPM scripts for the CommitLint builder.
     * @return Npm script entries.
     * @protected
     */
    get scripts() {
        return {
            prepare: 'husky || true',
        };
    }
    /**
     * NPM packages to be installed as devDependencies for the CommitLint builder.
     * @return Npm dev dependencies.
     * @protected
     */
    get devDependencies() {
        return ['husky@^9.1.7'];
    }
    /**
     * Creates the template file for the Husky commit-msg hook.
     * @private
     */
    createCommitMsgHook() {
        new projen_1.TextFile(this.project, this.commitMsgFilePath, {
            lines: this.commitMsgTemplate,
        });
    }
    /**
     * Creates the template file for the Husky pre-commit hook.
     * @private
     */
    createPreCommitHook() {
        new projen_1.TextFile(this.project, this.preCommitFilePath, {
            lines: this.preCommitTemplate,
        });
    }
    addTemplates() {
        this.createCommitMsgHook();
        this.createPreCommitHook();
    }
    addScripts() {
        for (const [name, command] of Object.entries(this.scripts)) {
            this.project.addTask(name, { exec: command });
        }
    }
    addDevDependencies() {
        this.project.addDevDeps(...this.devDependencies);
    }
}
exports.HuskyBase = HuskyBase;
_a = JSII_RTTI_SYMBOL_1;
HuskyBase[_a] = { fqn: "@dxfrontier/projen-template-projects.HuskyBase", version: "0.0.0" };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHVza3kuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvYmFzZS9odXNreS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLG1DQUFrQztBQUNsQyx1Q0FBb0M7QUFJcEM7OztHQUdHO0FBQ0gsTUFBc0IsU0FBVSxTQUFRLGlCQUFPO0lBQzdDOzs7T0FHRztJQUNILFlBQVksT0FBOEI7UUFDeEMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ2pCLENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsSUFBYyxpQkFBaUI7UUFDN0IsT0FBTyxtQkFBbUIsQ0FBQztJQUM3QixDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILElBQWMsaUJBQWlCO1FBQzdCLE9BQU8sbUJBQW1CLENBQUM7SUFDN0IsQ0FBQztJQUVEOzs7O09BSUc7SUFDSCxJQUFjLGlCQUFpQjtRQUM3QixPQUFPO1lBQ0wseUVBQXlFO1lBQ3pFLEVBQUU7WUFDRix5Q0FBeUM7U0FDMUMsQ0FBQztJQUNKLENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsSUFBYyxpQkFBaUI7UUFDN0IsT0FBTyxDQUFDLHlFQUF5RSxFQUFFLEVBQUUsRUFBRSxpQkFBaUIsQ0FBQyxDQUFDO0lBQzVHLENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsSUFBYyxPQUFPO1FBQ25CLE9BQU87WUFDTCxPQUFPLEVBQUUsZUFBZTtTQUN6QixDQUFDO0lBQ0osQ0FBQztJQUVEOzs7O09BSUc7SUFDSCxJQUFjLGVBQWU7UUFDM0IsT0FBTyxDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBQzFCLENBQUM7SUFFRDs7O09BR0c7SUFDSyxtQkFBbUI7UUFDekIsSUFBSSxpQkFBUSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLGlCQUFpQixFQUFFO1lBQ2pELEtBQUssRUFBRSxJQUFJLENBQUMsaUJBQWlCO1NBQzlCLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRDs7O09BR0c7SUFDSyxtQkFBbUI7UUFDekIsSUFBSSxpQkFBUSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLGlCQUFpQixFQUFFO1lBQ2pELEtBQUssRUFBRSxJQUFJLENBQUMsaUJBQWlCO1NBQzlCLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFUyxZQUFZO1FBQ3BCLElBQUksQ0FBQyxtQkFBbUIsRUFBRSxDQUFDO1FBQzNCLElBQUksQ0FBQyxtQkFBbUIsRUFBRSxDQUFDO0lBQzdCLENBQUM7SUFFUyxVQUFVO1FBQ2xCLEtBQUssTUFBTSxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsSUFBSSxNQUFNLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDO1lBQzNELElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFDO1FBQ2hELENBQUM7SUFDSCxDQUFDO0lBRVMsa0JBQWtCO1FBQzFCLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDO0lBQ25ELENBQUM7O0FBdEdILDhCQXVHQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFRleHRGaWxlIH0gZnJvbSAncHJvamVuJztcbmltcG9ydCB7IEJ1aWxkZXIgfSBmcm9tICcuL2J1aWxkZXInO1xuaW1wb3J0IHsgU2NyaXB0cyB9IGZyb20gJy4uL3R5cGVzJztcbmltcG9ydCB7IFR5cGVTY3JpcHRQcm9qZWN0QmFzZSB9IGZyb20gJy4vcHJvamVjdCc7XG5cbi8qKlxuICogQmFzZSBjbGFzcyBmb3IgSHVza3kgYnVpbGRlciBpbXBsZW1lbnRpbmcgYWxsIHJlbGV2YW50IGNvbmZpZ3VyYXRpb24uXG4gKiBAYWJzdHJhY3RcbiAqL1xuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEh1c2t5QmFzZSBleHRlbmRzIEJ1aWxkZXIge1xuICAvKipcbiAgICogSW5pdGlhbGl6ZXMgdGhlIEh1c2t5IGJ1aWxkZXIuXG4gICAqIEBwYXJhbSBwcm9qZWN0IFRoZSBwcm9qZWN0IHRvIGNvbmZpZ3VyZSBIdXNreSBmb3IuXG4gICAqL1xuICBjb25zdHJ1Y3Rvcihwcm9qZWN0OiBUeXBlU2NyaXB0UHJvamVjdEJhc2UpIHtcbiAgICBzdXBlcihwcm9qZWN0KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBGaWxlIHBhdGggdG8gdGhlIEh1c2t5IGNvbW1pdC1tc2cgaG9vay5cbiAgICogQHJldHVybiBGaWxlIHBhdGggdG8gY29tbWl0LW1zZyBob29rIGZpbGUuXG4gICAqIEBwcm90ZWN0ZWRcbiAgICovXG4gIHByb3RlY3RlZCBnZXQgY29tbWl0TXNnRmlsZVBhdGgoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gJy5odXNreS9jb21taXQtbXNnJztcbiAgfVxuXG4gIC8qKlxuICAgKiBGaWxlIHBhdGggdG8gdGhlIEh1c2t5IHByZS1jb21taXQgaG9vay5cbiAgICogQHJldHVybiBGaWxlIHBhdGggdG8gcHJlLWNvbW1pdCBob29rIGZpbGUuXG4gICAqIEBwcm90ZWN0ZWRcbiAgICovXG4gIHByb3RlY3RlZCBnZXQgcHJlQ29tbWl0RmlsZVBhdGgoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gJy5odXNreS9wcmUtY29tbWl0JztcbiAgfVxuXG4gIC8qKlxuICAgKiBDb21taXQtbXNnIGhvb2sgdGVtcGxhdGUgZm9yIHRoZSBIdXNreSBjb25maWd1cmF0aW9uLlxuICAgKiBAcmV0dXJuIFRlbXBsYXRlIGZvciB0aGUgY29tbWl0LW1zZyBob29rIGZpbGUuXG4gICAqIEBwcm90ZWN0ZWRcbiAgICovXG4gIHByb3RlY3RlZCBnZXQgY29tbWl0TXNnVGVtcGxhdGUoKTogc3RyaW5nW10ge1xuICAgIHJldHVybiBbXG4gICAgICAnIyBHZW5lcmF0ZWQgYnkgcHJvamVuLlRvIG1vZGlmeSwgZWRpdC5wcm9qZW5yYy50cyBhbmQgcnVuIFwibnB4IHByb2plblwiLicsXG4gICAgICAnJyxcbiAgICAgICducHggLS1uby1pbnN0YWxsIGNvbW1pdGxpbnQgLS1lZGl0IFwiJDFcIicsXG4gICAgXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBQcmUtY29tbWl0IGhvb2sgdGVtcGxhdGUgZm9yIHRoZSBIdXNreSBjb25maWd1cmF0aW9uLlxuICAgKiBAcmV0dXJuIFRlbXBsYXRlIGZvciB0aGUgcHJlLWNvbW1pdCBob29rIGZpbGUuXG4gICAqIEBwcm90ZWN0ZWRcbiAgICovXG4gIHByb3RlY3RlZCBnZXQgcHJlQ29tbWl0VGVtcGxhdGUoKTogc3RyaW5nW10ge1xuICAgIHJldHVybiBbJyMgR2VuZXJhdGVkIGJ5IHByb2plbi5UbyBtb2RpZnksIGVkaXQucHJvamVucmMudHMgYW5kIHJ1biBcIm5weCBwcm9qZW5cIi4nLCAnJywgJ25weCBsaW50LXN0YWdlZCddO1xuICB9XG5cbiAgLyoqXG4gICAqIE5QTSBzY3JpcHRzIGZvciB0aGUgQ29tbWl0TGludCBidWlsZGVyLlxuICAgKiBAcmV0dXJuIE5wbSBzY3JpcHQgZW50cmllcy5cbiAgICogQHByb3RlY3RlZFxuICAgKi9cbiAgcHJvdGVjdGVkIGdldCBzY3JpcHRzKCk6IFNjcmlwdHMge1xuICAgIHJldHVybiB7XG4gICAgICBwcmVwYXJlOiAnaHVza3kgfHwgdHJ1ZScsXG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBOUE0gcGFja2FnZXMgdG8gYmUgaW5zdGFsbGVkIGFzIGRldkRlcGVuZGVuY2llcyBmb3IgdGhlIENvbW1pdExpbnQgYnVpbGRlci5cbiAgICogQHJldHVybiBOcG0gZGV2IGRlcGVuZGVuY2llcy5cbiAgICogQHByb3RlY3RlZFxuICAgKi9cbiAgcHJvdGVjdGVkIGdldCBkZXZEZXBlbmRlbmNpZXMoKTogc3RyaW5nW10ge1xuICAgIHJldHVybiBbJ2h1c2t5QF45LjEuNyddO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgdGhlIHRlbXBsYXRlIGZpbGUgZm9yIHRoZSBIdXNreSBjb21taXQtbXNnIGhvb2suXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBwcml2YXRlIGNyZWF0ZUNvbW1pdE1zZ0hvb2soKTogdm9pZCB7XG4gICAgbmV3IFRleHRGaWxlKHRoaXMucHJvamVjdCwgdGhpcy5jb21taXRNc2dGaWxlUGF0aCwge1xuICAgICAgbGluZXM6IHRoaXMuY29tbWl0TXNnVGVtcGxhdGUsXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyB0aGUgdGVtcGxhdGUgZmlsZSBmb3IgdGhlIEh1c2t5IHByZS1jb21taXQgaG9vay5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHByaXZhdGUgY3JlYXRlUHJlQ29tbWl0SG9vaygpOiB2b2lkIHtcbiAgICBuZXcgVGV4dEZpbGUodGhpcy5wcm9qZWN0LCB0aGlzLnByZUNvbW1pdEZpbGVQYXRoLCB7XG4gICAgICBsaW5lczogdGhpcy5wcmVDb21taXRUZW1wbGF0ZSxcbiAgICB9KTtcbiAgfVxuXG4gIHByb3RlY3RlZCBhZGRUZW1wbGF0ZXMoKTogdm9pZCB7XG4gICAgdGhpcy5jcmVhdGVDb21taXRNc2dIb29rKCk7XG4gICAgdGhpcy5jcmVhdGVQcmVDb21taXRIb29rKCk7XG4gIH1cblxuICBwcm90ZWN0ZWQgYWRkU2NyaXB0cygpOiB2b2lkIHtcbiAgICBmb3IgKGNvbnN0IFtuYW1lLCBjb21tYW5kXSBvZiBPYmplY3QuZW50cmllcyh0aGlzLnNjcmlwdHMpKSB7XG4gICAgICB0aGlzLnByb2plY3QuYWRkVGFzayhuYW1lLCB7IGV4ZWM6IGNvbW1hbmQgfSk7XG4gICAgfVxuICB9XG5cbiAgcHJvdGVjdGVkIGFkZERldkRlcGVuZGVuY2llcygpOiB2b2lkIHtcbiAgICB0aGlzLnByb2plY3QuYWRkRGV2RGVwcyguLi50aGlzLmRldkRlcGVuZGVuY2llcyk7XG4gIH1cbn1cbiJdfQ==