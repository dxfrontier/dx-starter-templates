"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.GitHubBase = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const projen_1 = require("projen");
const github_1 = require("projen/lib/github");
const workflows_model_1 = require("projen/lib/github/workflows-model");
const builder_1 = require("./builder");
/**
 * Base class for GitHub builder implementing all relevant configuration.
 * @abstract
 */
class GitHubBase extends builder_1.Builder {
    /**
     * Initializes the base GitHub builder.
     * @param project The project to configure GitHub builder for.
     */
    constructor(project) {
        super(project);
    }
    /**
     * File path to GitHub bug issue template.
     * @return File path to bug issue file.
     * @protected
     */
    get bugIssueFilePath() {
        return '.github/ISSUE_TEMPLATE/bug.yml';
    }
    /**
     *File path to GitHub feature issue template.
     @return File path to feature issue file.
     @protected
     */
    get featureIssueFilePath() {
        return '.github/ISSUE_TEMPLATE/feature.yml';
    }
    /**
     * File path to GitHub question issue template.
     * @return File path to question issue file.
     * @protected
     */
    get questionIssueFilePath() {
        return '.github/ISSUE_TEMPLATE/question.yml';
    }
    /**
     * File path to the Cliff toml configuration.
     * This file is used by release workflow to create the Changelog.
     * @return File path to cliff toml file.
     * @protected
     */
    get cliffTomlFilePath() {
        return 'cliff.toml';
    }
    /**
     * Pull Request template for the GitHub configuration.
     * @return File path to pull request template file.
     * @protected
     */
    get pullRequestTemplate() {
        return [
            '## Reviewers Checklist',
            '',
            'for complete review list refer to ABS Loop - Review Aspects',
            '',
            '### Organizational Section',
            '',
            '- [ ] PR is assigned to the according feature/bug',
            '- [ ] Feature/bug is descriptive',
            '- [ ] Feature/bug is assigned to according labels',
            '- [ ] Feature/bug is assigned to a developer',
            '',
            '### Structure',
            '',
            '- [ ] Readability: Code is easy to understand, with meaningful names for variables, functions, and classes',
            '- [ ] Comments: Meaningful and helpful comments. Code is documented without being over-commented',
            '- [ ] DRY, KISS and YAGNI: Code implements only necessary features; no over-engineering',
            '- [ ] No sensitive data (e.g., passwords, API keys) in the code',
            '- [ ] No major updates for used packages',
            '',
            '### Testing',
            '',
            '- [ ] Code is locally tested by developer (if applicable)',
            '- [ ] Automated tests pass successfully',
            '<!-- Generated by projen. To modify, edit .projenrc.ts and run "npx projen".-->',
        ];
    }
    /**
     * Issue template for the GitHub Bug configuration.
     * @return Template for the bug issue template file.
     * @protected
     */
    get bugIssueTemplate() {
        return [
            'name: üêû Bug',
            'description: File a bug/issue',
            'title: "[BUG] <title>"',
            'labels: ["type: bug"]',
            'body:',
            '  - type: textarea',
            '    attributes:',
            '      label: Current behavior',
            "      description: A description of what you're experiencing.",
            '    validations:',
            '      required: true',
            '',
            '  - type: textarea',
            '    attributes:',
            '      label: Expected behavior',
            '      description: A description of what you expected to happen.',
            '    validations:',
            '      required: true',
            '# Generated by projen. To modify, edit .projenrc.ts and run "npx projen".',
        ];
    }
    /**
     * Issue template for the GitHub feature configuration.
     * @return Template for the feature issue template file.
     * @protected
     */
    get featureIssueTemplate() {
        return [
            'name: üí° Feature',
            'description: Story related feature',
            'title: "[FEATURE] <title>"',
            'labels: ["type: feature"]',
            'body:',
            '  - type: textarea',
            '    attributes:',
            '      label: Description',
            '      description: A description of the feature.',
            '    validations:',
            '      required: true',
            '',
            '  - type: textarea',
            '    attributes:',
            '      label: Task List',
            '      description: Describe the steps to fulfill the feature.',
            '      value: |',
            '        - [ ] My First Task',
            '    validations:',
            '      required: true',
            '# Generated by projen. To modify, edit .projenrc.ts and run "npx projen".',
        ];
    }
    /**
     * Template for the GitHub Question Issue configuration.
     * @return Template for the question issue template file.
     * @protected
     */
    get questionIssueTemplate() {
        return [
            'name: ‚ùì Question',
            'description: Ask a question',
            'title: "[QUESTION] <title>"',
            'labels: ["type: question"]',
            'body:',
            '  - type: textarea',
            '    attributes:',
            '      label: Question',
            '      description: What would you like to know? If you encounter unusual behavior or identified a missing feature, consider opening a bug report instead.',
            '    validations:',
            '      required: true',
            '# Generated by projen. To modify, edit .projenrc.ts and run "npx projen".',
        ];
    }
    /**
     * Cliff toml configuration for the GitHub configuration.
     * This file is used by release workflow to create the Changelog.
     * @return Template for the cliff toml file.
     * @protected
     */
    get cliffTomlConfiguration() {
        return [
            '# ~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".',
            '',
            '[changelog]',
            '# changelog header',
            'header = """',
            '# Changelog\n',
            'All notable changes to this project will be documented in this file.\n',
            '"""',
            '# template for the changelog body',
            '# https://keats.github.io/tera/docs/#introduction',
            'body = """',
            '{% if version %}\\',
            '    ## [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }}',
            '{% else %}\\',
            '    ## [unreleased]',
            '{% endif %}\\',
            '{% for group, commits in commits | group_by(attribute="group") %}',
            '    ### {{ group | striptags | trim | upper_first }}',
            '    {% for commit in commits %}',
            '        - {% if commit.scope %}*({{ commit.scope }})* {% endif %}\\',
            '            {% if commit.breaking %}[**breaking**] {% endif %}\\',
            '            {{ commit.message | upper_first }}\\',
            '    {% endfor %}',
            '{% endfor %}\\',
            '"""',
            '# template for the changelog footer',
            'footer = """',
            '<!-- generated by git-cliff -->',
            '"""',
            '# remove the leading and trailing s',
            'trim = true',
            '# postprocessors',
            'postprocessors = [',
            '  # { pattern = "<REPO>", replace = "https://github.com/orhun/git-cliff" }, # replace repository URL',
            ']',
            '',
            '[git]',
            '# parse the commits based on https://www.conventionalcommits.org',
            'conventional_commits = true',
            '# filter out the commits that are not conventional',
            'filter_unconventional = true',
            '# process each line of a commit as an individual commit',
            'split_commits = false',
            '# regex for preprocessing the commit messages',
            'commit_preprocessors = [',
            '  # Replace issue numbers',
            '  #{ pattern = "\\((\\w+\\s)?#([0-9]+)\\)", replace = "([#${2}](<REPO>/issues/${2}))"},',
            '  # Check spelling of the commit with https://github.com/crate-ci/typos',
            '  # If the spelling is incorrect, it will be automatically fixed.',
            '  #{ pattern = ".*", replace_command = "typos --write-changes -" },',
            ']',
            '# regex for parsing and grouping commits',
            'commit_parsers = [',
            '  { message = "^feat", group = "<!-- 0 -->üöÄ Features" },',
            '  { message = "^fix", group = "<!-- 1 -->üêõ Bug Fixes" },',
            '  { message = "^doc", group = "<!-- 3 -->üìö Documentation" },',
            '  { message = "^perf", group = "<!-- 4 -->‚ö° Performance" },',
            '  { message = "^refactor", group = "<!-- 2 -->üöú Refactor" },',
            '  { message = "^style", group = "<!-- 5 -->üé® Styling" },',
            '  { message = "^test", group = "<!-- 6 -->üß™ Testing" },',
            '  { message = "^chore\\(release\\): prepare for", skip = true },',
            '  { message = "^chore\\(deps.*\\)", skip = true },',
            '  { message = "^chore\\(pr\\)", skip = true },',
            '  { message = "^chore\\(pull\\)", skip = true },',
            '  { message = "^chore|^ci", group = "<!-- 7 -->‚öôÔ∏è Miscellaneous Tasks" },',
            '  { body = ".*security", group = "<!-- 8 -->üõ°Ô∏è Security" },',
            '  { message = "^revert", group = "<!-- 9 -->‚óÄÔ∏è Revert" },',
            ']',
            '# protect breaking changes from being skipped due to matching a skipping commit_parser',
            'protect_breaking_commits = false',
            '# filter out the commits that are not matched by commit parsers',
            'filter_commits = false',
            '# regex for matching git tags',
            '# tag_pattern = "v[0-9].*"',
            '# regex for skipping tags',
            '# skip_tags = ""',
            '# regex for ignoring tags',
            '# ignore_tags = ""',
            '# sort the tags topologically',
            'topo_order = false',
            '# sort the commits inside sections by oldest/newest order',
            'sort_commits = "oldest"',
            '# limit the number of commits included in the changelog.',
            '# limit_commits = 42',
        ];
    }
    /**
     * Workflow release template for the GitHub configuration.
     * @return Options for release workflow
     * @protected
     */
    get releaseWorkflowOptions() {
        return {
            on: {
                pullRequest: {
                    branches: ['main'],
                    types: ['closed'],
                },
            },
            job: {
                runsOn: ['ubuntu-latest'],
                permissions: {
                    contents: workflows_model_1.JobPermission.WRITE,
                    pullRequests: workflows_model_1.JobPermission.WRITE,
                },
                steps: [
                    {
                        name: 'Create release',
                        uses: 'dxfrontier/gh-action-release@main',
                        with: {
                            GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}',
                            BRANCH: 'main',
                        },
                    },
                ],
            },
        };
    }
    /**
     * Workflow stale template options for the GitHub configuration.
     * @return Options for stale workflow
     * @protected
     */
    get staleWorkflowOptions() {
        return {
            on: {
                schedule: [
                    {
                        cron: '36 18 * * *',
                    },
                ],
            },
            job: {
                runsOn: ['ubuntu-latest'],
                permissions: {
                    issues: workflows_model_1.JobPermission.WRITE,
                    pullRequests: workflows_model_1.JobPermission.WRITE,
                },
                steps: [
                    {
                        uses: 'actions/stale@v5',
                        with: {
                            'repo-token': '${{ secrets.GITHUB_TOKEN }}',
                            'days-before-issue-stale': 30,
                            'stale-issue-message': 'This issue has not been updated in a while. If it is still relevant, please comment on it to keep it open. The issue will be closed soon if it remains inactive.',
                            'close-issue-message': 'This issue has been closed automatically due to inactivity.',
                            'stale-pr-message': 'This PR has not been updated in a while. If it is still relevant, please comment on it to keep it open. The PR will be closed soon if it remains inactive.',
                            'close-pr-message': 'This PR has been closed automatically due to inactivity.',
                            'stale-issue-label': 'status: stale',
                            'stale-pr-label': 'status: stale',
                            'exempt-issue-labels': 'type: feature request',
                            'exempt-pr-labels': 'type: feature request',
                            'exempt-all-milestones': true,
                        },
                    },
                ],
            },
        };
    }
    /**
     * Creates the template file for a GitHub pull request.
     * @private
     */
    createPullRequest() {
        new github_1.PullRequestTemplate(this.project.github, {
            lines: this.pullRequestTemplate,
        });
    }
    /**
     * Creates the template file for a GitHub bug issue.
     * @private
     */
    createBugIssue() {
        new projen_1.TextFile(this.project, this.bugIssueFilePath, {
            lines: this.bugIssueTemplate,
        });
    }
    /**
     * Creates the template file for a GitHub feature issue.
     * @private
     */
    createFeatureIssue() {
        new projen_1.TextFile(this.project, this.featureIssueFilePath, {
            lines: this.featureIssueTemplate,
        });
    }
    /**
     * Creates the template file for a GitHub question issue.
     * @private
     */
    createQuestionIssue() {
        new projen_1.TextFile(this.project, this.questionIssueFilePath, {
            lines: this.questionIssueTemplate,
        });
    }
    /**
     * Creates the template file for a GitHub release workflow.
     * @private
     */
    createReleaseWorkflow() {
        const workflow = this.project.github?.addWorkflow('Release');
        workflow?.on(this.releaseWorkflowOptions.on);
        workflow?.addJob('release', this.releaseWorkflowOptions.job);
    }
    /**
     * Creates the template file for a GitHub stale workflow.
     * @private
     */
    createStaleWorkflow() {
        const workflow = this.project.github?.addWorkflow('Stale');
        workflow?.on(this.staleWorkflowOptions.on);
        workflow?.addJob('stale', this.staleWorkflowOptions.job);
    }
    /**
     * Creates the configuration file for the cliff toml CHANGELOG creation in release workflow.
     * @private
     */
    createCliffTomlConfiguration() {
        new projen_1.TextFile(this.project, this.cliffTomlFilePath, {
            lines: this.cliffTomlConfiguration,
        });
    }
    addTemplates() {
        this.createPullRequest();
        this.createBugIssue();
        this.createFeatureIssue();
        this.createQuestionIssue();
        this.createReleaseWorkflow();
        this.createStaleWorkflow();
        this.createCliffTomlConfiguration();
    }
}
exports.GitHubBase = GitHubBase;
_a = JSII_RTTI_SYMBOL_1;
GitHubBase[_a] = { fqn: "projen-template-projects.GitHubBase", version: "0.0.0" };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2l0aHViLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2Jhc2UvZ2l0aHViLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsbUNBQWtDO0FBQ2xDLDhDQUF3RTtBQUN4RSx1RUFBa0U7QUFDbEUsdUNBQW9DO0FBSXBDOzs7R0FHRztBQUNILE1BQXNCLFVBQVcsU0FBUSxpQkFBTztJQUM5Qzs7O09BR0c7SUFDSCxZQUFZLE9BQThCO1FBQ3hDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNqQixDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILElBQWMsZ0JBQWdCO1FBQzVCLE9BQU8sZ0NBQWdDLENBQUM7SUFDMUMsQ0FBQztJQUVEOzs7O09BSUc7SUFDSCxJQUFjLG9CQUFvQjtRQUNoQyxPQUFPLG9DQUFvQyxDQUFDO0lBQzlDLENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsSUFBYyxxQkFBcUI7UUFDakMsT0FBTyxxQ0FBcUMsQ0FBQztJQUMvQyxDQUFDO0lBRUQ7Ozs7O09BS0c7SUFDSCxJQUFjLGlCQUFpQjtRQUM3QixPQUFPLFlBQVksQ0FBQztJQUN0QixDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILElBQWMsbUJBQW1CO1FBQy9CLE9BQU87WUFDTCx3QkFBd0I7WUFDeEIsRUFBRTtZQUNGLDZEQUE2RDtZQUM3RCxFQUFFO1lBQ0YsNEJBQTRCO1lBQzVCLEVBQUU7WUFDRixtREFBbUQ7WUFDbkQsa0NBQWtDO1lBQ2xDLG1EQUFtRDtZQUNuRCw4Q0FBOEM7WUFDOUMsRUFBRTtZQUNGLGVBQWU7WUFDZixFQUFFO1lBQ0YsNEdBQTRHO1lBQzVHLGtHQUFrRztZQUNsRyx5RkFBeUY7WUFDekYsaUVBQWlFO1lBQ2pFLDBDQUEwQztZQUMxQyxFQUFFO1lBQ0YsYUFBYTtZQUNiLEVBQUU7WUFDRiwyREFBMkQ7WUFDM0QseUNBQXlDO1lBQ3pDLGlGQUFpRjtTQUNsRixDQUFDO0lBQ0osQ0FBQztJQUVEOzs7O09BSUc7SUFDSCxJQUFj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cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVGV4dEZpbGUgfSBmcm9tICdwcm9qZW4nO1xuaW1wb3J0IHsgR2l0aHViV29ya2Zsb3csIFB1bGxSZXF1ZXN0VGVtcGxhdGUgfSBmcm9tICdwcm9qZW4vbGliL2dpdGh1Yic7XG5pbXBvcnQgeyBKb2JQZXJtaXNzaW9uIH0gZnJvbSAncHJvamVuL2xpYi9naXRodWIvd29ya2Zsb3dzLW1vZGVsJztcbmltcG9ydCB7IEJ1aWxkZXIgfSBmcm9tICcuL2J1aWxkZXInO1xuaW1wb3J0IHsgV29ya2Zsb3dPcHRpb25zIH0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IHsgVHlwZVNjcmlwdFByb2plY3RCYXNlIH0gZnJvbSAnLi9wcm9qZWN0JztcblxuLyoqXG4gKiBCYXNlIGNsYXNzIGZvciBHaXRIdWIgYnVpbGRlciBpbXBsZW1lbnRpbmcgYWxsIHJlbGV2YW50IGNvbmZpZ3VyYXRpb24uXG4gKiBAYWJzdHJhY3RcbiAqL1xuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEdpdEh1YkJhc2UgZXh0ZW5kcyBCdWlsZGVyIHtcbiAgLyoqXG4gICAqIEluaXRpYWxpemVzIHRoZSBiYXNlIEdpdEh1YiBidWlsZGVyLlxuICAgKiBAcGFyYW0gcHJvamVjdCBUaGUgcHJvamVjdCB0byBjb25maWd1cmUgR2l0SHViIGJ1aWxkZXIgZm9yLlxuICAgKi9cbiAgY29uc3RydWN0b3IocHJvamVjdDogVHlwZVNjcmlwdFByb2plY3RCYXNlKSB7XG4gICAgc3VwZXIocHJvamVjdCk7XG4gIH1cblxuICAvKipcbiAgICogRmlsZSBwYXRoIHRvIEdpdEh1YiBidWcgaXNzdWUgdGVtcGxhdGUuXG4gICAqIEByZXR1cm4gRmlsZSBwYXRoIHRvIGJ1ZyBpc3N1ZSBmaWxlLlxuICAgKiBAcHJvdGVjdGVkXG4gICAqL1xuICBwcm90ZWN0ZWQgZ2V0IGJ1Z0lzc3VlRmlsZVBhdGgoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gJy5naXRodWIvSVNTVUVfVEVNUExBVEUvYnVnLnltbCc7XG4gIH1cblxuICAvKipcbiAgICpGaWxlIHBhdGggdG8gR2l0SHViIGZlYXR1cmUgaXNzdWUgdGVtcGxhdGUuXG4gICBAcmV0dXJuIEZpbGUgcGF0aCB0byBmZWF0dXJlIGlzc3VlIGZpbGUuXG4gICBAcHJvdGVjdGVkXG4gICAqL1xuICBwcm90ZWN0ZWQgZ2V0IGZlYXR1cmVJc3N1ZUZpbGVQYXRoKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuICcuZ2l0aHViL0lTU1VFX1RFTVBMQVRFL2ZlYXR1cmUueW1sJztcbiAgfVxuXG4gIC8qKlxuICAgKiBGaWxlIHBhdGggdG8gR2l0SHViIHF1ZXN0aW9uIGlzc3VlIHRlbXBsYXRlLlxuICAgKiBAcmV0dXJuIEZpbGUgcGF0aCB0byBxdWVzdGlvbiBpc3N1ZSBmaWxlLlxuICAgKiBAcHJvdGVjdGVkXG4gICAqL1xuICBwcm90ZWN0ZWQgZ2V0IHF1ZXN0aW9uSXNzdWVGaWxlUGF0aCgpOiBzdHJpbmcge1xuICAgIHJldHVybiAnLmdpdGh1Yi9JU1NVRV9URU1QTEFURS9xdWVzdGlvbi55bWwnO1xuICB9XG5cbiAgLyoqXG4gICAqIEZpbGUgcGF0aCB0byB0aGUgQ2xpZmYgdG9tbCBjb25maWd1cmF0aW9uLlxuICAgKiBUaGlzIGZpbGUgaXMgdXNlZCBieSByZWxlYXNlIHdvcmtmbG93IHRvIGNyZWF0ZSB0aGUgQ2hhbmdlbG9nLlxuICAgKiBAcmV0dXJuIEZpbGUgcGF0aCB0byBjbGlmZiB0b21sIGZpbGUuXG4gICAqIEBwcm90ZWN0ZWRcbiAgICovXG4gIHByb3RlY3RlZCBnZXQgY2xpZmZUb21sRmlsZVBhdGgoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gJ2NsaWZmLnRvbWwnO1xuICB9XG5cbiAgLyoqXG4gICAqIFB1bGwgUmVxdWVzdCB0ZW1wbGF0ZSBmb3IgdGhlIEdpdEh1YiBjb25maWd1cmF0aW9uLlxuICAgKiBAcmV0dXJuIEZpbGUgcGF0aCB0byBwdWxsIHJlcXVlc3QgdGVtcGxhdGUgZmlsZS5cbiAgICogQHByb3RlY3RlZFxuICAgKi9cbiAgcHJvdGVjdGVkIGdldCBwdWxsUmVxdWVzdFRlbXBsYXRlKCk6IHN0cmluZ1tdIHtcbiAgICByZXR1cm4gW1xuICAgICAgJyMjIFJldmlld2VycyBDaGVja2xpc3QnLFxuICAgICAgJycsXG4gICAgICAnZm9yIGNvbXBsZXRlIHJldmlldyBsaXN0IHJlZmVyIHRvIEFCUyBMb29wIC0gUmV2aWV3IEFzcGVjdHMnLFxuICAgICAgJycsXG4gICAgICAnIyMjIE9yZ2FuaXphdGlvbmFsIFNlY3Rpb24nLFxuICAgICAgJycsXG4gICAgICAnLSBbIF0gUFIgaXMgYXNzaWduZWQgdG8gdGhlIGFjY29yZGluZyBmZWF0dXJlL2J1ZycsXG4gICAgICAnLSBbIF0gRmVhdHVyZS9idWcgaXMgZGVzY3JpcHRpdmUnLFxuICAgICAgJy0gWyBdIEZlYXR1cmUvYnVnIGlzIGFzc2lnbmVkIHRvIGFjY29yZGluZyBsYWJlbHMnLFxuICAgICAgJy0gWyBdIEZlYXR1cmUvYnVnIGlzIGFzc2lnbmVkIHRvIGEgZGV2ZWxvcGVyJyxcbiAgICAgICcnLFxuICAgICAgJyMjIyBTdHJ1Y3R1cmUnLFxuICAgICAgJycsXG4gICAgICAnLSBbIF0gUmVhZGFiaWxpdHk6IENvZGUgaXMgZWFzeSB0byB1bmRlcnN0YW5kLCB3aXRoIG1lYW5pbmdmdWwgbmFtZXMgZm9yIHZhcmlhYmxlcywgZnVuY3Rpb25zLCBhbmQgY2xhc3NlcycsXG4gICAgICAnLSBbIF0gQ29tbWVudHM6IE1lYW5pbmdmdWwgYW5kIGhlbHBmdWwgY29tbWVudHMuIENvZGUgaXMgZG9jdW1lbnRlZCB3aXRob3V0IGJlaW5nIG92ZXItY29tbWVudGVkJyxcbiAgICAgICctIFsgXSBEUlksIEtJU1MgYW5kIFlBR05JOiBDb2RlIGltcGxlbWVudHMgb25seSBuZWNlc3NhcnkgZmVhdHVyZXM7IG5vIG92ZXItZW5naW5lZXJpbmcnLFxuICAgICAgJy0gWyBdIE5vIHNlbnNpdGl2ZSBkYXRhIChlLmcuLCBwYXNzd29yZHMsIEFQSSBrZXlzKSBpbiB0aGUgY29kZScsXG4gICAgICAnLSBbIF0gTm8gbWFqb3IgdXBkYXRlcyBmb3IgdXNlZCBwYWNrYWdlcycsXG4gICAgICAnJyxcbiAgICAgICcjIyMgVGVzdGluZycsXG4gICAgICAnJyxcbiAgICAgICctIFsgXSBDb2RlIGlzIGxvY2FsbHkgdGVzdGVkIGJ5IGRldmVsb3BlciAoaWYgYXBwbGljYWJsZSknLFxuICAgICAgJy0gWyBdIEF1dG9tYXRlZCB0ZXN0cyBwYXNzIHN1Y2Nlc3NmdWxseScsXG4gICAgICAnPCEtLSBHZW5lcmF0ZWQgYnkgcHJvamVuLiBUbyBtb2RpZnksIGVkaXQgLnByb2plbnJjLnRzIGFuZCBydW4gXCJucHggcHJvamVuXCIuLS0+JyxcbiAgICBdO1xuICB9XG5cbiAgLyoqXG4gICAqIElzc3VlIHRlbXBsYXRlIGZvciB0aGUgR2l0SHViIEJ1ZyBjb25maWd1cmF0aW9uLlxuICAgKiBAcmV0dXJuIFRlbXBsYXRlIGZvciB0aGUgYnVnIGlzc3VlIHRlbXBsYXRlIGZpbGUuXG4gICAqIEBwcm90ZWN0ZWRcbiAgICovXG4gIHByb3RlY3RlZCBnZXQgYnVnSXNzdWVUZW1wbGF0ZSgpOiBzdHJpbmdbXSB7XG4gICAgcmV0dXJuIFtcbiAgICAgICduYW1lOiDwn5CeIEJ1ZycsXG4gICAgICAnZGVzY3JpcHRpb246IEZpbGUgYSBidWcvaXNzdWUnLFxuICAgICAgJ3RpdGxlOiBcIltCVUddIDx0aXRsZT5cIicsXG4gICAgICAnbGFiZWxzOiBbXCJ0eXBlOiBidWdcIl0nLFxuICAgICAgJ2JvZHk6JyxcbiAgICAgICcgIC0gdHlwZTogdGV4dGFyZWEnLFxuICAgICAgJyAgICBhdHRyaWJ1dGVzOicsXG4gICAgICAnICAgICAgbGFiZWw6IEN1cnJlbnQgYmVoYXZpb3InLFxuICAgICAgXCIgICAgICBkZXNjcmlwdGlvbjogQSBkZXNjcmlwdGlvbiBvZiB3aGF0IHlvdSdyZSBleHBlcmllbmNpbmcuXCIsXG4gICAgICAnICAgIHZhbGlkYXRpb25zOicsXG4gICAgICAnICAgICAgcmVxdWlyZWQ6IHRydWUnLFxuICAgICAgJycsXG4gICAgICAnICAtIHR5cGU6IHRleHRhcmVhJyxcbiAgICAgICcgICAgYXR0cmlidXRlczonLFxuICAgICAgJyAgICAgIGxhYmVsOiBFeHBlY3RlZCBiZWhhdmlvcicsXG4gICAgICAnICAgICAgZGVzY3JpcHRpb246IEEgZGVzY3JpcHRpb24gb2Ygd2hhdCB5b3UgZXhwZWN0ZWQgdG8gaGFwcGVuLicsXG4gICAgICAnICAgIHZhbGlkYXRpb25zOicsXG4gICAgICAnICAgICAgcmVxdWlyZWQ6IHRydWUnLFxuICAgICAgJyMgR2VuZXJhdGVkIGJ5IHByb2plbi4gVG8gbW9kaWZ5LCBlZGl0IC5wcm9qZW5yYy50cyBhbmQgcnVuIFwibnB4IHByb2plblwiLicsXG4gICAgXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJc3N1ZSB0ZW1wbGF0ZSBmb3IgdGhlIEdpdEh1YiBmZWF0dXJlIGNvbmZpZ3VyYXRpb24uXG4gICAqIEByZXR1cm4gVGVtcGxhdGUgZm9yIHRoZSBmZWF0dXJlIGlzc3VlIHRlbXBsYXRlIGZpbGUuXG4gICAqIEBwcm90ZWN0ZWRcbiAgICovXG4gIHByb3RlY3RlZCBnZXQgZmVhdHVyZUlzc3VlVGVtcGxhdGUoKTogc3RyaW5nW10ge1xuICAgIHJldHVybiBbXG4gICAgICAnbmFtZTog8J+SoSBGZWF0dXJlJyxcbiAgICAgICdkZXNjcmlwdGlvbjogU3RvcnkgcmVsYXRlZCBmZWF0dXJlJyxcbiAgICAgICd0aXRsZTogXCJbRkVBVFVSRV0gPHRpdGxlPlwiJyxcbiAgICAgICdsYWJlbHM6IFtcInR5cGU6IGZlYXR1cmVcIl0nLFxuICAgICAgJ2JvZHk6JyxcbiAgICAgICcgIC0gdHlwZTogdGV4dGFyZWEnLFxuICAgICAgJyAgICBhdHRyaWJ1dGVzOicsXG4gICAgICAnICAgICAgbGFiZWw6IERlc2NyaXB0aW9uJyxcbiAgICAgICcgICAgICBkZXNjcmlwdGlvbjogQSBkZXNjcmlwdGlvbiBvZiB0aGUgZmVhdHVyZS4nLFxuICAgICAgJyAgICB2YWxpZGF0aW9uczonLFxuICAgICAgJyAgICAgIHJlcXVpcmVkOiB0cnVlJyxcbiAgICAgICcnLFxuICAgICAgJyAgLSB0eXBlOiB0ZXh0YXJlYScsXG4gICAgICAnICAgIGF0dHJpYnV0ZXM6JyxcbiAgICAgICcgICAgICBsYWJlbDogVGFzayBMaXN0JyxcbiAgICAgICcgICAgICBkZXNjcmlwdGlvbjogRGVzY3JpYmUgdGhlIHN0ZXBzIHRvIGZ1bGZpbGwgdGhlIGZlYXR1cmUuJyxcbiAgICAgICcgICAgICB2YWx1ZTogfCcsXG4gICAgICAnICAgICAgICAtIFsgXSBNeSBGaXJzdCBUYXNrJyxcbiAgICAgICcgICAgdmFsaWRhdGlvbnM6JyxcbiAgICAgICcgICAgICByZXF1aXJlZDogdHJ1ZScsXG4gICAgICAnIyBHZW5lcmF0ZWQgYnkgcHJvamVuLiBUbyBtb2RpZnksIGVkaXQgLnByb2plbnJjLnRzIGFuZCBydW4gXCJucHggcHJvamVuXCIuJyxcbiAgICBdO1xuICB9XG5cbiAgLyoqXG4gICAqIFRlbXBsYXRlIGZvciB0aGUgR2l0SHViIFF1ZXN0aW9uIElzc3VlIGNvbmZpZ3VyYXRpb24uXG4gICAqIEByZXR1cm4gVGVtcGxhdGUgZm9yIHRoZSBxdWVzdGlvbiBpc3N1ZSB0ZW1wbGF0ZSBmaWxlLlxuICAgKiBAcHJvdGVjdGVkXG4gICAqL1xuICBwcm90ZWN0ZWQgZ2V0IHF1ZXN0aW9uSXNzdWVUZW1wbGF0ZSgpOiBzdHJpbmdbXSB7XG4gICAgcmV0dXJuIFtcbiAgICAgICduYW1lOiDinZMgUXVlc3Rpb24nLFxuICAgICAgJ2Rlc2NyaXB0aW9uOiBBc2sgYSBxdWVzdGlvbicsXG4gICAgICAndGl0bGU6IFwiW1FVRVNUSU9OXSA8dGl0bGU+XCInLFxuICAgICAgJ2xhYmVsczogW1widHlwZTogcXVlc3Rpb25cIl0nLFxuICAgICAgJ2JvZHk6JyxcbiAgICAgICcgIC0gdHlwZTogdGV4dGFyZWEnLFxuICAgICAgJyAgICBhdHRyaWJ1dGVzOicsXG4gICAgICAnICAgICAgbGFiZWw6IFF1ZXN0aW9uJyxcbiAgICAgICcgICAgICBkZXNjcmlwdGlvbjogV2hhdCB3b3VsZCB5b3UgbGlrZSB0byBrbm93PyBJZiB5b3UgZW5jb3VudGVyIHVudXN1YWwgYmVoYXZpb3Igb3IgaWRlbnRpZmllZCBhIG1pc3NpbmcgZmVhdHVyZSwgY29uc2lkZXIgb3BlbmluZyBhIGJ1ZyByZXBvcnQgaW5zdGVhZC4nLFxuICAgICAgJyAgICB2YWxpZGF0aW9uczonLFxuICAgICAgJyAgICAgIHJlcXVpcmVkOiB0cnVlJyxcbiAgICAgICcjIEdlbmVyYXRlZCBieSBwcm9qZW4uIFRvIG1vZGlmeSwgZWRpdCAucHJvamVucmMudHMgYW5kIHJ1biBcIm5weCBwcm9qZW5cIi4nLFxuICAgIF07XG4gIH1cblxuICAvKipcbiAgICogQ2xpZmYgdG9tbCBjb25maWd1cmF0aW9uIGZvciB0aGUgR2l0SHViIGNvbmZpZ3VyYXRpb24uXG4gICAqIFRoaXMgZmlsZSBpcyB1c2VkIGJ5IHJlbGVhc2Ugd29ya2Zsb3cgdG8gY3JlYXRlIHRoZSBDaGFuZ2Vsb2cuXG4gICAqIEByZXR1cm4gVGVtcGxhdGUgZm9yIHRoZSBjbGlmZiB0b21sIGZpbGUuXG4gICAqIEBwcm90ZWN0ZWRcbiAgICovXG4gIHByb3RlY3RlZCBnZXQgY2xpZmZUb21sQ29uZmlndXJhdGlvbigpOiBzdHJpbmdbXSB7XG4gICAgcmV0dXJuIFtcbiAgICAgICcjIH5+IEdlbmVyYXRlZCBieSBwcm9qZW4uIFRvIG1vZGlmeSwgZWRpdCAucHJvamVucmMudHMgYW5kIHJ1biBcIm5weCBwcm9qZW5cIi4nLFxuICAgICAgJycsXG4gICAgICAnW2NoYW5nZWxvZ10nLFxuICAgICAgJyMgY2hhbmdlbG9nIGhlYWRlcicsXG4gICAgICAnaGVhZGVyID0gXCJcIlwiJyxcbiAgICAgICcjIENoYW5nZWxvZ1xcbicsXG4gICAgICAnQWxsIG5vdGFibGUgY2hhbmdlcyB0byB0aGlzIHByb2plY3Qgd2lsbCBiZSBkb2N1bWVudGVkIGluIHRoaXMgZmlsZS5cXG4nLFxuICAgICAgJ1wiXCJcIicsXG4gICAgICAnIyB0ZW1wbGF0ZSBmb3IgdGhlIGNoYW5nZWxvZyBib2R5JyxcbiAgICAgICcjIGh0dHBzOi8va2VhdHMuZ2l0aHViLmlvL3RlcmEvZG9jcy8jaW50cm9kdWN0aW9uJyxcbiAgICAgICdib2R5ID0gXCJcIlwiJyxcbiAgICAgICd7JSBpZiB2ZXJzaW9uICV9XFxcXCcsXG4gICAgICAnICAgICMjIFt7eyB2ZXJzaW9uIHwgdHJpbV9zdGFydF9tYXRjaGVzKHBhdD1cInZcIikgfX1dIC0ge3sgdGltZXN0YW1wIHwgZGF0ZShmb3JtYXQ9XCIlWS0lbS0lZFwiKSB9fScsXG4gICAgICAneyUgZWxzZSAlfVxcXFwnLFxuICAgICAgJyAgICAjIyBbdW5yZWxlYXNlZF0nLFxuICAgICAgJ3slIGVuZGlmICV9XFxcXCcsXG4gICAgICAneyUgZm9yIGdyb3VwLCBjb21taXRzIGluIGNvbW1pdHMgfCBncm91cF9ieShhdHRyaWJ1dGU9XCJncm91cFwiKSAlfScsXG4gICAgICAnICAgICMjIyB7eyBncm91cCB8IHN0cmlwdGFncyB8IHRyaW0gfCB1cHBlcl9maXJzdCB9fScsXG4gICAgICAnICAgIHslIGZvciBjb21taXQgaW4gY29tbWl0cyAlfScsXG4gICAgICAnICAgICAgICAtIHslIGlmIGNvbW1pdC5zY29wZSAlfSooe3sgY29tbWl0LnNjb3BlIH19KSogeyUgZW5kaWYgJX1cXFxcJyxcbiAgICAgICcgICAgICAgICAgICB7JSBpZiBjb21taXQuYnJlYWtpbmcgJX1bKipicmVha2luZyoqXSB7JSBlbmRpZiAlfVxcXFwnLFxuICAgICAgJyAgICAgICAgICAgIHt7IGNvbW1pdC5tZXNzYWdlIHwgdXBwZXJfZmlyc3QgfX1cXFxcJyxcbiAgICAgICcgICAgeyUgZW5kZm9yICV9JyxcbiAgICAgICd7JSBlbmRmb3IgJX1cXFxcJyxcbiAgICAgICdcIlwiXCInLFxuICAgICAgJyMgdGVtcGxhdGUgZm9yIHRoZSBjaGFuZ2Vsb2cgZm9vdGVyJyxcbiAgICAgICdmb290ZXIgPSBcIlwiXCInLFxuICAgICAgJzwhLS0gZ2VuZXJhdGVkIGJ5IGdpdC1jbGlmZiAtLT4nLFxuICAgICAgJ1wiXCJcIicsXG4gICAgICAnIyByZW1vdmUgdGhlIGxlYWRpbmcgYW5kIHRyYWlsaW5nIHMnLFxuICAgICAgJ3RyaW0gPSB0cnVlJyxcbiAgICAgICcjIHBvc3Rwcm9jZXNzb3JzJyxcbiAgICAgICdwb3N0cHJvY2Vzc29ycyA9IFsnLFxuICAgICAgJyAgIyB7IHBhdHRlcm4gPSBcIjxSRVBPPlwiLCByZXBsYWNlID0gXCJodHRwczovL2dpdGh1Yi5jb20vb3JodW4vZ2l0LWNsaWZmXCIgfSwgIyByZXBsYWNlIHJlcG9zaXRvcnkgVVJMJyxcbiAgICAgICddJyxcbiAgICAgICcnLFxuICAgICAgJ1tnaXRdJyxcbiAgICAgICcjIHBhcnNlIHRoZSBjb21taXRzIGJhc2VkIG9uIGh0dHBzOi8vd3d3LmNvbnZlbnRpb25hbGNvbW1pdHMub3JnJyxcbiAgICAgICdjb252ZW50aW9uYWxfY29tbWl0cyA9IHRydWUnLFxuICAgICAgJyMgZmlsdGVyIG91dCB0aGUgY29tbWl0cyB0aGF0IGFyZSBub3QgY29udmVudGlvbmFsJyxcbiAgICAgICdmaWx0ZXJfdW5jb252ZW50aW9uYWwgPSB0cnVlJyxcbiAgICAgICcjIHByb2Nlc3MgZWFjaCBsaW5lIG9mIGEgY29tbWl0IGFzIGFuIGluZGl2aWR1YWwgY29tbWl0JyxcbiAgICAgICdzcGxpdF9jb21taXRzID0gZmFsc2UnLFxuICAgICAgJyMgcmVnZXggZm9yIHByZXByb2Nlc3NpbmcgdGhlIGNvbW1pdCBtZXNzYWdlcycsXG4gICAgICAnY29tbWl0X3ByZXByb2Nlc3NvcnMgPSBbJyxcbiAgICAgICcgICMgUmVwbGFjZSBpc3N1ZSBudW1iZXJzJyxcbiAgICAgICcgICN7IHBhdHRlcm4gPSBcIlxcXFwoKFxcXFx3K1xcXFxzKT8jKFswLTldKylcXFxcKVwiLCByZXBsYWNlID0gXCIoWyMkezJ9XSg8UkVQTz4vaXNzdWVzLyR7Mn0pKVwifSwnLFxuICAgICAgJyAgIyBDaGVjayBzcGVsbGluZyBvZiB0aGUgY29tbWl0IHdpdGggaHR0cHM6Ly9naXRodWIuY29tL2NyYXRlLWNpL3R5cG9zJyxcbiAgICAgICcgICMgSWYgdGhlIHNwZWxsaW5nIGlzIGluY29ycmVjdCwgaXQgd2lsbCBiZSBhdXRvbWF0aWNhbGx5IGZpeGVkLicsXG4gICAgICAnICAjeyBwYXR0ZXJuID0gXCIuKlwiLCByZXBsYWNlX2NvbW1hbmQgPSBcInR5cG9zIC0td3JpdGUtY2hhbmdlcyAtXCIgfSwnLFxuICAgICAgJ10nLFxuICAgICAgJyMgcmVnZXggZm9yIHBhcnNpbmcgYW5kIGdyb3VwaW5nIGNvbW1pdHMnLFxuICAgICAgJ2NvbW1pdF9wYXJzZXJzID0gWycsXG4gICAgICAnICB7IG1lc3NhZ2UgPSBcIl5mZWF0XCIsIGdyb3VwID0gXCI8IS0tIDAgLS0+8J+agCBGZWF0dXJlc1wiIH0sJyxcbiAgICAgICcgIHsgbWVzc2FnZSA9IFwiXmZpeFwiLCBncm91cCA9IFwiPCEtLSAxIC0tPvCfkJsgQnVnIEZpeGVzXCIgfSwnLFxuICAgICAgJyAgeyBtZXNzYWdlID0gXCJeZG9jXCIsIGdyb3VwID0gXCI8IS0tIDMgLS0+8J+TmiBEb2N1bWVudGF0aW9uXCIgfSwnLFxuICAgICAgJyAgeyBtZXNzYWdlID0gXCJecGVyZlwiLCBncm91cCA9IFwiPCEtLSA0IC0tPuKaoSBQZXJmb3JtYW5jZVwiIH0sJyxcbiAgICAgICcgIHsgbWVzc2FnZSA9IFwiXnJlZmFjdG9yXCIsIGdyb3VwID0gXCI8IS0tIDIgLS0+8J+anCBSZWZhY3RvclwiIH0sJyxcbiAgICAgICcgIHsgbWVzc2FnZSA9IFwiXnN0eWxlXCIsIGdyb3VwID0gXCI8IS0tIDUgLS0+8J+OqCBTdHlsaW5nXCIgfSwnLFxuICAgICAgJyAgeyBtZXNzYWdlID0gXCJedGVzdFwiLCBncm91cCA9IFwiPCEtLSA2IC0tPvCfp6ogVGVzdGluZ1wiIH0sJyxcbiAgICAgICcgIHsgbWVzc2FnZSA9IFwiXmNob3JlXFxcXChyZWxlYXNlXFxcXCk6IHByZXBhcmUgZm9yXCIsIHNraXAgPSB0cnVlIH0sJyxcbiAgICAgICcgIHsgbWVzc2FnZSA9IFwiXmNob3JlXFxcXChkZXBzLipcXFxcKVwiLCBza2lwID0gdHJ1ZSB9LCcsXG4gICAgICAnICB7IG1lc3NhZ2UgPSBcIl5jaG9yZVxcXFwocHJcXFxcKVwiLCBza2lwID0gdHJ1ZSB9LCcsXG4gICAgICAnICB7IG1lc3NhZ2UgPSBcIl5jaG9yZVxcXFwocHVsbFxcXFwpXCIsIHNraXAgPSB0cnVlIH0sJyxcbiAgICAgICcgIHsgbWVzc2FnZSA9IFwiXmNob3JlfF5jaVwiLCBncm91cCA9IFwiPCEtLSA3IC0tPuKame+4jyBNaXNjZWxsYW5lb3VzIFRhc2tzXCIgfSwnLFxuICAgICAgJyAgeyBib2R5ID0gXCIuKnNlY3VyaXR5XCIsIGdyb3VwID0gXCI8IS0tIDggLS0+8J+boe+4jyBTZWN1cml0eVwiIH0sJyxcbiAgICAgICcgIHsgbWVzc2FnZSA9IFwiXnJldmVydFwiLCBncm91cCA9IFwiPCEtLSA5IC0tPuKXgO+4jyBSZXZlcnRcIiB9LCcsXG4gICAgICAnXScsXG4gICAgICAnIyBwcm90ZWN0IGJyZWFraW5nIGNoYW5nZXMgZnJvbSBiZWluZyBza2lwcGVkIGR1ZSB0byBtYXRjaGluZyBhIHNraXBwaW5nIGNvbW1pdF9wYXJzZXInLFxuICAgICAgJ3Byb3RlY3RfYnJlYWtpbmdfY29tbWl0cyA9IGZhbHNlJyxcbiAgICAgICcjIGZpbHRlciBvdXQgdGhlIGNvbW1pdHMgdGhhdCBhcmUgbm90IG1hdGNoZWQgYnkgY29tbWl0IHBhcnNlcnMnLFxuICAgICAgJ2ZpbHRlcl9jb21taXRzID0gZmFsc2UnLFxuICAgICAgJyMgcmVnZXggZm9yIG1hdGNoaW5nIGdpdCB0YWdzJyxcbiAgICAgICcjIHRhZ19wYXR0ZXJuID0gXCJ2WzAtOV0uKlwiJyxcbiAgICAgICcjIHJlZ2V4IGZvciBza2lwcGluZyB0YWdzJyxcbiAgICAgICcjIHNraXBfdGFncyA9IFwiXCInLFxuICAgICAgJyMgcmVnZXggZm9yIGlnbm9yaW5nIHRhZ3MnLFxuICAgICAgJyMgaWdub3JlX3RhZ3MgPSBcIlwiJyxcbiAgICAgICcjIHNvcnQgdGhlIHRhZ3MgdG9wb2xvZ2ljYWxseScsXG4gICAgICAndG9wb19vcmRlciA9IGZhbHNlJyxcbiAgICAgICcjIHNvcnQgdGhlIGNvbW1pdHMgaW5zaWRlIHNlY3Rpb25zIGJ5IG9sZGVzdC9uZXdlc3Qgb3JkZXInLFxuICAgICAgJ3NvcnRfY29tbWl0cyA9IFwib2xkZXN0XCInLFxuICAgICAgJyMgbGltaXQgdGhlIG51bWJlciBvZiBjb21taXRzIGluY2x1ZGVkIGluIHRoZSBjaGFuZ2Vsb2cuJyxcbiAgICAgICcjIGxpbWl0X2NvbW1pdHMgPSA0MicsXG4gICAgXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBXb3JrZmxvdyByZWxlYXNlIHRlbXBsYXRlIGZvciB0aGUgR2l0SHViIGNvbmZpZ3VyYXRpb24uXG4gICAqIEByZXR1cm4gT3B0aW9ucyBmb3IgcmVsZWFzZSB3b3JrZmxvd1xuICAgKiBAcHJvdGVjdGVkXG4gICAqL1xuICBwcm90ZWN0ZWQgZ2V0IHJlbGVhc2VXb3JrZmxvd09wdGlvbnMoKTogV29ya2Zsb3dPcHRpb25zIHtcbiAgICByZXR1cm4ge1xuICAgICAgb246IHtcbiAgICAgICAgcHVsbFJlcXVlc3Q6IHtcbiAgICAgICAgICBicmFuY2hlczogWydtYWluJ10sXG4gICAgICAgICAgdHlwZXM6IFsnY2xvc2VkJ10sXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgICAgam9iOiB7XG4gICAgICAgIHJ1bnNPbjogWyd1YnVudHUtbGF0ZXN0J10sXG4gICAgICAgIHBlcm1pc3Npb25zOiB7XG4gICAgICAgICAgY29udGVudHM6IEpvYlBlcm1pc3Npb24uV1JJVEUsXG4gICAgICAgICAgcHVsbFJlcXVlc3RzOiBKb2JQZXJtaXNzaW9uLldSSVRFLFxuICAgICAgICB9LFxuICAgICAgICBzdGVwczogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIG5hbWU6ICdDcmVhdGUgcmVsZWFzZScsXG4gICAgICAgICAgICB1c2VzOiAnZHhmcm9udGllci9naC1hY3Rpb24tcmVsZWFzZUBtYWluJyxcbiAgICAgICAgICAgIHdpdGg6IHtcbiAgICAgICAgICAgICAgR0lUSFVCX1RPS0VOOiAnJHt7IHNlY3JldHMuR0lUSFVCX1RPS0VOIH19JyxcbiAgICAgICAgICAgICAgQlJBTkNIOiAnbWFpbicsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICB9LFxuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogV29ya2Zsb3cgc3RhbGUgdGVtcGxhdGUgb3B0aW9ucyBmb3IgdGhlIEdpdEh1YiBjb25maWd1cmF0aW9uLlxuICAgKiBAcmV0dXJuIE9wdGlvbnMgZm9yIHN0YWxlIHdvcmtmbG93XG4gICAqIEBwcm90ZWN0ZWRcbiAgICovXG4gIHByb3RlY3RlZCBnZXQgc3RhbGVXb3JrZmxvd09wdGlvbnMoKTogV29ya2Zsb3dPcHRpb25zIHtcbiAgICByZXR1cm4ge1xuICAgICAgb246IHtcbiAgICAgICAgc2NoZWR1bGU6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBjcm9uOiAnMzYgMTggKiAqIConLFxuICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICB9LFxuICAgICAgam9iOiB7XG4gICAgICAgIHJ1bnNPbjogWyd1YnVudHUtbGF0ZXN0J10sXG4gICAgICAgIHBlcm1pc3Npb25zOiB7XG4gICAgICAgICAgaXNzdWVzOiBKb2JQZXJtaXNzaW9uLldSSVRFLFxuICAgICAgICAgIHB1bGxSZXF1ZXN0czogSm9iUGVybWlzc2lvbi5XUklURSxcbiAgICAgICAgfSxcbiAgICAgICAgc3RlcHM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICB1c2VzOiAnYWN0aW9ucy9zdGFsZUB2NScsXG4gICAgICAgICAgICB3aXRoOiB7XG4gICAgICAgICAgICAgICdyZXBvLXRva2VuJzogJyR7eyBzZWNyZXRzLkdJVEhVQl9UT0tFTiB9fScsXG4gICAgICAgICAgICAgICdkYXlzLWJlZm9yZS1pc3N1ZS1zdGFsZSc6IDMwLFxuICAgICAgICAgICAgICAnc3RhbGUtaXNzdWUtbWVzc2FnZSc6XG4gICAgICAgICAgICAgICAgJ1RoaXMgaXNzdWUgaGFzIG5vdCBiZWVuIHVwZGF0ZWQgaW4gYSB3aGlsZS4gSWYgaXQgaXMgc3RpbGwgcmVsZXZhbnQsIHBsZWFzZSBjb21tZW50IG9uIGl0IHRvIGtlZXAgaXQgb3Blbi4gVGhlIGlzc3VlIHdpbGwgYmUgY2xvc2VkIHNvb24gaWYgaXQgcmVtYWlucyBpbmFjdGl2ZS4nLFxuICAgICAgICAgICAgICAnY2xvc2UtaXNzdWUtbWVzc2FnZSc6ICdUaGlzIGlzc3VlIGhhcyBiZWVuIGNsb3NlZCBhdXRvbWF0aWNhbGx5IGR1ZSB0byBpbmFjdGl2aXR5LicsXG4gICAgICAgICAgICAgICdzdGFsZS1wci1tZXNzYWdlJzpcbiAgICAgICAgICAgICAgICAnVGhpcyBQUiBoYXMgbm90IGJlZW4gdXBkYXRlZCBpbiBhIHdoaWxlLiBJZiBpdCBpcyBzdGlsbCByZWxldmFudCwgcGxlYXNlIGNvbW1lbnQgb24gaXQgdG8ga2VlcCBpdCBvcGVuLiBUaGUgUFIgd2lsbCBiZSBjbG9zZWQgc29vbiBpZiBpdCByZW1haW5zIGluYWN0aXZlLicsXG4gICAgICAgICAgICAgICdjbG9zZS1wci1tZXNzYWdlJzogJ1RoaXMgUFIgaGFzIGJlZW4gY2xvc2VkIGF1dG9tYXRpY2FsbHkgZHVlIHRvIGluYWN0aXZpdHkuJyxcbiAgICAgICAgICAgICAgJ3N0YWxlLWlzc3VlLWxhYmVsJzogJ3N0YXR1czogc3RhbGUnLFxuICAgICAgICAgICAgICAnc3RhbGUtcHItbGFiZWwnOiAnc3RhdHVzOiBzdGFsZScsXG4gICAgICAgICAgICAgICdleGVtcHQtaXNzdWUtbGFiZWxzJzogJ3R5cGU6IGZlYXR1cmUgcmVxdWVzdCcsXG4gICAgICAgICAgICAgICdleGVtcHQtcHItbGFiZWxzJzogJ3R5cGU6IGZlYXR1cmUgcmVxdWVzdCcsXG4gICAgICAgICAgICAgICdleGVtcHQtYWxsLW1pbGVzdG9uZXMnOiB0cnVlLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgfSxcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgdGhlIHRlbXBsYXRlIGZpbGUgZm9yIGEgR2l0SHViIHB1bGwgcmVxdWVzdC5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHByaXZhdGUgY3JlYXRlUHVsbFJlcXVlc3QoKTogdm9pZCB7XG4gICAgbmV3IFB1bGxSZXF1ZXN0VGVtcGxhdGUodGhpcy5wcm9qZWN0LmdpdGh1YiEsIHtcbiAgICAgIGxpbmVzOiB0aGlzLnB1bGxSZXF1ZXN0VGVtcGxhdGUsXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyB0aGUgdGVtcGxhdGUgZmlsZSBmb3IgYSBHaXRIdWIgYnVnIGlzc3VlLlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgcHJpdmF0ZSBjcmVhdGVCdWdJc3N1ZSgpOiB2b2lkIHtcbiAgICBuZXcgVGV4dEZpbGUodGhpcy5wcm9qZWN0LCB0aGlzLmJ1Z0lzc3VlRmlsZVBhdGgsIHtcbiAgICAgIGxpbmVzOiB0aGlzLmJ1Z0lzc3VlVGVtcGxhdGUsXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyB0aGUgdGVtcGxhdGUgZmlsZSBmb3IgYSBHaXRIdWIgZmVhdHVyZSBpc3N1ZS5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHByaXZhdGUgY3JlYXRlRmVhdHVyZUlzc3VlKCk6IHZvaWQge1xuICAgIG5ldyBUZXh0RmlsZSh0aGlzLnByb2plY3QsIHRoaXMuZmVhdHVyZUlzc3VlRmlsZVBhdGgsIHtcbiAgICAgIGxpbmVzOiB0aGlzLmZlYXR1cmVJc3N1ZVRlbXBsYXRlLFxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgdGhlIHRlbXBsYXRlIGZpbGUgZm9yIGEgR2l0SHViIHF1ZXN0aW9uIGlzc3VlLlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgcHJpdmF0ZSBjcmVhdGVRdWVzdGlvbklzc3VlKCk6IHZvaWQge1xuICAgIG5ldyBUZXh0RmlsZSh0aGlzLnByb2plY3QsIHRoaXMucXVlc3Rpb25Jc3N1ZUZpbGVQYXRoLCB7XG4gICAgICBsaW5lczogdGhpcy5xdWVzdGlvbklzc3VlVGVtcGxhdGUsXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyB0aGUgdGVtcGxhdGUgZmlsZSBmb3IgYSBHaXRIdWIgcmVsZWFzZSB3b3JrZmxvdy5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHByaXZhdGUgY3JlYXRlUmVsZWFzZVdvcmtmbG93KCk6IHZvaWQge1xuICAgIGNvbnN0IHdvcmtmbG93OiBHaXRodWJXb3JrZmxvdyB8IHVuZGVmaW5lZCA9IHRoaXMucHJvamVjdC5naXRodWI/LmFkZFdvcmtmbG93KCdSZWxlYXNlJyk7XG4gICAgd29ya2Zsb3c/Lm9uKHRoaXMucmVsZWFzZVdvcmtmbG93T3B0aW9ucy5vbik7XG4gICAgd29ya2Zsb3c/LmFkZEpvYigncmVsZWFzZScsIHRoaXMucmVsZWFzZVdvcmtmbG93T3B0aW9ucy5qb2IpO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgdGhlIHRlbXBsYXRlIGZpbGUgZm9yIGEgR2l0SHViIHN0YWxlIHdvcmtmbG93LlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgcHJpdmF0ZSBjcmVhdGVTdGFsZVdvcmtmbG93KCk6IHZvaWQge1xuICAgIGNvbnN0IHdvcmtmbG93OiBHaXRodWJXb3JrZmxvdyB8IHVuZGVmaW5lZCA9IHRoaXMucHJvamVjdC5naXRodWI/LmFkZFdvcmtmbG93KCdTdGFsZScpO1xuICAgIHdvcmtmbG93Py5vbih0aGlzLnN0YWxlV29ya2Zsb3dPcHRpb25zLm9uKTtcbiAgICB3b3JrZmxvdz8uYWRkSm9iKCdzdGFsZScsIHRoaXMuc3RhbGVXb3JrZmxvd09wdGlvbnMuam9iKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIHRoZSBjb25maWd1cmF0aW9uIGZpbGUgZm9yIHRoZSBjbGlmZiB0b21sIENIQU5HRUxPRyBjcmVhdGlvbiBpbiByZWxlYXNlIHdvcmtmbG93LlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgcHJpdmF0ZSBjcmVhdGVDbGlmZlRvbWxDb25maWd1cmF0aW9uKCk6IHZvaWQge1xuICAgIG5ldyBUZXh0RmlsZSh0aGlzLnByb2plY3QsIHRoaXMuY2xpZmZUb21sRmlsZVBhdGgsIHtcbiAgICAgIGxpbmVzOiB0aGlzLmNsaWZmVG9tbENvbmZpZ3VyYXRpb24sXG4gICAgfSk7XG4gIH1cblxuICBwcm90ZWN0ZWQgYWRkVGVtcGxhdGVzKCk6IHZvaWQge1xuICAgIHRoaXMuY3JlYXRlUHVsbFJlcXVlc3QoKTtcbiAgICB0aGlzLmNyZWF0ZUJ1Z0lzc3VlKCk7XG4gICAgdGhpcy5jcmVhdGVGZWF0dXJlSXNzdWUoKTtcbiAgICB0aGlzLmNyZWF0ZVF1ZXN0aW9uSXNzdWUoKTtcblxuICAgIHRoaXMuY3JlYXRlUmVsZWFzZVdvcmtmbG93KCk7XG4gICAgdGhpcy5jcmVhdGVTdGFsZVdvcmtmbG93KCk7XG4gICAgdGhpcy5jcmVhdGVDbGlmZlRvbWxDb25maWd1cmF0aW9uKCk7XG4gIH1cbn1cbiJdfQ==