"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CommitLintBase = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const projen_1 = require("projen");
const builder_1 = require("./builder");
/**
 * Base class for CommitLint builder implementing all relevant configuration.
 * @abstract
 */
class CommitLintBase extends builder_1.Builder {
    /**
     * Initializes the base CommitLint builder.
     * @param project The project to configure CommitLint for.
     */
    constructor(project) {
        super(project);
    }
    /**
     * File path to the CommitLint configuration.
     * @return File path to config file.
     * @protected
     */
    get filePath() {
        return '.commitlintrc.ts';
    }
    /**
     * Template file for the CommitLint configuration.
     * @return Template for the config file.
     * @protected
     */
    get template() {
        return [
            '// Generated by projen.To modify, edit.projenrc.ts and run "npx projen".',
            '',
            "import type { UserConfig } from '@commitlint/types';",
            "import { RuleConfigSeverity } from '@commitlint/types';",
            '',
            'const Configuration: UserConfig = {',
            "  extends: ['@commitlint/config-conventional'],",
            '  rules: {',
            "    'type-enum': [",
            '      RuleConfigSeverity.Error,',
            "      'always',",
            "      ['build', 'chore', 'ci', 'docs', 'feat', 'fix', 'perf', 'refactor', 'revert', 'style', 'test', 'delete'],",
            '    ],',
            "    'scope-empty': [RuleConfigSeverity.Error, 'never'],",
            "    'subject-empty': [RuleConfigSeverity.Error, 'never'],",
            '  },',
            "  helpUrl: 'https://github.com/conventional-changelog/commitlint/#what-is-commitlint',",
            '};',
            '',
            'export default Configuration;',
        ];
    }
    /**
     * NPM scripts for the CommitLint builder.
     * @return Npm script entries.
     * @protected
     */
    get scripts() {
        return {
            commit: 'commit',
        };
    }
    /**
     * NPM packages to be installed as devDependencies for the CommitLint builder.
     * @return Npm dev dependencies.
     * @protected
     */
    get devDependencies() {
        return [
            '@commitlint/cli@^19.6.1',
            '@commitlint/config-conventional@^19.6.0',
            '@commitlint/prompt-cli@^19.6.1',
            '@commitlint/types@^19.5.0',
            'lint-staged@^15.2.11',
        ];
    }
    /**
     * Settings to be added to package.json for the CommitLint builder.
     * @return Configuration entries for package.json.
     * @protected
     */
    get npmSettings() {
        return {};
    }
    addTemplates() {
        new projen_1.TextFile(this.project, this.filePath, {
            lines: this.template,
        });
    }
    addSettings() {
        this.project.addFields({
            'lint-staged': this.npmSettings,
        });
    }
    addScripts() {
        for (const [name, command] of Object.entries(this.scripts)) {
            this.project.addTask(name, { exec: command });
        }
    }
    addDevDependencies() {
        this.project.addDevDeps(...this.devDependencies);
    }
}
exports.CommitLintBase = CommitLintBase;
_a = JSII_RTTI_SYMBOL_1;
CommitLintBase[_a] = { fqn: "@dxfrontier/projen-template-projects.CommitLintBase", version: "0.0.0" };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbWl0bGludC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9iYXNlL2NvbW1pdGxpbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxtQ0FBa0M7QUFDbEMsdUNBQW9DO0FBSXBDOzs7R0FHRztBQUNILE1BQXNCLGNBQWUsU0FBUSxpQkFBTztJQUNsRDs7O09BR0c7SUFDSCxZQUFZLE9BQThCO1FBQ3hDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNqQixDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILElBQWMsUUFBUTtRQUNwQixPQUFPLGtCQUFrQixDQUFDO0lBQzVCLENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsSUFBYyxRQUFRO1FBQ3BCLE9BQU87WUFDTCwwRUFBMEU7WUFDMUUsRUFBRTtZQUNGLHNEQUFzRDtZQUN0RCx5REFBeUQ7WUFDekQsRUFBRTtZQUNGLHFDQUFxQztZQUNyQyxpREFBaUQ7WUFDakQsWUFBWTtZQUNaLG9CQUFvQjtZQUNwQixpQ0FBaUM7WUFDakMsaUJBQWlCO1lBQ2pCLGlIQUFpSDtZQUNqSCxRQUFRO1lBQ1IseURBQXlEO1lBQ3pELDJEQUEyRDtZQUMzRCxNQUFNO1lBQ04sd0ZBQXdGO1lBQ3hGLElBQUk7WUFDSixFQUFFO1lBQ0YsK0JBQStCO1NBQ2hDLENBQUM7SUFDSixDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILElBQWMsT0FBTztRQUNuQixPQUFPO1lBQ0wsTUFBTSxFQUFFLFFBQVE7U0FDakIsQ0FBQztJQUNKLENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsSUFBYyxlQUFlO1FBQzNCLE9BQU87WUFDTCx5QkFBeUI7WUFDekIseUNBQXlDO1lBQ3pDLGdDQUFnQztZQUNoQywyQkFBMkI7WUFDM0Isc0JBQXNCO1NBQ3ZCLENBQUM7SUFDSixDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILElBQWMsV0FBVztRQUN2QixPQUFPLEVBQUUsQ0FBQztJQUNaLENBQUM7SUFFUyxZQUFZO1FBQ3BCLElBQUksaUJBQVEsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDeEMsS0FBSyxFQUFFLElBQUksQ0FBQyxRQUFRO1NBQ3JCLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFUyxXQUFXO1FBQ25CLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDO1lBQ3JCLGFBQWEsRUFBRSxJQUFJLENBQUMsV0FBVztTQUNoQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRVMsVUFBVTtRQUNsQixLQUFLLE1BQU0sQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLElBQUksTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQztZQUMzRCxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztRQUNoRCxDQUFDO0lBQ0gsQ0FBQztJQUVTLGtCQUFrQjtRQUMxQixJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQztJQUNuRCxDQUFDOztBQXZHSCx3Q0F3R0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUZXh0RmlsZSB9IGZyb20gJ3Byb2plbic7XG5pbXBvcnQgeyBCdWlsZGVyIH0gZnJvbSAnLi9idWlsZGVyJztcbmltcG9ydCB7IExpbnRTdGFnZWRDb25maWcsIFNjcmlwdHMgfSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQgeyBUeXBlU2NyaXB0UHJvamVjdEJhc2UgfSBmcm9tICcuL3Byb2plY3QnO1xuXG4vKipcbiAqIEJhc2UgY2xhc3MgZm9yIENvbW1pdExpbnQgYnVpbGRlciBpbXBsZW1lbnRpbmcgYWxsIHJlbGV2YW50IGNvbmZpZ3VyYXRpb24uXG4gKiBAYWJzdHJhY3RcbiAqL1xuZXhwb3J0IGFic3RyYWN0IGNsYXNzIENvbW1pdExpbnRCYXNlIGV4dGVuZHMgQnVpbGRlciB7XG4gIC8qKlxuICAgKiBJbml0aWFsaXplcyB0aGUgYmFzZSBDb21taXRMaW50IGJ1aWxkZXIuXG4gICAqIEBwYXJhbSBwcm9qZWN0IFRoZSBwcm9qZWN0IHRvIGNvbmZpZ3VyZSBDb21taXRMaW50IGZvci5cbiAgICovXG4gIGNvbnN0cnVjdG9yKHByb2plY3Q6IFR5cGVTY3JpcHRQcm9qZWN0QmFzZSkge1xuICAgIHN1cGVyKHByb2plY3QpO1xuICB9XG5cbiAgLyoqXG4gICAqIEZpbGUgcGF0aCB0byB0aGUgQ29tbWl0TGludCBjb25maWd1cmF0aW9uLlxuICAgKiBAcmV0dXJuIEZpbGUgcGF0aCB0byBjb25maWcgZmlsZS5cbiAgICogQHByb3RlY3RlZFxuICAgKi9cbiAgcHJvdGVjdGVkIGdldCBmaWxlUGF0aCgpOiBzdHJpbmcge1xuICAgIHJldHVybiAnLmNvbW1pdGxpbnRyYy50cyc7XG4gIH1cblxuICAvKipcbiAgICogVGVtcGxhdGUgZmlsZSBmb3IgdGhlIENvbW1pdExpbnQgY29uZmlndXJhdGlvbi5cbiAgICogQHJldHVybiBUZW1wbGF0ZSBmb3IgdGhlIGNvbmZpZyBmaWxlLlxuICAgKiBAcHJvdGVjdGVkXG4gICAqL1xuICBwcm90ZWN0ZWQgZ2V0IHRlbXBsYXRlKCk6IHN0cmluZ1tdIHtcbiAgICByZXR1cm4gW1xuICAgICAgJy8vIEdlbmVyYXRlZCBieSBwcm9qZW4uVG8gbW9kaWZ5LCBlZGl0LnByb2plbnJjLnRzIGFuZCBydW4gXCJucHggcHJvamVuXCIuJyxcbiAgICAgICcnLFxuICAgICAgXCJpbXBvcnQgdHlwZSB7IFVzZXJDb25maWcgfSBmcm9tICdAY29tbWl0bGludC90eXBlcyc7XCIsXG4gICAgICBcImltcG9ydCB7IFJ1bGVDb25maWdTZXZlcml0eSB9IGZyb20gJ0Bjb21taXRsaW50L3R5cGVzJztcIixcbiAgICAgICcnLFxuICAgICAgJ2NvbnN0IENvbmZpZ3VyYXRpb246IFVzZXJDb25maWcgPSB7JyxcbiAgICAgIFwiICBleHRlbmRzOiBbJ0Bjb21taXRsaW50L2NvbmZpZy1jb252ZW50aW9uYWwnXSxcIixcbiAgICAgICcgIHJ1bGVzOiB7JyxcbiAgICAgIFwiICAgICd0eXBlLWVudW0nOiBbXCIsXG4gICAgICAnICAgICAgUnVsZUNvbmZpZ1NldmVyaXR5LkVycm9yLCcsXG4gICAgICBcIiAgICAgICdhbHdheXMnLFwiLFxuICAgICAgXCIgICAgICBbJ2J1aWxkJywgJ2Nob3JlJywgJ2NpJywgJ2RvY3MnLCAnZmVhdCcsICdmaXgnLCAncGVyZicsICdyZWZhY3RvcicsICdyZXZlcnQnLCAnc3R5bGUnLCAndGVzdCcsICdkZWxldGUnXSxcIixcbiAgICAgICcgICAgXSwnLFxuICAgICAgXCIgICAgJ3Njb3BlLWVtcHR5JzogW1J1bGVDb25maWdTZXZlcml0eS5FcnJvciwgJ25ldmVyJ10sXCIsXG4gICAgICBcIiAgICAnc3ViamVjdC1lbXB0eSc6IFtSdWxlQ29uZmlnU2V2ZXJpdHkuRXJyb3IsICduZXZlciddLFwiLFxuICAgICAgJyAgfSwnLFxuICAgICAgXCIgIGhlbHBVcmw6ICdodHRwczovL2dpdGh1Yi5jb20vY29udmVudGlvbmFsLWNoYW5nZWxvZy9jb21taXRsaW50LyN3aGF0LWlzLWNvbW1pdGxpbnQnLFwiLFxuICAgICAgJ307JyxcbiAgICAgICcnLFxuICAgICAgJ2V4cG9ydCBkZWZhdWx0IENvbmZpZ3VyYXRpb247JyxcbiAgICBdO1xuICB9XG5cbiAgLyoqXG4gICAqIE5QTSBzY3JpcHRzIGZvciB0aGUgQ29tbWl0TGludCBidWlsZGVyLlxuICAgKiBAcmV0dXJuIE5wbSBzY3JpcHQgZW50cmllcy5cbiAgICogQHByb3RlY3RlZFxuICAgKi9cbiAgcHJvdGVjdGVkIGdldCBzY3JpcHRzKCk6IFNjcmlwdHMge1xuICAgIHJldHVybiB7XG4gICAgICBjb21taXQ6ICdjb21taXQnLFxuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogTlBNIHBhY2thZ2VzIHRvIGJlIGluc3RhbGxlZCBhcyBkZXZEZXBlbmRlbmNpZXMgZm9yIHRoZSBDb21taXRMaW50IGJ1aWxkZXIuXG4gICAqIEByZXR1cm4gTnBtIGRldiBkZXBlbmRlbmNpZXMuXG4gICAqIEBwcm90ZWN0ZWRcbiAgICovXG4gIHByb3RlY3RlZCBnZXQgZGV2RGVwZW5kZW5jaWVzKCk6IHN0cmluZ1tdIHtcbiAgICByZXR1cm4gW1xuICAgICAgJ0Bjb21taXRsaW50L2NsaUBeMTkuNi4xJyxcbiAgICAgICdAY29tbWl0bGludC9jb25maWctY29udmVudGlvbmFsQF4xOS42LjAnLFxuICAgICAgJ0Bjb21taXRsaW50L3Byb21wdC1jbGlAXjE5LjYuMScsXG4gICAgICAnQGNvbW1pdGxpbnQvdHlwZXNAXjE5LjUuMCcsXG4gICAgICAnbGludC1zdGFnZWRAXjE1LjIuMTEnLFxuICAgIF07XG4gIH1cblxuICAvKipcbiAgICogU2V0dGluZ3MgdG8gYmUgYWRkZWQgdG8gcGFja2FnZS5qc29uIGZvciB0aGUgQ29tbWl0TGludCBidWlsZGVyLlxuICAgKiBAcmV0dXJuIENvbmZpZ3VyYXRpb24gZW50cmllcyBmb3IgcGFja2FnZS5qc29uLlxuICAgKiBAcHJvdGVjdGVkXG4gICAqL1xuICBwcm90ZWN0ZWQgZ2V0IG5wbVNldHRpbmdzKCk6IExpbnRTdGFnZWRDb25maWcge1xuICAgIHJldHVybiB7fTtcbiAgfVxuXG4gIHByb3RlY3RlZCBhZGRUZW1wbGF0ZXMoKTogdm9pZCB7XG4gICAgbmV3IFRleHRGaWxlKHRoaXMucHJvamVjdCwgdGhpcy5maWxlUGF0aCwge1xuICAgICAgbGluZXM6IHRoaXMudGVtcGxhdGUsXG4gICAgfSk7XG4gIH1cblxuICBwcm90ZWN0ZWQgYWRkU2V0dGluZ3MoKTogdm9pZCB7XG4gICAgdGhpcy5wcm9qZWN0LmFkZEZpZWxkcyh7XG4gICAgICAnbGludC1zdGFnZWQnOiB0aGlzLm5wbVNldHRpbmdzLFxuICAgIH0pO1xuICB9XG5cbiAgcHJvdGVjdGVkIGFkZFNjcmlwdHMoKTogdm9pZCB7XG4gICAgZm9yIChjb25zdCBbbmFtZSwgY29tbWFuZF0gb2YgT2JqZWN0LmVudHJpZXModGhpcy5zY3JpcHRzKSkge1xuICAgICAgdGhpcy5wcm9qZWN0LmFkZFRhc2sobmFtZSwgeyBleGVjOiBjb21tYW5kIH0pO1xuICAgIH1cbiAgfVxuXG4gIHByb3RlY3RlZCBhZGREZXZEZXBlbmRlbmNpZXMoKTogdm9pZCB7XG4gICAgdGhpcy5wcm9qZWN0LmFkZERldkRlcHMoLi4udGhpcy5kZXZEZXBlbmRlbmNpZXMpO1xuICB9XG59XG4iXX0=