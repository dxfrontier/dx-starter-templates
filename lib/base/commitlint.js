"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CommitLintBase = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const projen_1 = require("projen");
const builder_1 = require("./builder");
/**
 * Base class for CommitLint builder implementing all relevant configuration.
 * @abstract
 */
class CommitLintBase extends builder_1.Builder {
    /**
     * Initializes the base CommitLint builder.
     * @param project The project to configure CommitLint for.
     */
    constructor(project) {
        super(project);
    }
    /**
     * File path to the CommitLint configuration.
     * @protected
     */
    get filePath() {
        return '.commitlintrc.ts';
    }
    /**
     * Template file for the CommitLint configuration.
     * @protected
     */
    get template() {
        return [
            '// Generated by projen.To modify, edit.projenrc.ts and run "npx projen".',
            '',
            // eslint-disable-next-line prettier/prettier
            "import type { UserConfig } from '@commitlint/types';",
            // eslint-disable-next-line prettier/prettier
            "import { RuleConfigSeverity } from '@commitlint/types';",
            '',
            'const Configuration: UserConfig = {',
            // eslint-disable-next-line prettier/prettier
            "  extends: ['@commitlint/config-conventional'],",
            '  rules: {',
            // eslint-disable-next-line prettier/prettier
            "    'type-enum': [",
            '      RuleConfigSeverity.Error,',
            // eslint-disable-next-line prettier/prettier
            "      'always',",
            // eslint-disable-next-line prettier/prettier
            "      ['build', 'chore', 'ci', 'docs', 'feat', 'fix', 'perf', 'refactor', 'revert', 'style', 'test', 'delete'],",
            '    ],',
            // eslint-disable-next-line prettier/prettier
            "    'scope-empty': [RuleConfigSeverity.Error, 'never'],",
            // eslint-disable-next-line prettier/prettier
            "    'subject-empty': [RuleConfigSeverity.Error, 'never'],",
            '  },',
            // eslint-disable-next-line prettier/prettier
            "  helpUrl: 'https://github.com/conventional-changelog/commitlint/#what-is-commitlint',",
            '};',
            '',
            'export default Configuration;',
        ];
    }
    /**
     * NPM scripts for the CommitLint builder.
     * @protected
     */
    get scripts() {
        return {
            commit: 'commit',
        };
    }
    /**
     * NPM packages to be installed as devDependencies for the CommitLint builder.
     * @protected
     */
    get devDependencies() {
        return [
            '@commitlint/cli',
            '@commitlint/config-conventional',
            '@commitlint/prompt-cli',
            '@commitlint/types',
            'lint-staged',
        ];
    }
    /**
     * Settings to be added to package.json for the CommitLint builder.
     * @protected
     */
    get npmSettings() {
        return {};
    }
    addTemplates() {
        new projen_1.TextFile(this.project, this.filePath, {
            lines: this.template,
        });
    }
    addSettings() {
        this.project.addFields({
            'lint-staged': this.npmSettings,
        });
    }
    addScripts() {
        for (const [name, command] of Object.entries(this.scripts)) {
            this.project.addTask(name, { exec: command });
        }
    }
    addDevDependencies() {
        this.project.addDevDeps(...this.devDependencies);
    }
    addGitAttributes() {
        this.project.gitattributes.addAttributes(`/${this.filePath}`, 'linguist-generated');
    }
}
exports.CommitLintBase = CommitLintBase;
_a = JSII_RTTI_SYMBOL_1;
CommitLintBase[_a] = { fqn: "projen-template-projects.CommitLintBase", version: "0.0.0" };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbWl0bGludC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9iYXNlL2NvbW1pdGxpbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxtQ0FBa0M7QUFDbEMsdUNBQW9DO0FBSXBDOzs7R0FHRztBQUNILE1BQXNCLGNBQWUsU0FBUSxpQkFBTztJQUNsRDs7O09BR0c7SUFDSCxZQUFZLE9BQThCO1FBQ3hDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNqQixDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsSUFBYyxRQUFRO1FBQ3BCLE9BQU8sa0JBQWtCLENBQUM7SUFDNUIsQ0FBQztJQUVEOzs7T0FHRztJQUNILElBQWMsUUFBUTtRQUNwQixPQUFPO1lBQ0wsMEVBQTBFO1lBQzFFLEVBQUU7WUFDRiw2Q0FBNkM7WUFDN0Msc0RBQXNEO1lBQ3RELDZDQUE2QztZQUM3Qyx5REFBeUQ7WUFDekQsRUFBRTtZQUNGLHFDQUFxQztZQUNyQyw2Q0FBNkM7WUFDN0MsaURBQWlEO1lBQ2pELFlBQVk7WUFDWiw2Q0FBNkM7WUFDN0Msb0JBQW9CO1lBQ3BCLGlDQUFpQztZQUNqQyw2Q0FBNkM7WUFDN0MsaUJBQWlCO1lBQ2pCLDZDQUE2QztZQUM3QyxpSEFBaUg7WUFDakgsUUFBUTtZQUNSLDZDQUE2QztZQUM3Qyx5REFBeUQ7WUFDekQsNkNBQTZDO1lBQzdDLDJEQUEyRDtZQUMzRCxNQUFNO1lBQ04sNkNBQTZDO1lBQzdDLHdGQUF3RjtZQUN4RixJQUFJO1lBQ0osRUFBRTtZQUNGLCtCQUErQjtTQUNoQyxDQUFDO0lBQ0osQ0FBQztJQUVEOzs7T0FHRztJQUNILElBQWMsT0FBTztRQUNuQixPQUFPO1lBQ0wsTUFBTSxFQUFFLFFBQVE7U0FDakIsQ0FBQztJQUNKLENBQUM7SUFFRDs7O09BR0c7SUFDSCxJQUFjLGVBQWU7UUFDM0IsT0FBTztZQUNMLGlCQUFpQjtZQUNqQixpQ0FBaUM7WUFDakMsd0JBQXdCO1lBQ3hCLG1CQUFtQjtZQUNuQixhQUFhO1NBQ2QsQ0FBQztJQUNKLENBQUM7SUFFRDs7O09BR0c7SUFDSCxJQUFjLFdBQVc7UUFDdkIsT0FBTyxFQUFFLENBQUM7SUFDWixDQUFDO0lBRVMsWUFBWTtRQUNwQixJQUFJLGlCQUFRLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsUUFBUSxFQUFFO1lBQ3hDLEtBQUssRUFBRSxJQUFJLENBQUMsUUFBUTtTQUNyQixDQUFDLENBQUM7SUFDTCxDQUFDO0lBRVMsV0FBVztRQUNuQixJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQztZQUNyQixhQUFhLEVBQUUsSUFBSSxDQUFDLFdBQVc7U0FDaEMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVTLFVBQVU7UUFDbEIsS0FBSyxNQUFNLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxJQUFJLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUM7WUFDM0QsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxDQUFDLENBQUM7UUFDaEQsQ0FBQztJQUNILENBQUM7SUFFUyxrQkFBa0I7UUFDMUIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUM7SUFDbkQsQ0FBQztJQUVTLGdCQUFnQjtRQUN4QixJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxhQUFhLENBQUMsSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFLEVBQUUsb0JBQW9CLENBQUMsQ0FBQztJQUN0RixDQUFDOztBQS9HSCx3Q0FnSEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUZXh0RmlsZSB9IGZyb20gJ3Byb2plbic7XG5pbXBvcnQgeyBCdWlsZGVyIH0gZnJvbSAnLi9idWlsZGVyJztcbmltcG9ydCB7IExpbnRTdGFnZWRDb25maWcsIFNjcmlwdHMgfSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQgeyBUeXBlU2NyaXB0UHJvamVjdEJhc2UgfSBmcm9tICcuL3Byb2plY3QnO1xuXG4vKipcbiAqIEJhc2UgY2xhc3MgZm9yIENvbW1pdExpbnQgYnVpbGRlciBpbXBsZW1lbnRpbmcgYWxsIHJlbGV2YW50IGNvbmZpZ3VyYXRpb24uXG4gKiBAYWJzdHJhY3RcbiAqL1xuZXhwb3J0IGFic3RyYWN0IGNsYXNzIENvbW1pdExpbnRCYXNlIGV4dGVuZHMgQnVpbGRlciB7XG4gIC8qKlxuICAgKiBJbml0aWFsaXplcyB0aGUgYmFzZSBDb21taXRMaW50IGJ1aWxkZXIuXG4gICAqIEBwYXJhbSBwcm9qZWN0IFRoZSBwcm9qZWN0IHRvIGNvbmZpZ3VyZSBDb21taXRMaW50IGZvci5cbiAgICovXG4gIGNvbnN0cnVjdG9yKHByb2plY3Q6IFR5cGVTY3JpcHRQcm9qZWN0QmFzZSkge1xuICAgIHN1cGVyKHByb2plY3QpO1xuICB9XG5cbiAgLyoqXG4gICAqIEZpbGUgcGF0aCB0byB0aGUgQ29tbWl0TGludCBjb25maWd1cmF0aW9uLlxuICAgKiBAcHJvdGVjdGVkXG4gICAqL1xuICBwcm90ZWN0ZWQgZ2V0IGZpbGVQYXRoKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuICcuY29tbWl0bGludHJjLnRzJztcbiAgfVxuXG4gIC8qKlxuICAgKiBUZW1wbGF0ZSBmaWxlIGZvciB0aGUgQ29tbWl0TGludCBjb25maWd1cmF0aW9uLlxuICAgKiBAcHJvdGVjdGVkXG4gICAqL1xuICBwcm90ZWN0ZWQgZ2V0IHRlbXBsYXRlKCk6IHN0cmluZ1tdIHtcbiAgICByZXR1cm4gW1xuICAgICAgJy8vIEdlbmVyYXRlZCBieSBwcm9qZW4uVG8gbW9kaWZ5LCBlZGl0LnByb2plbnJjLnRzIGFuZCBydW4gXCJucHggcHJvamVuXCIuJyxcbiAgICAgICcnLFxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZXR0aWVyL3ByZXR0aWVyXG4gICAgICBcImltcG9ydCB0eXBlIHsgVXNlckNvbmZpZyB9IGZyb20gJ0Bjb21taXRsaW50L3R5cGVzJztcIixcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmV0dGllci9wcmV0dGllclxuICAgICAgXCJpbXBvcnQgeyBSdWxlQ29uZmlnU2V2ZXJpdHkgfSBmcm9tICdAY29tbWl0bGludC90eXBlcyc7XCIsXG4gICAgICAnJyxcbiAgICAgICdjb25zdCBDb25maWd1cmF0aW9uOiBVc2VyQ29uZmlnID0geycsXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJldHRpZXIvcHJldHRpZXJcbiAgICAgIFwiICBleHRlbmRzOiBbJ0Bjb21taXRsaW50L2NvbmZpZy1jb252ZW50aW9uYWwnXSxcIixcbiAgICAgICcgIHJ1bGVzOiB7JyxcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmV0dGllci9wcmV0dGllclxuICAgICAgXCIgICAgJ3R5cGUtZW51bSc6IFtcIixcbiAgICAgICcgICAgICBSdWxlQ29uZmlnU2V2ZXJpdHkuRXJyb3IsJyxcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmV0dGllci9wcmV0dGllclxuICAgICAgXCIgICAgICAnYWx3YXlzJyxcIixcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmV0dGllci9wcmV0dGllclxuICAgICAgXCIgICAgICBbJ2J1aWxkJywgJ2Nob3JlJywgJ2NpJywgJ2RvY3MnLCAnZmVhdCcsICdmaXgnLCAncGVyZicsICdyZWZhY3RvcicsICdyZXZlcnQnLCAnc3R5bGUnLCAndGVzdCcsICdkZWxldGUnXSxcIixcbiAgICAgICcgICAgXSwnLFxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZXR0aWVyL3ByZXR0aWVyXG4gICAgICBcIiAgICAnc2NvcGUtZW1wdHknOiBbUnVsZUNvbmZpZ1NldmVyaXR5LkVycm9yLCAnbmV2ZXInXSxcIixcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmV0dGllci9wcmV0dGllclxuICAgICAgXCIgICAgJ3N1YmplY3QtZW1wdHknOiBbUnVsZUNvbmZpZ1NldmVyaXR5LkVycm9yLCAnbmV2ZXInXSxcIixcbiAgICAgICcgIH0sJyxcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmV0dGllci9wcmV0dGllclxuICAgICAgXCIgIGhlbHBVcmw6ICdodHRwczovL2dpdGh1Yi5jb20vY29udmVudGlvbmFsLWNoYW5nZWxvZy9jb21taXRsaW50LyN3aGF0LWlzLWNvbW1pdGxpbnQnLFwiLFxuICAgICAgJ307JyxcbiAgICAgICcnLFxuICAgICAgJ2V4cG9ydCBkZWZhdWx0IENvbmZpZ3VyYXRpb247JyxcbiAgICBdO1xuICB9XG5cbiAgLyoqXG4gICAqIE5QTSBzY3JpcHRzIGZvciB0aGUgQ29tbWl0TGludCBidWlsZGVyLlxuICAgKiBAcHJvdGVjdGVkXG4gICAqL1xuICBwcm90ZWN0ZWQgZ2V0IHNjcmlwdHMoKTogU2NyaXB0cyB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGNvbW1pdDogJ2NvbW1pdCcsXG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBOUE0gcGFja2FnZXMgdG8gYmUgaW5zdGFsbGVkIGFzIGRldkRlcGVuZGVuY2llcyBmb3IgdGhlIENvbW1pdExpbnQgYnVpbGRlci5cbiAgICogQHByb3RlY3RlZFxuICAgKi9cbiAgcHJvdGVjdGVkIGdldCBkZXZEZXBlbmRlbmNpZXMoKTogc3RyaW5nW10ge1xuICAgIHJldHVybiBbXG4gICAgICAnQGNvbW1pdGxpbnQvY2xpJyxcbiAgICAgICdAY29tbWl0bGludC9jb25maWctY29udmVudGlvbmFsJyxcbiAgICAgICdAY29tbWl0bGludC9wcm9tcHQtY2xpJyxcbiAgICAgICdAY29tbWl0bGludC90eXBlcycsXG4gICAgICAnbGludC1zdGFnZWQnLFxuICAgIF07XG4gIH1cblxuICAvKipcbiAgICogU2V0dGluZ3MgdG8gYmUgYWRkZWQgdG8gcGFja2FnZS5qc29uIGZvciB0aGUgQ29tbWl0TGludCBidWlsZGVyLlxuICAgKiBAcHJvdGVjdGVkXG4gICAqL1xuICBwcm90ZWN0ZWQgZ2V0IG5wbVNldHRpbmdzKCk6IExpbnRTdGFnZWRDb25maWcge1xuICAgIHJldHVybiB7fTtcbiAgfVxuXG4gIHByb3RlY3RlZCBhZGRUZW1wbGF0ZXMoKTogdm9pZCB7XG4gICAgbmV3IFRleHRGaWxlKHRoaXMucHJvamVjdCwgdGhpcy5maWxlUGF0aCwge1xuICAgICAgbGluZXM6IHRoaXMudGVtcGxhdGUsXG4gICAgfSk7XG4gIH1cblxuICBwcm90ZWN0ZWQgYWRkU2V0dGluZ3MoKTogdm9pZCB7XG4gICAgdGhpcy5wcm9qZWN0LmFkZEZpZWxkcyh7XG4gICAgICAnbGludC1zdGFnZWQnOiB0aGlzLm5wbVNldHRpbmdzLFxuICAgIH0pO1xuICB9XG5cbiAgcHJvdGVjdGVkIGFkZFNjcmlwdHMoKTogdm9pZCB7XG4gICAgZm9yIChjb25zdCBbbmFtZSwgY29tbWFuZF0gb2YgT2JqZWN0LmVudHJpZXModGhpcy5zY3JpcHRzKSkge1xuICAgICAgdGhpcy5wcm9qZWN0LmFkZFRhc2sobmFtZSwgeyBleGVjOiBjb21tYW5kIH0pO1xuICAgIH1cbiAgfVxuXG4gIHByb3RlY3RlZCBhZGREZXZEZXBlbmRlbmNpZXMoKTogdm9pZCB7XG4gICAgdGhpcy5wcm9qZWN0LmFkZERldkRlcHMoLi4udGhpcy5kZXZEZXBlbmRlbmNpZXMpO1xuICB9XG5cbiAgcHJvdGVjdGVkIGFkZEdpdEF0dHJpYnV0ZXMoKTogdm9pZCB7XG4gICAgdGhpcy5wcm9qZWN0LmdpdGF0dHJpYnV0ZXMuYWRkQXR0cmlidXRlcyhgLyR7dGhpcy5maWxlUGF0aH1gLCAnbGluZ3Vpc3QtZ2VuZXJhdGVkJyk7XG4gIH1cbn1cbiJdfQ==