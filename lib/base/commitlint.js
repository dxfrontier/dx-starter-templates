"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CommitLintBase = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const projen_1 = require("projen");
const builder_1 = require("./builder");
/**
 * Base class for CommitLint builder implementing all relevant configuration.
 * @abstract
 */
class CommitLintBase extends builder_1.Builder {
    /**
     * Initializes the base CommitLint builder.
     * @param project The project to configure CommitLint for.
     */
    constructor(project) {
        super(project);
    }
    /**
     * File path to the CommitLint configuration.
     * @return File path to config file.
     * @protected
     */
    get filePath() {
        return '.commitlintrc.ts';
    }
    /**
     * Template file for the CommitLint configuration.
     * @return Template for the config file.
     * @protected
     */
    get template() {
        return [
            '// Generated by projen.To modify, edit.projenrc.ts and run "npx projen".',
            '',
            // eslint-disable-next-line prettier/prettier
            "import type { UserConfig } from '@commitlint/types';",
            // eslint-disable-next-line prettier/prettier
            "import { RuleConfigSeverity } from '@commitlint/types';",
            '',
            'const Configuration: UserConfig = {',
            // eslint-disable-next-line prettier/prettier
            "  extends: ['@commitlint/config-conventional'],",
            '  rules: {',
            // eslint-disable-next-line prettier/prettier
            "    'type-enum': [",
            '      RuleConfigSeverity.Error,',
            // eslint-disable-next-line prettier/prettier
            "      'always',",
            // eslint-disable-next-line prettier/prettier
            "      ['build', 'chore', 'ci', 'docs', 'feat', 'fix', 'perf', 'refactor', 'revert', 'style', 'test', 'delete'],",
            '    ],',
            // eslint-disable-next-line prettier/prettier
            "    'scope-empty': [RuleConfigSeverity.Error, 'never'],",
            // eslint-disable-next-line prettier/prettier
            "    'subject-empty': [RuleConfigSeverity.Error, 'never'],",
            '  },',
            // eslint-disable-next-line prettier/prettier
            "  helpUrl: 'https://github.com/conventional-changelog/commitlint/#what-is-commitlint',",
            '};',
            '',
            'export default Configuration;',
        ];
    }
    /**
     * NPM scripts for the CommitLint builder.
     * @return Npm script entries.
     * @protected
     */
    get scripts() {
        return {
            commit: 'commit',
        };
    }
    /**
     * NPM packages to be installed as devDependencies for the CommitLint builder.
     * @return Npm dev dependencies.
     * @protected
     */
    get devDependencies() {
        return [
            '@commitlint/cli',
            '@commitlint/config-conventional',
            '@commitlint/prompt-cli',
            '@commitlint/types',
            'lint-staged',
        ];
    }
    /**
     * Settings to be added to package.json for the CommitLint builder.
     * @return Configuration entries for package.json.
     * @protected
     */
    get npmSettings() {
        return {};
    }
    addTemplates() {
        new projen_1.TextFile(this.project, this.filePath, {
            lines: this.template,
        });
    }
    addSettings() {
        this.project.addFields({
            'lint-staged': this.npmSettings,
        });
    }
    addScripts() {
        for (const [name, command] of Object.entries(this.scripts)) {
            this.project.addTask(name, { exec: command });
        }
    }
    addDevDependencies() {
        this.project.addDevDeps(...this.devDependencies);
    }
}
exports.CommitLintBase = CommitLintBase;
_a = JSII_RTTI_SYMBOL_1;
CommitLintBase[_a] = { fqn: "@dxfrontier/projen-template-projects.CommitLintBase", version: "0.0.0" };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbWl0bGludC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9iYXNlL2NvbW1pdGxpbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxtQ0FBa0M7QUFDbEMsdUNBQW9DO0FBSXBDOzs7R0FHRztBQUNILE1BQXNCLGNBQWUsU0FBUSxpQkFBTztJQUNsRDs7O09BR0c7SUFDSCxZQUFZLE9BQThCO1FBQ3hDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNqQixDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILElBQWMsUUFBUTtRQUNwQixPQUFPLGtCQUFrQixDQUFDO0lBQzVCLENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsSUFBYyxRQUFRO1FBQ3BCLE9BQU87WUFDTCwwRUFBMEU7WUFDMUUsRUFBRTtZQUNGLDZDQUE2QztZQUM3QyxzREFBc0Q7WUFDdEQsNkNBQTZDO1lBQzdDLHlEQUF5RDtZQUN6RCxFQUFFO1lBQ0YscUNBQXFDO1lBQ3JDLDZDQUE2QztZQUM3QyxpREFBaUQ7WUFDakQsWUFBWTtZQUNaLDZDQUE2QztZQUM3QyxvQkFBb0I7WUFDcEIsaUNBQWlDO1lBQ2pDLDZDQUE2QztZQUM3QyxpQkFBaUI7WUFDakIsNkNBQTZDO1lBQzdDLGlIQUFpSDtZQUNqSCxRQUFRO1lBQ1IsNkNBQTZDO1lBQzdDLHlEQUF5RDtZQUN6RCw2Q0FBNkM7WUFDN0MsMkRBQTJEO1lBQzNELE1BQU07WUFDTiw2Q0FBNkM7WUFDN0Msd0ZBQXdGO1lBQ3hGLElBQUk7WUFDSixFQUFFO1lBQ0YsK0JBQStCO1NBQ2hDLENBQUM7SUFDSixDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILElBQWMsT0FBTztRQUNuQixPQUFPO1lBQ0wsTUFBTSxFQUFFLFFBQVE7U0FDakIsQ0FBQztJQUNKLENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsSUFBYyxlQUFlO1FBQzNCLE9BQU87WUFDTCxpQkFBaUI7WUFDakIsaUNBQWlDO1lBQ2pDLHdCQUF3QjtZQUN4QixtQkFBbUI7WUFDbkIsYUFBYTtTQUNkLENBQUM7SUFDSixDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILElBQWMsV0FBVztRQUN2QixPQUFPLEVBQUUsQ0FBQztJQUNaLENBQUM7SUFFUyxZQUFZO1FBQ3BCLElBQUksaUJBQVEsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDeEMsS0FBSyxFQUFFLElBQUksQ0FBQyxRQUFRO1NBQ3JCLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFUyxXQUFXO1FBQ25CLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDO1lBQ3JCLGFBQWEsRUFBRSxJQUFJLENBQUMsV0FBVztTQUNoQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRVMsVUFBVTtRQUNsQixLQUFLLE1BQU0sQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLElBQUksTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQztZQUMzRCxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztRQUNoRCxDQUFDO0lBQ0gsQ0FBQztJQUVTLGtCQUFrQjtRQUMxQixJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQztJQUNuRCxDQUFDOztBQWhISCx3Q0FpSEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUZXh0RmlsZSB9IGZyb20gJ3Byb2plbic7XG5pbXBvcnQgeyBCdWlsZGVyIH0gZnJvbSAnLi9idWlsZGVyJztcbmltcG9ydCB7IExpbnRTdGFnZWRDb25maWcsIFNjcmlwdHMgfSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQgeyBUeXBlU2NyaXB0UHJvamVjdEJhc2UgfSBmcm9tICcuL3Byb2plY3QnO1xuXG4vKipcbiAqIEJhc2UgY2xhc3MgZm9yIENvbW1pdExpbnQgYnVpbGRlciBpbXBsZW1lbnRpbmcgYWxsIHJlbGV2YW50IGNvbmZpZ3VyYXRpb24uXG4gKiBAYWJzdHJhY3RcbiAqL1xuZXhwb3J0IGFic3RyYWN0IGNsYXNzIENvbW1pdExpbnRCYXNlIGV4dGVuZHMgQnVpbGRlciB7XG4gIC8qKlxuICAgKiBJbml0aWFsaXplcyB0aGUgYmFzZSBDb21taXRMaW50IGJ1aWxkZXIuXG4gICAqIEBwYXJhbSBwcm9qZWN0IFRoZSBwcm9qZWN0IHRvIGNvbmZpZ3VyZSBDb21taXRMaW50IGZvci5cbiAgICovXG4gIGNvbnN0cnVjdG9yKHByb2plY3Q6IFR5cGVTY3JpcHRQcm9qZWN0QmFzZSkge1xuICAgIHN1cGVyKHByb2plY3QpO1xuICB9XG5cbiAgLyoqXG4gICAqIEZpbGUgcGF0aCB0byB0aGUgQ29tbWl0TGludCBjb25maWd1cmF0aW9uLlxuICAgKiBAcmV0dXJuIEZpbGUgcGF0aCB0byBjb25maWcgZmlsZS5cbiAgICogQHByb3RlY3RlZFxuICAgKi9cbiAgcHJvdGVjdGVkIGdldCBmaWxlUGF0aCgpOiBzdHJpbmcge1xuICAgIHJldHVybiAnLmNvbW1pdGxpbnRyYy50cyc7XG4gIH1cblxuICAvKipcbiAgICogVGVtcGxhdGUgZmlsZSBmb3IgdGhlIENvbW1pdExpbnQgY29uZmlndXJhdGlvbi5cbiAgICogQHJldHVybiBUZW1wbGF0ZSBmb3IgdGhlIGNvbmZpZyBmaWxlLlxuICAgKiBAcHJvdGVjdGVkXG4gICAqL1xuICBwcm90ZWN0ZWQgZ2V0IHRlbXBsYXRlKCk6IHN0cmluZ1tdIHtcbiAgICByZXR1cm4gW1xuICAgICAgJy8vIEdlbmVyYXRlZCBieSBwcm9qZW4uVG8gbW9kaWZ5LCBlZGl0LnByb2plbnJjLnRzIGFuZCBydW4gXCJucHggcHJvamVuXCIuJyxcbiAgICAgICcnLFxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZXR0aWVyL3ByZXR0aWVyXG4gICAgICBcImltcG9ydCB0eXBlIHsgVXNlckNvbmZpZyB9IGZyb20gJ0Bjb21taXRsaW50L3R5cGVzJztcIixcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmV0dGllci9wcmV0dGllclxuICAgICAgXCJpbXBvcnQgeyBSdWxlQ29uZmlnU2V2ZXJpdHkgfSBmcm9tICdAY29tbWl0bGludC90eXBlcyc7XCIsXG4gICAgICAnJyxcbiAgICAgICdjb25zdCBDb25maWd1cmF0aW9uOiBVc2VyQ29uZmlnID0geycsXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJldHRpZXIvcHJldHRpZXJcbiAgICAgIFwiICBleHRlbmRzOiBbJ0Bjb21taXRsaW50L2NvbmZpZy1jb252ZW50aW9uYWwnXSxcIixcbiAgICAgICcgIHJ1bGVzOiB7JyxcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmV0dGllci9wcmV0dGllclxuICAgICAgXCIgICAgJ3R5cGUtZW51bSc6IFtcIixcbiAgICAgICcgICAgICBSdWxlQ29uZmlnU2V2ZXJpdHkuRXJyb3IsJyxcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmV0dGllci9wcmV0dGllclxuICAgICAgXCIgICAgICAnYWx3YXlzJyxcIixcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmV0dGllci9wcmV0dGllclxuICAgICAgXCIgICAgICBbJ2J1aWxkJywgJ2Nob3JlJywgJ2NpJywgJ2RvY3MnLCAnZmVhdCcsICdmaXgnLCAncGVyZicsICdyZWZhY3RvcicsICdyZXZlcnQnLCAnc3R5bGUnLCAndGVzdCcsICdkZWxldGUnXSxcIixcbiAgICAgICcgICAgXSwnLFxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZXR0aWVyL3ByZXR0aWVyXG4gICAgICBcIiAgICAnc2NvcGUtZW1wdHknOiBbUnVsZUNvbmZpZ1NldmVyaXR5LkVycm9yLCAnbmV2ZXInXSxcIixcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmV0dGllci9wcmV0dGllclxuICAgICAgXCIgICAgJ3N1YmplY3QtZW1wdHknOiBbUnVsZUNvbmZpZ1NldmVyaXR5LkVycm9yLCAnbmV2ZXInXSxcIixcbiAgICAgICcgIH0sJyxcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmV0dGllci9wcmV0dGllclxuICAgICAgXCIgIGhlbHBVcmw6ICdodHRwczovL2dpdGh1Yi5jb20vY29udmVudGlvbmFsLWNoYW5nZWxvZy9jb21taXRsaW50LyN3aGF0LWlzLWNvbW1pdGxpbnQnLFwiLFxuICAgICAgJ307JyxcbiAgICAgICcnLFxuICAgICAgJ2V4cG9ydCBkZWZhdWx0IENvbmZpZ3VyYXRpb247JyxcbiAgICBdO1xuICB9XG5cbiAgLyoqXG4gICAqIE5QTSBzY3JpcHRzIGZvciB0aGUgQ29tbWl0TGludCBidWlsZGVyLlxuICAgKiBAcmV0dXJuIE5wbSBzY3JpcHQgZW50cmllcy5cbiAgICogQHByb3RlY3RlZFxuICAgKi9cbiAgcHJvdGVjdGVkIGdldCBzY3JpcHRzKCk6IFNjcmlwdHMge1xuICAgIHJldHVybiB7XG4gICAgICBjb21taXQ6ICdjb21taXQnLFxuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogTlBNIHBhY2thZ2VzIHRvIGJlIGluc3RhbGxlZCBhcyBkZXZEZXBlbmRlbmNpZXMgZm9yIHRoZSBDb21taXRMaW50IGJ1aWxkZXIuXG4gICAqIEByZXR1cm4gTnBtIGRldiBkZXBlbmRlbmNpZXMuXG4gICAqIEBwcm90ZWN0ZWRcbiAgICovXG4gIHByb3RlY3RlZCBnZXQgZGV2RGVwZW5kZW5jaWVzKCk6IHN0cmluZ1tdIHtcbiAgICByZXR1cm4gW1xuICAgICAgJ0Bjb21taXRsaW50L2NsaScsXG4gICAgICAnQGNvbW1pdGxpbnQvY29uZmlnLWNvbnZlbnRpb25hbCcsXG4gICAgICAnQGNvbW1pdGxpbnQvcHJvbXB0LWNsaScsXG4gICAgICAnQGNvbW1pdGxpbnQvdHlwZXMnLFxuICAgICAgJ2xpbnQtc3RhZ2VkJyxcbiAgICBdO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldHRpbmdzIHRvIGJlIGFkZGVkIHRvIHBhY2thZ2UuanNvbiBmb3IgdGhlIENvbW1pdExpbnQgYnVpbGRlci5cbiAgICogQHJldHVybiBDb25maWd1cmF0aW9uIGVudHJpZXMgZm9yIHBhY2thZ2UuanNvbi5cbiAgICogQHByb3RlY3RlZFxuICAgKi9cbiAgcHJvdGVjdGVkIGdldCBucG1TZXR0aW5ncygpOiBMaW50U3RhZ2VkQ29uZmlnIHtcbiAgICByZXR1cm4ge307XG4gIH1cblxuICBwcm90ZWN0ZWQgYWRkVGVtcGxhdGVzKCk6IHZvaWQge1xuICAgIG5ldyBUZXh0RmlsZSh0aGlzLnByb2plY3QsIHRoaXMuZmlsZVBhdGgsIHtcbiAgICAgIGxpbmVzOiB0aGlzLnRlbXBsYXRlLFxuICAgIH0pO1xuICB9XG5cbiAgcHJvdGVjdGVkIGFkZFNldHRpbmdzKCk6IHZvaWQge1xuICAgIHRoaXMucHJvamVjdC5hZGRGaWVsZHMoe1xuICAgICAgJ2xpbnQtc3RhZ2VkJzogdGhpcy5ucG1TZXR0aW5ncyxcbiAgICB9KTtcbiAgfVxuXG4gIHByb3RlY3RlZCBhZGRTY3JpcHRzKCk6IHZvaWQge1xuICAgIGZvciAoY29uc3QgW25hbWUsIGNvbW1hbmRdIG9mIE9iamVjdC5lbnRyaWVzKHRoaXMuc2NyaXB0cykpIHtcbiAgICAgIHRoaXMucHJvamVjdC5hZGRUYXNrKG5hbWUsIHsgZXhlYzogY29tbWFuZCB9KTtcbiAgICB9XG4gIH1cblxuICBwcm90ZWN0ZWQgYWRkRGV2RGVwZW5kZW5jaWVzKCk6IHZvaWQge1xuICAgIHRoaXMucHJvamVjdC5hZGREZXZEZXBzKC4uLnRoaXMuZGV2RGVwZW5kZW5jaWVzKTtcbiAgfVxufVxuIl19