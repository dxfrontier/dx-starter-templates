"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseProject = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const typescript_1 = require("projen/lib/typescript");
const options_1 = require("./config/options");
const git_1 = require("./config/git");
const utils_1 = require("../util/utils");
/**
 * Base class for managing project configuration.
 */
class BaseProject extends typescript_1.TypeScriptProject {
    /**
     * Initializes the project.
     * @param options Additional project options.
     */
    constructor(options) {
        super({
            ...options_1.BaseOptions.sharedOptions(options),
        });
        new git_1.GitConfigBase(this);
        this.initializeBaseConfigs(options);
        this.kind = 'base';
    }
    /**
     * Initializes the base configurations for the project.
     *
     * This method is responsible for initializing the core configurations related to TypeScript,
     * ESLint, and Jest, based on the provided options. The configuration objects are created and
     * initialized according to the flags passed in the `options` parameter. This allows the project
     * to be configured with specific tools only when needed, without unnecessary overhead.
     *
     * The method is overridden from the base class to provide a customized initialization process
     * for a project that is specifically tailored for GitHub Actions-based configurations.
     *
     * @param options - The configuration options used to initialize the various project settings.
     * The `options` object is expected to be of type `GitHubActionProjectOptions` and contains flags
     * that enable or disable specific configurations like `eslintEnabled`, `jestEnabled`, etc. The method
     * reads these flags and initializes the respective configuration objects (e.g., `typescriptConfig`,
     * `eslintConfig`, `jestConfig`) based on their values.
     *
     * @example
     * const options: GitHubActionProjectOptions = {
     *   eslintEnabled: true,
     *   jestEnabled: false,
     *   // other options...
     * };
     * this.initializeBaseConfigs(options);
     *
     * @remarks
     * - This method is overwritten by the child class to initialize the base configurations before
     *   proceeding with the setup of more specific configurations like GitHub, Husky, etc.
     * - The initialization of configurations is conditional based on the `options` flags, ensuring that only
     *   necessary configurations are applied to the project.
     */
    initializeBaseConfigs(options) {
        this.typescript = options.typescriptEnabled ?? false;
    }
    preSynthesize() {
        utils_1.util.registerConfig(this.components);
        super.preSynthesize();
    }
    postSynthesize() {
        super.postSynthesize();
    }
}
exports.BaseProject = BaseProject;
_a = JSII_RTTI_SYMBOL_1;
BaseProject[_a] = { fqn: "@dxfrontier/projen-template-projects.BaseProject", version: "0.0.0" };
//# sourceMappingURL=data:application/json;base64,