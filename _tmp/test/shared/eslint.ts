import { SynthOutput } from 'projen/lib/util/synth';
import * as common from './common';
import { TaskSteps } from '../../src/types';

/**
 * Validates that the ESLint configuration file matches the expected template.
 * Allows extending the base configuration with additional rules and ignores.
 *
 * @param snapshot Synthesized project output.
 * @param additionalRules Additional rules to include in the configuration.
 * @param additionalIgnores Additional file paths to include in the ignore list.
 */
export function testConfigFile(
  snapshot: SynthOutput,
  additionalRules: Record<string, string> = {},
  additionalIgnores: string[] = [],
): void {
  const baseRules: Record<string, string> = {
    'no-console': 'off',
    'require-atomic-updates': 'off',
    '@typescript-eslint/no-non-null-assertion': 'off',
    '@typescript-eslint/ban-types': 'off',
    '@typescript-eslint/explicit-function-return-type': 'off',
    '@typescript-eslint/consistent-type-imports': 'off',
    '@typescript-eslint/no-explicit-any': 'off',
  };
  const baseIgnores: string[] = ['docs/', 'test/'];

  const rules: Record<string, string> = { ...baseRules, ...additionalRules };
  const ignores: string[] = [...baseIgnores, ...additionalIgnores];

  const rulesString: string = Object.entries(rules)
    .map(([rule, setting]: [string, string]): string => `      '${rule}': '${setting}',`)
    .join('\n');
  const ignoresString: string = ignores.map((ignore: string): string => `'${ignore}'`).join(', ');

  const expectedTemplateLines: string = [
    '// Generated by projen.To modify, edit.projenrc.ts and run "npx projen".',
    '',
    "import eslint from '@eslint/js';",
    "import tseslint from 'typescript-eslint';",
    '',
    'export default tseslint.config(',
    '  eslint.configs.recommended,',
    '  ...tseslint.configs.recommended,',
    '  ...tseslint.configs.stylistic,',
    '  {',
    '    rules: {',
    rulesString,
    '    },',
    '  },',
    '  {',
    `    ignores: [${ignoresString}],`,
    '  },',
    ');',
  ].join('\n');

  expect(snapshot['eslint.config.mjs']).toStrictEqual(expectedTemplateLines);
}

/**
 * Validates that npm scripts are added properly.
 * @param snapshot Synthesized project output.
 */
export function testScripts(snapshot: SynthOutput): void {
  const expectedTasks: TaskSteps = {
    eslint: ['eslint .'],
  };
  common.testScripts(snapshot, expectedTasks);
}

/**
 * Validates that npm dev dependencies are added properly.
 * @param snapshot Synthesized project output.
 * @param expectedDevDependencies List of expected devDependencies to test for.
 */
export function testDevDependencies(snapshot: SynthOutput, expectedDevDependencies: string[] = []): void {
  const standardDevDependencies: string[] = ['eslint@^9.17.0', 'typescript-eslint@^8.18.1'];
  const devDependencies: string[] = expectedDevDependencies.length ? expectedDevDependencies : standardDevDependencies;
  common.testDevDependencies(snapshot, devDependencies);
}

/**
 * Validates that project related files are added to .gitattributes and defined as linguist-generated.
 * @param snapshot Synthesized project output.
 */
export function testGitAttributes(snapshot: SynthOutput): void {
  const patterns: RegExp[] = [/\/eslint.config.mjs linguist-generated( $|\s|$)/m];

  common.testGitAttributes(snapshot, patterns);
}
